From 50d46e8ace7d70b4b8959c7e30b85c59dd443c84 Mon Sep 17 00:00:00 2001
From: Sergey Suloev <ssuloev@orpaltech.com>
Date: Sat, 12 May 2018 17:13:47 +0300
Subject: [PATCH] bcm2835: ASoC: Add Audioinjector-Pi soundcard driver

---
 sound/soc/bcm/Kconfig                  |   7 +
 sound/soc/bcm/Makefile                 |   3 +
 sound/soc/bcm/audioinjector-pi-sound.c | 228 +++++++++++++++++++++++++
 3 files changed, 238 insertions(+)
 create mode 100644 sound/soc/bcm/audioinjector-pi-sound.c

diff --git a/sound/soc/bcm/Kconfig b/sound/soc/bcm/Kconfig
index edf3671..717f131 100644
--- a/sound/soc/bcm/Kconfig
+++ b/sound/soc/bcm/Kconfig
@@ -8,6 +8,13 @@ config SND_BCM2835_SOC_I2S
 	  the BCM2835 I2S interface. You will also need
 	  to select the audio interfaces to support below.
 
+config SND_AUDIOINJECTOR_PI
+        tristate "Audioinjector-Pi Soundcard driver for Broadcom BCM2835 family"
+        depends on SND_BCM2835_SOC_I2S
+        select SND_SOC_WM8731
+        help
+          Say Y or M if you want to add support for Audioinjector-Pi Soundcard.
+
 config SND_SOC_CYGNUS
 	tristate "SoC platform audio for Broadcom Cygnus chips"
 	depends on ARCH_BCM_CYGNUS || COMPILE_TEST
diff --git a/sound/soc/bcm/Makefile b/sound/soc/bcm/Makefile
index fc739d0..6c0af84 100644
--- a/sound/soc/bcm/Makefile
+++ b/sound/soc/bcm/Makefile
@@ -8,3 +8,6 @@ snd-soc-cygnus-objs := cygnus-pcm.o cygnus-ssp.o
 
 obj-$(CONFIG_SND_SOC_CYGNUS) += snd-soc-cygnus.o
 
+# Audioinjector-Pi Soundcard Support
+snd-soc-audioinjector-pi-objs := audioinjector-pi-sound.o
+obj-$(CONFIG_SND_AUDIOINJECTOR_PI) += snd-soc-audioinjector-pi.o
diff --git a/sound/soc/bcm/audioinjector-pi-sound.c b/sound/soc/bcm/audioinjector-pi-sound.c
new file mode 100644
index 0000000..1f7768d
--- /dev/null
+++ b/sound/soc/bcm/audioinjector-pi-sound.c
@@ -0,0 +1,228 @@
+/*
+ * ASoC Driver for AudioInjector Pi soundcard
+ *
+ *  Created on: 13-May-2016
+ *      Author: flatmax@flatmax.org
+ *  Adopted by: Sergey Suloev <ssuloev@orpaltech.com>
+ *
+ * Copyright (C) 2016 Flatmax Pty. Ltd.
+ * Copyright (C) 2017-2018 ORPAL Technology, Inc.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * version 2 as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful, but
+ * WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * General Public License for more details.
+ */
+
+#include <linux/module.h>
+#include <linux/types.h>
+
+#include <sound/core.h>
+#include <sound/soc.h>
+#include <sound/pcm_params.h>
+#include <sound/control.h>
+
+#include "../codecs/wm8731.h"
+
+static const unsigned int bcm2835_i2s_rates_12000000[] = {
+	8000, 16000, 32000, 44100, 48000, 96000, 88200,
+};
+
+static struct snd_pcm_hw_constraint_list bcm2835_i2s_constraints_12000000 = {
+	.list	= bcm2835_i2s_rates_12000000,
+	.count	= ARRAY_SIZE(bcm2835_i2s_rates_12000000),
+};
+
+static int audioinjector_pi_soundcard_startup(struct snd_pcm_substream *substream)
+{
+	/* Setup constraints, because there is a 12 MHz XTAL on the board */
+	snd_pcm_hw_constraint_list(substream->runtime, 0,
+				   SNDRV_PCM_HW_PARAM_RATE,
+				   &bcm2835_i2s_constraints_12000000);
+	return 0;
+}
+
+static int audioinjector_pi_soundcard_hw_params(struct snd_pcm_substream *substream,
+						struct snd_pcm_hw_params *params)
+{
+	struct snd_soc_pcm_runtime *rtd = substream->private_data;
+	struct snd_soc_codec *codec = rtd->codec;
+	struct snd_soc_dai *codec_dai = rtd->codec_dai,
+			*cpu_dai = rtd->cpu_dai;
+	int ret;
+
+	switch (params_rate(params)){
+		case 8000:
+			ret = snd_soc_dai_set_bclk_ratio(cpu_dai, 1500);
+			break;
+		case 16000:
+			ret = snd_soc_dai_set_bclk_ratio(cpu_dai, 750);
+			break;
+		case 32000:
+			ret = snd_soc_dai_set_bclk_ratio(cpu_dai, 375);
+			break;
+		case 44100:
+			ret = snd_soc_dai_set_bclk_ratio(cpu_dai, 272);
+			break;
+		case 48000:
+			ret = snd_soc_dai_set_bclk_ratio(cpu_dai, 250);
+			break;
+		case 88200:
+			ret = snd_soc_dai_set_bclk_ratio(cpu_dai, 136);
+			break;
+		case 96000:
+			ret = snd_soc_dai_set_bclk_ratio(cpu_dai, 125);
+			break;
+		default:
+			ret = -EINVAL;
+			break;
+	}
+        if (ret < 0) {
+                dev_err(codec->dev, "Failed to set BCLK ratio: %d\n", ret);
+                return ret;
+        }
+
+	/* Set codec sysclk */
+	ret = snd_soc_dai_set_sysclk(codec_dai, WM8731_SYSCLK_XTAL,
+				     12000000, SND_SOC_CLOCK_IN);
+	if (ret) {
+		dev_err(codec->dev, "Failed to set WM8731 SYSCLK: %d\n", ret);
+		return ret;
+	}
+
+	return 0;
+}
+
+/* machine stream operations */
+static struct snd_soc_ops audioinjector_pi_soundcard_ops = {
+	.startup	= audioinjector_pi_soundcard_startup,
+	.hw_params	= audioinjector_pi_soundcard_hw_params,
+};
+
+static struct snd_soc_dai_link audioinjector_pi_soundcard_dai[] = {
+	{
+		.name		= "audioinjector-pi-sound",
+		.stream_name	= "audioinjector-pi-audio",
+		.platform_name  = "bcm2835-i2s.0",
+		.cpu_dai_name	= "bcm2835-i2s.0",
+		.codec_dai_name	= "wm8731-hifi",
+		.codec_name	= "wm8731.0-001a",
+		.ops		= &audioinjector_pi_soundcard_ops,
+		.dai_fmt	= SND_SOC_DAIFMT_CBM_CFM |
+				SND_SOC_DAIFMT_I2S |
+				SND_SOC_DAIFMT_NB_NF,
+	},
+};
+
+static const struct snd_soc_dapm_widget wm8731_dapm_widgets[] = {
+	SND_SOC_DAPM_HP("Headphone Jack", NULL),
+	SND_SOC_DAPM_SPK("Ext Spk", NULL),
+	SND_SOC_DAPM_LINE("Line In Jacks", NULL),
+	SND_SOC_DAPM_MIC("Microphone", NULL),
+};
+
+static const struct snd_soc_dapm_route audioinjector_audio_map[] = {
+	/* headphone connected to LHPOUT, RHPOUT */
+	{"Headphone Jack", NULL, "LHPOUT"},
+	{"Headphone Jack", NULL, "RHPOUT"},
+
+	/* speaker connected to LOUT, ROUT */
+	{"Ext Spk", NULL, "ROUT"},
+	{"Ext Spk", NULL, "LOUT"},
+
+	/* line inputs */
+	{"Line In Jacks", NULL, "Line Input"},
+
+	/* mic is connected to Mic Jack, with WM8731 Mic Bias */
+	{"Microphone", NULL, "Mic Bias"},
+};
+
+static struct snd_soc_card snd_soc_audioinjector = {
+	.name		= "audioinjector-pi-sound",
+	.dai_link	= audioinjector_pi_soundcard_dai,
+	.num_links	= ARRAY_SIZE(audioinjector_pi_soundcard_dai),
+
+	.dapm_widgets	= wm8731_dapm_widgets,
+	.num_dapm_widgets = ARRAY_SIZE(wm8731_dapm_widgets),
+	.dapm_routes	= audioinjector_audio_map,
+	.num_dapm_routes = ARRAY_SIZE(audioinjector_audio_map),
+};
+
+static int audioinjector_pi_soundcard_probe(struct platform_device *pdev)
+{
+	struct device *dev = &pdev->dev;
+	struct snd_soc_card *card = &snd_soc_audioinjector;
+	int ret;
+
+	card->dev = dev;
+
+	if (dev->of_node) {
+		struct snd_soc_dai_link *dai = &audioinjector_pi_soundcard_dai[0];
+		struct device_node *cpu_node = of_parse_phandle(dev->of_node,
+								"cpu-node", 0);
+		struct device_node *codec_node = of_parse_phandle(dev->of_node,
+								"codec-node", 0);
+
+		if (cpu_node) {
+			dai->cpu_dai_name = NULL;
+			dai->cpu_of_node = cpu_node;
+			dai->platform_name = NULL;
+			dai->platform_of_node = cpu_node;
+		} else
+			if (!dai->cpu_of_node) {
+				dev_err(dev,
+					"Property 'cpu-node' missing or invalid\n");
+				return -EINVAL;
+			}
+
+		if (codec_node) {
+			dai->codec_name = NULL;
+			dai->codec_of_node = codec_node;
+		} else
+			if (!dai->codec_of_node) {
+				dev_err(dev,
+					"Property 'codec-node' missing or invalid\n");
+				return -EINVAL;
+			}
+	}
+
+	ret = snd_soc_register_card(card);
+	if (ret && ret != -EPROBE_DEFER) {
+		dev_err(dev, "snd_soc_register_card failed (%d)\n", ret);
+	}
+
+	return ret;
+}
+
+static int audioinjector_pi_soundcard_remove(struct platform_device *pdev)
+{
+	struct snd_soc_card *card = platform_get_drvdata(pdev);
+
+	return snd_soc_unregister_card(card);
+}
+
+static const struct of_device_id audioinjector_pi_soundcard_of_match[] = {
+	{ .compatible = "flatmax,audioinjector-pi-sound", },
+	{},
+};
+MODULE_DEVICE_TABLE(of, audioinjector_pi_soundcard_of_match);
+
+static struct platform_driver audioinjector_pi_soundcard_driver = {
+	.probe  = audioinjector_pi_soundcard_probe,
+	.remove = audioinjector_pi_soundcard_remove,
+	.driver	= {
+		.name		= "audioinjector-pi-sound",
+		.of_match_table	= audioinjector_pi_soundcard_of_match,
+	},
+};
+module_platform_driver(audioinjector_pi_soundcard_driver);
+
+MODULE_AUTHOR("Matt Flax <flatmax@flatmax.org>");
+MODULE_AUTHOR("Sergey Suloev <ssuloev@orpaltech.com>");
+MODULE_DESCRIPTION("AudioInjector Pi soundcard");
+MODULE_LICENSE("GPL");
+MODULE_ALIAS("platform:audioinjector-pi-sound");
-- 
2.17.0

