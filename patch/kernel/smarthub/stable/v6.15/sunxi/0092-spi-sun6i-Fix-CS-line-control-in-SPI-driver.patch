From 3fc951e86bf98228c016440de3bb7e01708473d2 Mon Sep 17 00:00:00 2001
From: ssuloev <ssuloev@orpaltech.com>
Date: Sun, 22 Sep 2024 18:54:25 +0300
Subject: [PATCH] spi/sun6i: Fix CS-line control in SPI-driver

---
 drivers/spi/spi-sun6i.c | 167 ++++++++++++++++++++++++----------------
 1 file changed, 101 insertions(+), 66 deletions(-)

diff --git a/drivers/spi/spi-sun6i.c b/drivers/spi/spi-sun6i.c
index 5c26bf0..fca2910 100644
--- a/drivers/spi/spi-sun6i.c
+++ b/drivers/spi/spi-sun6i.c
@@ -7,6 +7,8 @@
  * Maxime Ripard <maxime.ripard@free-electrons.com>
  */
 
+#define DEBUG
+
 #include <linux/bitfield.h>
 #include <linux/clk.h>
 #include <linux/delay.h>
@@ -37,6 +39,7 @@
 #define SUN6I_TFR_CTL_CPHA			BIT(0)
 #define SUN6I_TFR_CTL_CPOL			BIT(1)
 #define SUN6I_TFR_CTL_SPOL			BIT(2)
+#define SUN6I_TFR_CTL_SSCTL			BIT(3)
 #define SUN6I_TFR_CTL_CS_MASK			0x30
 #define SUN6I_TFR_CTL_CS(cs)			(((cs) << 4) & SUN6I_TFR_CTL_CS_MASK)
 #define SUN6I_TFR_CTL_CS_MANUAL			BIT(6)
@@ -104,10 +107,7 @@ struct sun6i_spi {
 	struct clk		*hclk;
 	struct clk		*mclk;
 	struct reset_control	*rstc;
-
-	struct completion	done;
-	struct completion	dma_rx_done;
-
+	bool			dma_pending;
 	const u8		*tx_buf;
 	u8			*rx_buf;
 	int			len;
@@ -179,6 +179,59 @@ static inline void sun6i_spi_fill_fifo(struct sun6i_spi *sspi)
 	}
 }
 
+static int sun6i_spi_setup(struct spi_device *spi)
+{
+	struct sun6i_spi *sspi = spi_controller_get_devdata(spi->controller);
+	struct device_node *nc = dev_of_node(&spi->dev);
+	u32 reg;
+
+	reg = sun6i_spi_read(sspi, SUN6I_TFR_CTL_REG);
+
+	/*
+	 * Setup the transfer control register: Chip Select,
+	 * polarities, etc.
+	 */
+	if (spi->mode & SPI_CPOL)
+		reg |= SUN6I_TFR_CTL_CPOL;
+	else
+		reg &= ~SUN6I_TFR_CTL_CPOL;
+
+	if (spi->mode & SPI_CPHA)
+		reg |= SUN6I_TFR_CTL_CPHA;
+	else
+		reg &= ~SUN6I_TFR_CTL_CPHA;
+
+	if (spi->mode & SPI_LSB_FIRST)
+		reg |= SUN6I_TFR_CTL_FBS;
+	else
+		reg &= ~SUN6I_TFR_CTL_FBS;
+
+	/* Handle chip select "reverse" polarity */
+	if (spi->mode & SPI_CS_HIGH)
+		reg &= ~SUN6I_TFR_CTL_SPOL;
+	else
+		reg |= SUN6I_TFR_CTL_SPOL;
+
+	if (of_property_read_bool(nc, "spi-cs-auto")) {
+		/* Let hardware control over CS line */
+		reg &= ~SUN6I_TFR_CTL_CS_MANUAL;
+		dev_dbg(&sspi->host->dev, "Hardware control over CS line\n");
+	} else
+		/* We want to control CS line by software */
+		reg |= SUN6I_TFR_CTL_CS_MANUAL;
+
+	if (of_property_read_bool(nc, "spi-cs-change")) {
+		/* Negate CS line between bursts */
+		reg |= SUN6I_TFR_CTL_SSCTL;
+		dev_dbg(&sspi->host->dev, "Negate CS line between bursts\n");
+	} else
+		reg &= ~SUN6I_TFR_CTL_SSCTL;
+
+	sun6i_spi_write(sspi, SUN6I_TFR_CTL_REG, reg);
+
+	return 0;
+}
+
 static void sun6i_spi_set_cs(struct spi_device *spi, bool enable)
 {
 	struct sun6i_spi *sspi = spi_controller_get_devdata(spi->controller);
@@ -201,11 +254,20 @@ static size_t sun6i_spi_max_transfer_size(struct spi_device *spi)
 	return SUN6I_MAX_XFER_SIZE - 1;
 }
 
+static void sun6i_spi_complete_transfer(struct sun6i_spi *sspi)
+{
+	/* Notify framework of transfer complete */
+	spi_finalize_current_transfer(sspi->host);
+}
+
 static void sun6i_spi_dma_rx_cb(void *param)
 {
 	struct sun6i_spi *sspi = param;
 
-	complete(&sspi->dma_rx_done);
+	sun6i_spi_complete_transfer(sspi);
+
+	/* clear DMA pending flag */
+	sspi->dma_pending = false;
 }
 
 static int sun6i_spi_prepare_dma(struct sun6i_spi *sspi,
@@ -269,6 +331,9 @@ static int sun6i_spi_prepare_dma(struct sun6i_spi *sspi,
 		dma_async_issue_pending(host->dma_tx);
 	}
 
+	/* set DMA pending flag */
+	sspi->dma_pending = true;
+
 	return 0;
 }
 
@@ -278,8 +343,6 @@ static int sun6i_spi_transfer_one(struct spi_controller *host,
 {
 	struct sun6i_spi *sspi = spi_controller_get_devdata(host);
 	unsigned int div, div_cdr1, div_cdr2;
-	unsigned long time_left;
-	unsigned int start, end, tx_time;
 	unsigned int trig_level;
 	unsigned int tx_len = 0, rx_len = 0, nbits = 0;
 	bool use_dma;
@@ -289,8 +352,6 @@ static int sun6i_spi_transfer_one(struct spi_controller *host,
 	if (tfr->len > SUN6I_MAX_XFER_SIZE)
 		return -EINVAL;
 
-	reinit_completion(&sspi->done);
-	reinit_completion(&sspi->dma_rx_done);
 	sspi->tx_buf = tfr->tx_buf;
 	sspi->rx_buf = tfr->rx_buf;
 	sspi->len = tfr->len;
@@ -338,21 +399,6 @@ static int sun6i_spi_transfer_one(struct spi_controller *host,
 	 */
 	reg = sun6i_spi_read(sspi, SUN6I_TFR_CTL_REG);
 
-	if (spi->mode & SPI_CPOL)
-		reg |= SUN6I_TFR_CTL_CPOL;
-	else
-		reg &= ~SUN6I_TFR_CTL_CPOL;
-
-	if (spi->mode & SPI_CPHA)
-		reg |= SUN6I_TFR_CTL_CPHA;
-	else
-		reg &= ~SUN6I_TFR_CTL_CPHA;
-
-	if (spi->mode & SPI_LSB_FIRST)
-		reg |= SUN6I_TFR_CTL_FBS;
-	else
-		reg &= ~SUN6I_TFR_CTL_FBS;
-
 	/*
 	 * If it's a TX only transfer, we don't want to fill the RX
 	 * FIFO with bogus data
@@ -364,9 +410,6 @@ static int sun6i_spi_transfer_one(struct spi_controller *host,
 		reg |= SUN6I_TFR_CTL_DHB;
 	}
 
-	/* We want to control the chip select manually */
-	reg |= SUN6I_TFR_CTL_CS_MANUAL;
-
 	sun6i_spi_write(sspi, SUN6I_TFR_CTL_REG, reg);
 
 	if (sspi->cfg->has_clk_ctl) {
@@ -465,7 +508,7 @@ static int sun6i_spi_transfer_one(struct spi_controller *host,
 		ret = sun6i_spi_prepare_dma(sspi, tfr);
 		if (ret) {
 			dev_warn(&host->dev,
-				 "%s: prepare DMA failed, ret=%d",
+				 "%s: prepare DMA failed, ret=%d\n",
 				 dev_name(&spi->dev), ret);
 			return ret;
 		}
@@ -475,6 +518,7 @@ static int sun6i_spi_transfer_one(struct spi_controller *host,
 	reg = SUN6I_INT_CTL_TC;
 
 	if (!use_dma) {
+
 		if (rx_len > sspi->cfg->fifo_depth)
 			reg |= SUN6I_INT_CTL_RF_RDY;
 		if (tx_len > sspi->cfg->fifo_depth)
@@ -487,46 +531,37 @@ static int sun6i_spi_transfer_one(struct spi_controller *host,
 	reg = sun6i_spi_read(sspi, SUN6I_TFR_CTL_REG);
 	sun6i_spi_write(sspi, SUN6I_TFR_CTL_REG, reg | SUN6I_TFR_CTL_XCH);
 
-	tx_time = spi_controller_xfer_timeout(host, tfr);
-	start = jiffies;
-	time_left = wait_for_completion_timeout(&sspi->done,
-						msecs_to_jiffies(tx_time));
-
-	if (!use_dma) {
-		sun6i_spi_drain_fifo(sspi);
-	} else {
-		if (time_left && rx_len) {
-			/*
-			 * Even though RX on the peripheral side has finished
-			 * RX DMA might still be in flight
-			 */
-			time_left = wait_for_completion_timeout(&sspi->dma_rx_done,
-								time_left);
-			if (!time_left)
-				dev_warn(&host->dev, "RX DMA timeout\n");
-		}
-	}
+	/* Let framework wait for completion */
+	return 1;
+}
 
-	end = jiffies;
-	if (!time_left) {
-		dev_warn(&host->dev,
-			 "%s: timeout transferring %u bytes@%iHz for %i(%i)ms",
-			 dev_name(&spi->dev), tfr->len, tfr->speed_hz,
-			 jiffies_to_msecs(end - start), tx_time);
-		ret = -ETIMEDOUT;
-	}
+static void sun6i_spi_handle_err(struct spi_controller *host,
+				 struct spi_message *msg)
+{
+	struct sun6i_spi *sspi = spi_controller_get_devdata(host);
 
-	sun6i_spi_write(sspi, SUN6I_INT_CTL_REG, 0);
+	/* if we have an active DMA, then terminate */
+	if (sspi->dma_pending) {
+		dev_dbg(&host->dev, "DMA channels teardown\n");
 
-	if (ret && use_dma) {
-		dmaengine_terminate_sync(host->dma_rx);
 		dmaengine_terminate_sync(host->dma_tx);
+		dmaengine_terminate_sync(host->dma_rx);
+
+		/* clear DMA pending flag */
+		sspi->dma_pending = false;
 	}
 
-	return ret;
+	/* and reset */
+	sun6i_spi_write(sspi, SUN6I_FIFO_CTL_REG,
+			SUN6I_FIFO_CTL_RF_RST | SUN6I_FIFO_CTL_TF_RST);
+	/* clear pending interrupts */
+	sun6i_spi_write(sspi, SUN6I_INT_STA_REG, ~0);
+
+	/* disable interrupts */
+	sun6i_spi_write(sspi, SUN6I_INT_CTL_REG, 0);
 }
 
-static irqreturn_t sun6i_spi_handler(int irq, void *dev_id)
+static irqreturn_t sun6i_spi_irq_handler(int irq, void *dev_id)
 {
 	struct sun6i_spi *sspi = dev_id;
 	u32 status = sun6i_spi_read(sspi, SUN6I_INT_STA_REG);
@@ -534,7 +569,7 @@ static irqreturn_t sun6i_spi_handler(int irq, void *dev_id)
 	/* Transfer complete */
 	if (status & SUN6I_INT_CTL_TC) {
 		sun6i_spi_write(sspi, SUN6I_INT_STA_REG, SUN6I_INT_CTL_TC);
-		complete(&sspi->done);
+		sun6i_spi_complete_transfer(sspi);
 		return IRQ_HANDLED;
 	}
 
@@ -654,7 +689,7 @@ static int sun6i_spi_probe(struct platform_device *pdev)
 		goto err_free_host;
 	}
 
-	ret = devm_request_irq(&pdev->dev, irq, sun6i_spi_handler,
+	ret = devm_request_irq(&pdev->dev, irq, sun6i_spi_irq_handler,
 			       0, "sun6i-spi", sspi);
 	if (ret) {
 		dev_err(&pdev->dev, "Cannot request IRQ\n");
@@ -667,9 +702,11 @@ static int sun6i_spi_probe(struct platform_device *pdev)
 	host->max_speed_hz = 100 * 1000 * 1000;
 	host->min_speed_hz = 3 * 1000;
 	host->use_gpio_descriptors = true;
+	host->handle_err = sun6i_spi_handle_err;
 	host->set_cs = sun6i_spi_set_cs;
+	host->setup = sun6i_spi_setup;
 	host->transfer_one = sun6i_spi_transfer_one;
-	host->num_chipselect = 4;
+	host->num_chipselect = 2;
 	host->mode_bits = SPI_CPOL | SPI_CPHA | SPI_CS_HIGH | SPI_LSB_FIRST |
 			  sspi->cfg->mode_bits;
 	host->bits_per_word_mask = SPI_BPW_MASK(8);
@@ -691,9 +728,6 @@ static int sun6i_spi_probe(struct platform_device *pdev)
 		goto err_free_host;
 	}
 
-	init_completion(&sspi->done);
-	init_completion(&sspi->dma_rx_done);
-
 	sspi->rstc = devm_reset_control_get_exclusive(&pdev->dev, NULL);
 	if (IS_ERR(sspi->rstc)) {
 		dev_err(&pdev->dev, "Couldn't get reset controller\n");
@@ -821,5 +855,6 @@ module_platform_driver(sun6i_spi_driver);
 
 MODULE_AUTHOR("Pan Nan <pannan@allwinnertech.com>");
 MODULE_AUTHOR("Maxime Ripard <maxime.ripard@free-electrons.com>");
+MODULE_AUTHOR("Sergey Suloev <ssuloev@orpaltech.ru>");
 MODULE_DESCRIPTION("Allwinner A31 SPI controller driver");
 MODULE_LICENSE("GPL");
-- 
2.34.1

