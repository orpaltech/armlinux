From 5c75ecd426ccc9e7f558ef4c35bf45979af6348f Mon Sep 17 00:00:00 2001
From: Sergey Suloev <ssuloev@orpaltech.com>
Date: Thu, 30 Sep 2021 21:21:19 +0300
Subject: [PATCH] pwm/sun4i: Add support for the Allwinner A31 PWM

---
 arch/arm/boot/dts/sun6i-a31.dtsi |  40 +++
 drivers/pwm/Kconfig              |   2 +-
 drivers/pwm/pwm-sun4i.c          | 518 ++++++++++++++++++++++---------
 3 files changed, 420 insertions(+), 140 deletions(-)

diff --git a/arch/arm/boot/dts/sun6i-a31.dtsi b/arch/arm/boot/dts/sun6i-a31.dtsi
index a31f907..6561f88 100644
--- a/arch/arm/boot/dts/sun6i-a31.dtsi
+++ b/arch/arm/boot/dts/sun6i-a31.dtsi
@@ -731,6 +731,38 @@
 				bias-pull-up;
 			};
 
+			pwm0_pin: pwm0-pin {
+				pins = "PH13";
+				function = "pwm0";
+			};
+
+			pwm1_pin_p: pwm1-pin-p {
+				pins = "PH9";
+				function = "pwm1";
+			};
+			pwm1_pin_n: pwm1-pin-n {
+				pins = "PH10";
+				function = "pwm1";
+			};
+
+			pwm2_pin_p: pwm2-pin-p {
+				pins = "PH11";
+				function = "pwm2";
+			};
+			pwm2_pin_n: pwm2-pin-n {
+				pins = "PH12";
+				function = "pwm2";
+			};
+
+			pwm3_pin_p: pwm3-pin-p {
+				pins = "PA19";
+				function = "pwm3";
+			};
+			pwm3_pin_n: pwm3-pin-n {
+				pins = "PA20";
+				function = "pwm3";
+			};
+
 			spdif_tx_pin: spdif-tx-pin {
 				pins = "PH28";
 				function = "spdif";
@@ -808,6 +840,14 @@
 			status = "disabled";
 		};
 
+		pwm: pwm@1c21400 {
+			compatible = "allwinner,sun6i-a31-pwm";
+			reg = <0x01c21400 0x400>;
+			clocks = <&osc24M>;
+			#pwm-cells = <3>;
+			status = "disabled";
+		};
+
 		rtp: rtp@1c25000 {
 			compatible = "allwinner,sun6i-a31-ts";
 			reg = <0x01c25000 0x100>;
diff --git a/drivers/pwm/Kconfig b/drivers/pwm/Kconfig
index aa29841..fd496ca 100644
--- a/drivers/pwm/Kconfig
+++ b/drivers/pwm/Kconfig
@@ -563,7 +563,7 @@ config PWM_STMPE
 config PWM_SUN4I
 	tristate "Allwinner PWM support"
 	depends on ARCH_SUNXI || COMPILE_TEST
-	depends on HAS_IOMEM && COMMON_CLK
+	depends on REGMAP_MMIO && COMMON_CLK
 	help
 	  Generic PWM framework driver for Allwinner SoCs.
 
diff --git a/drivers/pwm/pwm-sun4i.c b/drivers/pwm/pwm-sun4i.c
index 91ca676..4f2ef93 100644
--- a/drivers/pwm/pwm-sun4i.c
+++ b/drivers/pwm/pwm-sun4i.c
@@ -9,54 +9,65 @@
  *   and the currently running period is not guaranteed to be completed
  */
 
+#define DEBUG
+
 #include <linux/bitops.h>
 #include <linux/clk.h>
 #include <linux/delay.h>
 #include <linux/err.h>
-#include <linux/io.h>
 #include <linux/jiffies.h>
 #include <linux/module.h>
 #include <linux/of.h>
 #include <linux/of_device.h>
 #include <linux/platform_device.h>
 #include <linux/pwm.h>
+#include <linux/regmap.h>
 #include <linux/reset.h>
 #include <linux/slab.h>
 #include <linux/spinlock.h>
 #include <linux/time.h>
 
-#define PWM_CTRL_REG		0x0
-
-#define PWM_CH_PRD_BASE		0x4
-#define PWM_CH_PRD_OFFSET	0x4
-#define PWM_CH_PRD(ch)		(PWM_CH_PRD_BASE + PWM_CH_PRD_OFFSET * (ch))
+#define PWM_CH_REG(base, off, ch)	((base) + (off) * (ch))
 
-#define PWMCH_OFFSET		15
-#define PWM_PRESCAL_MASK	GENMASK(3, 0)
-#define PWM_PRESCAL_OFF		0
-#define PWM_EN			BIT(4)
-#define PWM_ACT_STATE		BIT(5)
-#define PWM_CLK_GATING		BIT(6)
-#define PWM_MODE		BIT(7)
-#define PWM_PULSE		BIT(8)
-#define PWM_BYPASS		BIT(9)
+#define SUN6I_PWM_CTRL_BASE		0x0
+#define SUN6I_PWM_PRD_BASE		0x4
+#define SUN6I_PWM_REG_OFFSET		0x10
+#define SUN6I_PWM_CH_CTRL(ch)			PWM_CH_REG(SUN6I_PWM_CTRL_BASE, SUN6I_PWM_REG_OFFSET, ch)
+#define SUN6I_PWM_CH_PRD(ch)			PWM_CH_REG(SUN6I_PWM_PRD_BASE, SUN6I_PWM_REG_OFFSET, ch)
 
-#define PWM_RDY_BASE		28
-#define PWM_RDY_OFFSET		1
-#define PWM_RDY(ch)		BIT(PWM_RDY_BASE + PWM_RDY_OFFSET * (ch))
+#define SUN4I_PWM_CTRL			0x0
+#define SUN4I_PWM_PRD_BASE		0x4
+#define SUN4I_PWM_PRD_OFFSET		0x4
+#define SUN4I_PWM_CH_PRD(ch)			PWM_CH_REG(SUN4I_PWM_PRD_BASE, SUN4I_PWM_PRD_OFFSET, ch)
 
-#define PWM_PRD(prd)		(((prd) - 1) << 16)
-#define PWM_PRD_MASK		GENMASK(15, 0)
+#define PWM_PRESCAL_MASK		GENMASK(3, 0)
+#define PWM_PRD_MASK			GENMASK(15, 0)
 
-#define PWM_DTY_MASK		GENMASK(15, 0)
+#define SUN4I_MAX_PWM_CHANNELS		2
+#define SUN6I_MAX_PWM_CHANNELS		4
+#define MAX_PWM_CHANNELS		SUN6I_MAX_PWM_CHANNELS
 
-#define PWM_REG_PRD(reg)	((((reg) >> 16) & PWM_PRD_MASK) + 1)
-#define PWM_REG_DTY(reg)	((reg) & PWM_DTY_MASK)
-#define PWM_REG_PRESCAL(reg, chan)	(((reg) >> ((chan) * PWMCH_OFFSET)) & PWM_PRESCAL_MASK)
 
-#define BIT_CH(bit, chan)	((bit) << ((chan) * PWMCH_OFFSET))
+/*
+ * regmap fields
+ */
+enum {
+	/* Used bit fields in control register */
+	FIELD_PRESCAL = 0,
+	FIELD_POLARITY,
+	FIELD_CLK_GATING,
+	FIELD_PERIOD,
+	FIELD_DUTY,
+	FIELD_PERIOD_DUTY,
+	FIELD_ENABLED,
+	FIELD_READY,
+	FIELD_BYPASS,
+
+	/* Keep last */
+	NUM_FIELDS,
+};
 
-static const u32 prescaler_table[] = {
+static const u32 sun4i_prescaler_table[] = {
 	120,
 	180,
 	240,
@@ -75,10 +86,33 @@ static const u32 prescaler_table[] = {
 	0, /* Actually 1 but tested separately */
 };
 
+static const u32 sun6i_prescaler_table[] = {
+	1,
+	2,
+	4,
+	8,
+	16,
+	32,
+	64,
+	0,
+	0,
+	0,
+	0,
+	0,
+	0,
+	0,
+	0,
+	0,
+};
+
+
 struct sun4i_pwm_data {
 	bool has_prescaler_bypass;
 	bool has_direct_mod_clk_output;
+	bool has_rdy_flag;
 	unsigned int npwm;
+	const u32 *prescaler_table;
+	const struct reg_field (*reg_fields)[MAX_PWM_CHANNELS][NUM_FIELDS];
 };
 
 struct sun4i_pwm_chip {
@@ -86,7 +120,8 @@ struct sun4i_pwm_chip {
 	struct clk *bus_clk;
 	struct clk *clk;
 	struct reset_control *rst;
-	void __iomem *base;
+	struct regmap *regmap;
+	struct regmap_field *fields[MAX_PWM_CHANNELS][NUM_FIELDS];
 	spinlock_t ctrl_lock;
 	const struct sun4i_pwm_data *data;
 	unsigned long next_period[2];
@@ -97,16 +132,44 @@ static inline struct sun4i_pwm_chip *to_sun4i_pwm_chip(struct pwm_chip *chip)
 	return container_of(chip, struct sun4i_pwm_chip, chip);
 }
 
-static inline u32 sun4i_pwm_readl(struct sun4i_pwm_chip *chip,
-				  unsigned long offset)
+static int sun4i_pwm_get_field(struct sun4i_pwm_chip *sun4i_pwm,
+				unsigned int ch, unsigned int field,
+				u32 *pval)
 {
-	return readl(chip->base + offset);
+	struct regmap_field **chan_fields;
+	int ret;
+
+	if (ch >= sun4i_pwm->data->npwm || field >= NUM_FIELDS)
+		return -EINVAL;
+
+	chan_fields = sun4i_pwm->fields[ch];
+
+	ret = regmap_field_read(chan_fields[field], pval);
+	if (ret)
+		dev_err(sun4i_pwm->chip.dev,
+			"failed to read field: chan=%d, field=%d\n",
+			ch, field);
+	return ret;
 }
 
-static inline void sun4i_pwm_writel(struct sun4i_pwm_chip *chip,
-				    u32 val, unsigned long offset)
+static int sun4i_pwm_set_field(struct sun4i_pwm_chip *sun4i_pwm,
+				unsigned int ch, unsigned int field,
+				u32 val)
 {
-	writel(val, chip->base + offset);
+	struct regmap_field **chan_fields;
+	int ret;
+
+	if (ch >= sun4i_pwm->data->npwm || field >= NUM_FIELDS)
+		return -EINVAL;
+
+	chan_fields = sun4i_pwm->fields[ch];
+
+	ret = regmap_field_write(chan_fields[field], val);
+	if (ret)
+		dev_err(sun4i_pwm->chip.dev,
+			"failed to write field: chan=%d, field=%d\n",
+			ch, field);
+	return ret;
 }
 
 static void sun4i_pwm_get_state(struct pwm_chip *chip,
@@ -114,54 +177,71 @@ static void sun4i_pwm_get_state(struct pwm_chip *chip,
 				struct pwm_state *state)
 {
 	struct sun4i_pwm_chip *sun4i_pwm = to_sun4i_pwm_chip(chip);
+	const u32 *prescaler_table = sun4i_pwm->data->prescaler_table;
 	u64 clk_rate, tmp;
 	u32 val;
+	int ch = pwm->hwpwm;
+	int ret;
 	unsigned int prescaler;
 
 	clk_rate = clk_get_rate(sun4i_pwm->clk);
 
-	val = sun4i_pwm_readl(sun4i_pwm, PWM_CTRL_REG);
-
 	/*
 	 * PWM chapter in H6 manual has a diagram which explains that if bypass
 	 * bit is set, no other setting has any meaning. Even more, experiment
 	 * proved that also enable bit is ignored in this case.
 	 */
-	if ((val & BIT_CH(PWM_BYPASS, pwm->hwpwm)) &&
-	    sun4i_pwm->data->has_direct_mod_clk_output) {
-		state->period = DIV_ROUND_UP_ULL(NSEC_PER_SEC, clk_rate);
-		state->duty_cycle = DIV_ROUND_UP_ULL(state->period, 2);
-		state->polarity = PWM_POLARITY_NORMAL;
-		state->enabled = true;
+	if (sun4i_pwm->data->has_direct_mod_clk_output) {
+		ret = sun4i_pwm_get_field(sun4i_pwm, ch, FIELD_BYPASS, &val);
+		if (!ret && val) {
+			state->period = DIV_ROUND_UP_ULL(NSEC_PER_SEC, clk_rate);
+			state->duty_cycle = DIV_ROUND_UP_ULL(state->period, 2);
+			state->polarity = PWM_POLARITY_NORMAL;
+			state->enabled = true;
+		}
 		return;
 	}
 
-	if ((PWM_REG_PRESCAL(val, pwm->hwpwm) == PWM_PRESCAL_MASK) &&
-	    sun4i_pwm->data->has_prescaler_bypass)
+	ret = sun4i_pwm_get_field(sun4i_pwm, ch, FIELD_PRESCAL, &val);
+	if (ret < 0)
+		return;
+	if (sun4i_pwm->data->has_prescaler_bypass
+		&& (val == PWM_PRESCAL_MASK))
 		prescaler = 1;
 	else
-		prescaler = prescaler_table[PWM_REG_PRESCAL(val, pwm->hwpwm)];
+		prescaler = prescaler_table[val];
 
 	if (prescaler == 0)
 		return;
 
-	if (val & BIT_CH(PWM_ACT_STATE, pwm->hwpwm))
-		state->polarity = PWM_POLARITY_NORMAL;
-	else
-		state->polarity = PWM_POLARITY_INVERSED;
+	ret = sun4i_pwm_get_field(sun4i_pwm, ch, FIELD_POLARITY, &val);
+	if (ret < 0)
+		return;
+	state->polarity = (val ? PWM_POLARITY_NORMAL : PWM_POLARITY_INVERSED);
 
-	if ((val & BIT_CH(PWM_CLK_GATING | PWM_EN, pwm->hwpwm)) ==
-	    BIT_CH(PWM_CLK_GATING | PWM_EN, pwm->hwpwm))
-		state->enabled = true;
-	else
-		state->enabled = false;
+	/* Read enabled state */
+	ret = sun4i_pwm_get_field(sun4i_pwm, ch, FIELD_ENABLED, &val);
+	if (ret < 0)
+		return;
+	if (val) {
+		ret = sun4i_pwm_get_field(sun4i_pwm, ch, FIELD_CLK_GATING, &val);
+		if (ret < 0)
+			return;
+	}
+	state->enabled = val ? true : false;
 
-	val = sun4i_pwm_readl(sun4i_pwm, PWM_CH_PRD(pwm->hwpwm));
+	ret = sun4i_pwm_get_field(sun4i_pwm, ch, FIELD_DUTY, &val);
+	if (ret < 0)
+		return;
 
-	tmp = (u64)prescaler * NSEC_PER_SEC * PWM_REG_DTY(val);
+	tmp = (u64)prescaler * NSEC_PER_SEC * val;
 	state->duty_cycle = DIV_ROUND_CLOSEST_ULL(tmp, clk_rate);
 
-	tmp = (u64)prescaler * NSEC_PER_SEC * PWM_REG_PRD(val);
+	ret = sun4i_pwm_get_field(sun4i_pwm, ch, FIELD_PERIOD, &val);
+	if (ret < 0)
+		return;
+
+	tmp = (u64)prescaler * NSEC_PER_SEC * val;
 	state->period = DIV_ROUND_CLOSEST_ULL(tmp, clk_rate);
 }
 
@@ -170,6 +250,7 @@ static int sun4i_pwm_calculate(struct sun4i_pwm_chip *sun4i_pwm,
 			       u32 *dty, u32 *prd, unsigned int *prsclr,
 			       bool *bypass)
 {
+	const u32 *prescaler_table = sun4i_pwm->data->prescaler_table;
 	u64 clk_rate, div = 0;
 	unsigned int prescaler = 0;
 
@@ -233,7 +314,8 @@ static int sun4i_pwm_apply(struct pwm_chip *chip, struct pwm_device *pwm,
 {
 	struct sun4i_pwm_chip *sun4i_pwm = to_sun4i_pwm_chip(chip);
 	struct pwm_state cstate;
-	u32 ctrl, duty = 0, period = 0, val;
+	u32 duty = 0, period = 0, val;
+	int ch = pwm->hwpwm;
 	int ret;
 	unsigned int delay_us, prescaler = 0;
 	unsigned long now;
@@ -259,55 +341,80 @@ static int sun4i_pwm_apply(struct pwm_chip *chip, struct pwm_device *pwm,
 	}
 
 	spin_lock(&sun4i_pwm->ctrl_lock);
-	ctrl = sun4i_pwm_readl(sun4i_pwm, PWM_CTRL_REG);
+	if (sun4i_pwm->data->has_rdy_flag) {
+		ret = sun4i_pwm_get_field(sun4i_pwm, ch, FIELD_READY, &val);
+		if (ret)
+			goto unlock;
+		if (val) {
+			ret = -EBUSY;
+			goto unlock;
+		}
+	}
+
 
 	if (sun4i_pwm->data->has_direct_mod_clk_output) {
+		ret = sun4i_pwm_set_field(sun4i_pwm, ch, FIELD_BYPASS, bypass);
+		if (ret)
+			goto unlock;
 		if (bypass) {
-			ctrl |= BIT_CH(PWM_BYPASS, pwm->hwpwm);
 			/* We can skip other parameter */
-			sun4i_pwm_writel(sun4i_pwm, ctrl, PWM_CTRL_REG);
 			spin_unlock(&sun4i_pwm->ctrl_lock);
 			return 0;
 		}
-
-		ctrl &= ~BIT_CH(PWM_BYPASS, pwm->hwpwm);
 	}
 
-	if (PWM_REG_PRESCAL(ctrl, pwm->hwpwm) != prescaler) {
+	ret = sun4i_pwm_get_field(sun4i_pwm, ch, FIELD_PRESCAL, &val);
+	if (ret)
+		goto unlock;
+	if (val != prescaler) {
 		/* Prescaler changed, the clock has to be gated */
-		ctrl &= ~BIT_CH(PWM_CLK_GATING, pwm->hwpwm);
-		sun4i_pwm_writel(sun4i_pwm, ctrl, PWM_CTRL_REG);
-
-		ctrl &= ~BIT_CH(PWM_PRESCAL_MASK, pwm->hwpwm);
-		ctrl |= BIT_CH(prescaler, pwm->hwpwm);
+		ret = sun4i_pwm_set_field(sun4i_pwm, ch, FIELD_CLK_GATING, 0);
+		if (ret)
+			goto unlock;
+		ret = sun4i_pwm_set_field(sun4i_pwm, ch, FIELD_PRESCAL,
+					prescaler);
+		if (ret)
+			goto unlock;
 	}
 
-	val = (duty & PWM_DTY_MASK) | PWM_PRD(period);
-	sun4i_pwm_writel(sun4i_pwm, val, PWM_CH_PRD(pwm->hwpwm));
-	sun4i_pwm->next_period[pwm->hwpwm] = jiffies +
+	/*val = (duty & PWM_DTY_MASK) | PWM_PRD(prd);
+	ret = sun4i_pwm_set_field(sun4i_pwm, ch, FIELD_PERIOD_DUTY, period);
+	if (ret)
+		goto unlock;*/
+	ret = sun4i_pwm_set_field(sun4i_pwm, ch, FIELD_PERIOD, (period - 1));
+	if (ret)
+		goto unlock;
+	ret = sun4i_pwm_set_field(sun4i_pwm, ch, FIELD_DUTY, duty);
+	if (ret)
+		goto unlock;
+
+	sun4i_pwm->next_period[ch] = jiffies +
 		nsecs_to_jiffies(cstate.period + 1000);
 
-	if (state->polarity != PWM_POLARITY_NORMAL)
-		ctrl &= ~BIT_CH(PWM_ACT_STATE, pwm->hwpwm);
-	else
-		ctrl |= BIT_CH(PWM_ACT_STATE, pwm->hwpwm);
-
-	ctrl |= BIT_CH(PWM_CLK_GATING, pwm->hwpwm);
+	ret = sun4i_pwm_set_field(sun4i_pwm, ch, FIELD_POLARITY,
+				(state->polarity == PWM_POLARITY_NORMAL));
+	if (ret)
+		goto unlock;
 
-	if (state->enabled)
-		ctrl |= BIT_CH(PWM_EN, pwm->hwpwm);
-
-	sun4i_pwm_writel(sun4i_pwm, ctrl, PWM_CTRL_REG);
+	if (state->enabled) {
+		ret = sun4i_pwm_set_field(sun4i_pwm, ch, FIELD_CLK_GATING, 1);
+		if (ret)
+			goto unlock;
+		ret = sun4i_pwm_set_field(sun4i_pwm, ch, FIELD_ENABLED, 1);
+	}
 
+unlock:
 	spin_unlock(&sun4i_pwm->ctrl_lock);
+	if (ret)
+		return ret;
 
 	if (state->enabled)
 		return 0;
 
 	/* We need a full period to elapse before disabling the channel. */
 	now = jiffies;
-	if (time_before(now, sun4i_pwm->next_period[pwm->hwpwm])) {
-		delay_us = jiffies_to_usecs(sun4i_pwm->next_period[pwm->hwpwm] -
+	if (time_before(now, sun4i_pwm->next_period[ch])) {
+		delay_us = jiffies_to_usecs(sun4i_pwm->next_period[ch] -
 					   now);
 		if ((delay_us / 500) > MAX_UDELAY_MS)
 			msleep(delay_us / 1000 + 1);
@@ -316,15 +423,16 @@ static int sun4i_pwm_apply(struct pwm_chip *chip, struct pwm_device *pwm,
 	}
 
 	spin_lock(&sun4i_pwm->ctrl_lock);
-	ctrl = sun4i_pwm_readl(sun4i_pwm, PWM_CTRL_REG);
-	ctrl &= ~BIT_CH(PWM_CLK_GATING, pwm->hwpwm);
-	ctrl &= ~BIT_CH(PWM_EN, pwm->hwpwm);
-	sun4i_pwm_writel(sun4i_pwm, ctrl, PWM_CTRL_REG);
+	ret = sun4i_pwm_set_field(sun4i_pwm, ch, FIELD_CLK_GATING, 0);
+	if (ret)
+		goto cleanup;
+	ret = sun4i_pwm_set_field(sun4i_pwm, ch, FIELD_ENABLED, 0);
+cleanup:
 	spin_unlock(&sun4i_pwm->ctrl_lock);
 
 	clk_disable_unprepare(sun4i_pwm->clk);
 
-	return 0;
+	return ret;
 }
 
 static const struct pwm_ops sun4i_pwm_ops = {
@@ -333,65 +441,110 @@ static const struct pwm_ops sun4i_pwm_ops = {
 	.owner = THIS_MODULE,
 };
 
-static const struct sun4i_pwm_data sun4i_pwm_dual_nobypass = {
-	.has_prescaler_bypass = false,
-	.npwm = 2,
+static const struct regmap_config sun4i_pwm_regmap_config = {
+	.reg_bits = 32,
+	.val_bits = 32,
+	.reg_stride = 4,
 };
 
-static const struct sun4i_pwm_data sun4i_pwm_dual_bypass = {
-	.has_prescaler_bypass = true,
-	.npwm = 2,
-};
-
-static const struct sun4i_pwm_data sun4i_pwm_single_bypass = {
-	.has_prescaler_bypass = true,
-	.npwm = 1,
-};
-
-static const struct sun4i_pwm_data sun50i_a64_pwm_data = {
-	.has_prescaler_bypass = true,
-	.has_direct_mod_clk_output = true,
-	.npwm = 1,
-};
-
-static const struct sun4i_pwm_data sun50i_h6_pwm_data = {
-	.has_prescaler_bypass = true,
-	.has_direct_mod_clk_output = true,
-	.npwm = 2,
+static const struct reg_field
+sun4i_pwm_regfields[MAX_PWM_CHANNELS][NUM_FIELDS] = {
+	{
+		[FIELD_PRESCAL]	    = REG_FIELD(SUN4I_PWM_CTRL,       0,     3),
+		[FIELD_POLARITY]    = REG_FIELD(SUN4I_PWM_CTRL,       5,     5),
+		[FIELD_CLK_GATING]  = REG_FIELD(SUN4I_PWM_CTRL,       6,     6),
+		[FIELD_PERIOD]	    = REG_FIELD(SUN4I_PWM_CH_PRD(0), 16,    31),
+		[FIELD_DUTY]	    = REG_FIELD(SUN4I_PWM_CH_PRD(0),  0,    15),
+		/*[FIELD_PERIOD_DUTY] = REG_FIELD(SUN4I_PWM_CH_PRD(0),  0,    31),*/
+		[FIELD_ENABLED]	    = REG_FIELD(SUN4I_PWM_CTRL,       4,     4),
+		[FIELD_READY]	    = REG_FIELD(SUN4I_PWM_CTRL,      28,    28),
+		[FIELD_BYPASS]	    = REG_FIELD(SUN4I_PWM_CTRL,       9,     9),
+	},
+	{
+		[FIELD_PRESCAL]	    = REG_FIELD(SUN4I_PWM_CTRL,      15,    18),
+		[FIELD_POLARITY]    = REG_FIELD(SUN4I_PWM_CTRL,      20,    20),
+		[FIELD_CLK_GATING]  = REG_FIELD(SUN4I_PWM_CTRL,      21,    21),
+		[FIELD_PERIOD]	    = REG_FIELD(SUN4I_PWM_CH_PRD(1), 16,    31),
+		[FIELD_DUTY]	    = REG_FIELD(SUN4I_PWM_CH_PRD(1),  0,    15),
+		/*[FIELD_PERIOD_DUTY] = REG_FIELD(SUN4I_PWM_CH_PRD(1),  0,    31),*/
+		[FIELD_ENABLED]	    = REG_FIELD(SUN4I_PWM_CTRL,      19,    19),
+		[FIELD_READY]	    = REG_FIELD(SUN4I_PWM_CTRL,      29,    29),
+		[FIELD_BYPASS]	    = REG_FIELD(SUN4I_PWM_CTRL,      24,    24),
+	},
 };
 
-static const struct of_device_id sun4i_pwm_dt_ids[] = {
+static const struct reg_field
+sun6i_pwm_regfields[MAX_PWM_CHANNELS][NUM_FIELDS] = {
 	{
-		.compatible = "allwinner,sun4i-a10-pwm",
-		.data = &sun4i_pwm_dual_nobypass,
-	}, {
-		.compatible = "allwinner,sun5i-a10s-pwm",
-		.data = &sun4i_pwm_dual_bypass,
-	}, {
-		.compatible = "allwinner,sun5i-a13-pwm",
-		.data = &sun4i_pwm_single_bypass,
-	}, {
-		.compatible = "allwinner,sun7i-a20-pwm",
-		.data = &sun4i_pwm_dual_bypass,
-	}, {
-		.compatible = "allwinner,sun8i-h3-pwm",
-		.data = &sun4i_pwm_single_bypass,
-	}, {
-		.compatible = "allwinner,sun50i-a64-pwm",
-		.data = &sun50i_a64_pwm_data,
-	}, {
-		.compatible = "allwinner,sun50i-h6-pwm",
-		.data = &sun50i_h6_pwm_data,
-	}, {
-		/* sentinel */
+		[FIELD_PRESCAL]	    = REG_FIELD(SUN6I_PWM_CH_CTRL(0),  0,   3),
+		[FIELD_POLARITY]    = REG_FIELD(SUN6I_PWM_CH_CTRL(0),  5,   5),
+		[FIELD_CLK_GATING]  = REG_FIELD(SUN6I_PWM_CH_CTRL(0),  6,   6),
+		[FIELD_PERIOD]	    = REG_FIELD(SUN6I_PWM_CH_PRD(0),  16,  31),
+		[FIELD_DUTY]	    = REG_FIELD(SUN6I_PWM_CH_PRD(0),   0,  15),
+		/*[FIELD_PERIOD_DUTY] = REG_FIELD(SUN6I_PWM_CH_PRD(0),   0,  31),*/
+		[FIELD_ENABLED]	    = REG_FIELD(SUN6I_PWM_CH_CTRL(0),  4,   4),
+		[FIELD_READY]	    = REG_FIELD(SUN6I_PWM_CH_CTRL(0), 28,  28),
+	},
+	{
+		[FIELD_PRESCAL]	    = REG_FIELD(SUN6I_PWM_CH_CTRL(1),  0,   3),
+		[FIELD_POLARITY]    = REG_FIELD(SUN6I_PWM_CH_CTRL(1),  5,   5),
+		[FIELD_CLK_GATING]  = REG_FIELD(SUN6I_PWM_CH_CTRL(1),  6,   6),
+		[FIELD_PERIOD]	    = REG_FIELD(SUN6I_PWM_CH_PRD(1),  16,  31),
+		[FIELD_DUTY]	    = REG_FIELD(SUN6I_PWM_CH_PRD(1),   0,  15),
+		/*[FIELD_PERIOD_DUTY] = REG_FIELD(SUN6I_PWM_CH_PRD(1),   0,  31),*/
+		[FIELD_ENABLED]	    = REG_FIELD(SUN6I_PWM_CH_CTRL(1),  4,   4),
+		[FIELD_READY]	    = REG_FIELD(SUN6I_PWM_CH_CTRL(1), 28,  28),
 	},
+	{
+		[FIELD_PRESCAL]	    = REG_FIELD(SUN6I_PWM_CH_CTRL(2),  0,   3),
+		[FIELD_POLARITY]    = REG_FIELD(SUN6I_PWM_CH_CTRL(2),  5,   5),
+		[FIELD_CLK_GATING]  = REG_FIELD(SUN6I_PWM_CH_CTRL(2),  6,   6),
+		[FIELD_PERIOD]	    = REG_FIELD(SUN6I_PWM_CH_PRD(2),  16,  31),
+		[FIELD_DUTY]	    = REG_FIELD(SUN6I_PWM_CH_PRD(2),   0,  15),
+		/*[FIELD_PERIOD_DUTY] = REG_FIELD(SUN6I_PWM_CH_PRD(2),   0,  31),*/
+		[FIELD_ENABLED]	   = REG_FIELD(SUN6I_PWM_CH_CTRL(2),  4,   4),
+		[FIELD_READY]	   = REG_FIELD(SUN6I_PWM_CH_CTRL(2), 28,  28),
+	},
+	{
+		[FIELD_PRESCAL]	   = REG_FIELD(SUN6I_PWM_CH_CTRL(3),  0,   3),
+		[FIELD_POLARITY]   = REG_FIELD(SUN6I_PWM_CH_CTRL(3),  5,   5),
+		[FIELD_CLK_GATING] = REG_FIELD(SUN6I_PWM_CH_CTRL(3),  6,   6),
+		[FIELD_PERIOD]	   = REG_FIELD(SUN6I_PWM_CH_PRD(3),  16,  31),
+		[FIELD_DUTY]	   = REG_FIELD(SUN6I_PWM_CH_PRD(3),   0,  15),
+		/*[FIELD_PERIOD_DUTY] = REG_FIELD(SUN6I_PWM_CH_PRD(1),   0,  31),*/
+		[FIELD_ENABLED]	   = REG_FIELD(SUN6I_PWM_CH_CTRL(3),  4,   4),
+		[FIELD_READY]	   = REG_FIELD(SUN6I_PWM_CH_CTRL(3), 28,  28),
+	}
 };
-MODULE_DEVICE_TABLE(of, sun4i_pwm_dt_ids);
+
+static int sun4i_alloc_regmap_fields(struct device *dev,
+				     struct sun4i_pwm_chip *pwm, int ch)
+{
+	int i, err;
+
+	if (ch >= MAX_PWM_CHANNELS)
+		return -EINVAL;
+	for (i = 0; i < NUM_FIELDS; i++) {
+		pwm->fields[ch][i] =
+			devm_regmap_field_alloc(dev, pwm->regmap,
+						(*pwm->data->reg_fields)[ch][i]);
+		if (IS_ERR(pwm->fields[ch][i])) {
+			err = PTR_ERR(pwm->fields[ch][i]);
+			dev_err(dev, "regmap field allocation failed: %d\n", err);
+			pwm->fields[ch][i] = NULL;
+			return err;
+		}
+	}
+
+	return 0;
+}
 
 static int sun4i_pwm_probe(struct platform_device *pdev)
 {
 	struct sun4i_pwm_chip *pwm;
-	int ret;
+	struct resource *res;
+	void __iomem *base;
+	int ret, i;
 
 	pwm = devm_kzalloc(&pdev->dev, sizeof(*pwm), GFP_KERNEL);
 	if (!pwm)
@@ -401,9 +554,15 @@ static int sun4i_pwm_probe(struct platform_device *pdev)
 	if (!pwm->data)
 		return -ENODEV;
 
-	pwm->base = devm_platform_ioremap_resource(pdev, 0);
-	if (IS_ERR(pwm->base))
-		return PTR_ERR(pwm->base);
+	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
+	base = devm_ioremap_resource(&pdev->dev, res);
+	if (IS_ERR(base))
+		return PTR_ERR(base);
+
+	pwm->regmap = devm_regmap_init_mmio(&pdev->dev, base,
+					&sun4i_pwm_regmap_config);
+	if (IS_ERR(pwm->regmap))
+		return PTR_ERR(pwm->regmap);
 
 	/*
 	 * All hardware variants need a source clock that is divided and
@@ -461,6 +620,12 @@ static int sun4i_pwm_probe(struct platform_device *pdev)
 	pwm->chip.ops = &sun4i_pwm_ops;
 	pwm->chip.npwm = pwm->data->npwm;
 
+	for (i = 0; i < pwm->chip.npwm; i++) {
+		ret = sun4i_alloc_regmap_fields(&pdev->dev, pwm, i);
+		if (ret)
+			goto err_bus;
+	}
+
 	spin_lock_init(&pwm->ctrl_lock);
 
 	ret = pwmchip_add(&pwm->chip);
@@ -493,6 +658,80 @@ static int sun4i_pwm_remove(struct platform_device *pdev)
 	return 0;
 }
 
+static const struct sun4i_pwm_data sun4i_pwm_dual_nobypass = {
+	.npwm = 2,
+	.prescaler_table = sun4i_prescaler_table,
+	.reg_fields = &sun4i_pwm_regfields,
+};
+
+static const struct sun4i_pwm_data sun4i_pwm_dual_bypass = {
+	.has_prescaler_bypass = true,
+	.npwm = 2,
+	.prescaler_table = sun4i_prescaler_table,
+	.reg_fields = &sun4i_pwm_regfields,
+};
+
+static const struct sun4i_pwm_data sun4i_pwm_single_bypass = {
+	.has_prescaler_bypass = true,
+	.npwm = 1,
+	.prescaler_table = sun4i_prescaler_table,
+	.reg_fields = &sun4i_pwm_regfields,
+};
+
+static const struct sun4i_pwm_data sun6i_a31_pwm_data = {
+	.has_rdy_flag = true,
+	.npwm = 4,
+	.prescaler_table = sun6i_prescaler_table,
+	.reg_fields = &sun6i_pwm_regfields,
+};
+
+static const struct sun4i_pwm_data sun50i_a64_pwm_data = {
+	.has_prescaler_bypass = true,
+	.has_direct_mod_clk_output = true,
+	.npwm = 1,
+	.prescaler_table = sun4i_prescaler_table,
+	.reg_fields = &sun4i_pwm_regfields,
+};
+
+static const struct sun4i_pwm_data sun50i_h6_pwm_data = {
+	.has_prescaler_bypass = true,
+	.has_direct_mod_clk_output = true,
+	.npwm = 2,
+	.prescaler_table = sun4i_prescaler_table,
+	.reg_fields = &sun4i_pwm_regfields,
+};
+
+static const struct of_device_id sun4i_pwm_dt_ids[] = {
+	{
+		.compatible = "allwinner,sun4i-a10-pwm",
+		.data = &sun4i_pwm_dual_nobypass,
+	}, {
+		.compatible = "allwinner,sun5i-a10s-pwm",
+		.data = &sun4i_pwm_dual_bypass,
+	}, {
+		.compatible = "allwinner,sun5i-a13-pwm",
+		.data = &sun4i_pwm_single_bypass,
+	}, {
+		.compatible = "allwinner,sun6i-a31-pwm",
+		.data = &sun6i_a31_pwm_data,
+	}, {
+		.compatible = "allwinner,sun7i-a20-pwm",
+		.data = &sun4i_pwm_dual_bypass,
+	}, {
+		.compatible = "allwinner,sun8i-h3-pwm",
+		.data = &sun4i_pwm_single_bypass,
+	}, {
+		.compatible = "allwinner,sun50i-a64-pwm",
+		.data = &sun50i_a64_pwm_data,
+	}, {
+		.compatible = "allwinner,sun50i-h6-pwm",
+		.data = &sun50i_h6_pwm_data,
+	}, {
+		/* sentinel */
+	},
+};
+MODULE_DEVICE_TABLE(of, sun4i_pwm_dt_ids);
+
 static struct platform_driver sun4i_pwm_driver = {
 	.driver = {
 		.name = "sun4i-pwm",
@@ -505,5 +744,6 @@ module_platform_driver(sun4i_pwm_driver);
 
 MODULE_ALIAS("platform:sun4i-pwm");
 MODULE_AUTHOR("Alexandre Belloni <alexandre.belloni@free-electrons.com>");
+MODULE_AUTHOR("Sergey Suloev <ssuloev@orpaltech.com>");
 MODULE_DESCRIPTION("Allwinner sun4i PWM driver");
 MODULE_LICENSE("GPL v2");
-- 
2.25.1

