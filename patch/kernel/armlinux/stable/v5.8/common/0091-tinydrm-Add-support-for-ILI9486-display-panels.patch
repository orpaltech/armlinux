From 38480e86c440094e039efeb8e4c2f763bd39cf24 Mon Sep 17 00:00:00 2001
From: Sergey Suloev <ssuloev@orpaltech.com>
Date: Mon, 4 May 2020 22:29:18 +0300
Subject: [PATCH] tinydrm: Add support for ILI9486 display panels

---
 drivers/gpu/drm/tiny/ili9486.c | 280 +++++++++++++++++++++++----------
 1 file changed, 193 insertions(+), 87 deletions(-)

diff --git a/drivers/gpu/drm/tiny/ili9486.c b/drivers/gpu/drm/tiny/ili9486.c
index 532560a..a7ebd39 100644
--- a/drivers/gpu/drm/tiny/ili9486.c
+++ b/drivers/gpu/drm/tiny/ili9486.c
@@ -1,19 +1,24 @@
-// SPDX-License-Identifier: GPL-2.0+
 /*
- * DRM driver for Ilitek ILI9486 panels
+ * DRM driver for ILI9486 LCD display panels
  *
- * Copyright 2020 Kamlesh Gurudasani <kamlesh.gurudasani@gmail.com>
+ * Copyright 2017 Sergey Suloev <ssuloev@orpaltech.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
  */
 
-#include <linux/backlight.h>
+#define DEBUG
+
+#include <linux/version.h>
 #include <linux/delay.h>
 #include <linux/gpio/consumer.h>
 #include <linux/module.h>
+#include <linux/of_device.h>
 #include <linux/property.h>
 #include <linux/spi/spi.h>
 
-#include <video/mipi_display.h>
-
 #include <drm/drm_atomic_helper.h>
 #include <drm/drm_drv.h>
 #include <drm/drm_fb_helper.h>
@@ -21,36 +26,68 @@
 #include <drm/drm_gem_framebuffer_helper.h>
 #include <drm/drm_mipi_dbi.h>
 #include <drm/drm_modeset_helper.h>
+#include <video/mipi_display.h>
+
+
+/*
+ * ILI9486 Memory Access Control flags
+ */
+#define ILI9486_MY	BIT(7)		/* Row Address Order */
+#define ILI9486_MX	BIT(6)		/* Column Address Order */
+#define ILI9486_MV	BIT(5)		/* Row / Column Exchange */
+#define ILI9486_ML	BIT(4)		/* Vertical Refresh Order */
+#define ILI9486_BGR	BIT(3)		/* BGR Order, if set */
+#define ILI9486_MH	BIT(2)		/* Horizontal Refresh Order */
+
+
+
+struct ili9486_disp_cmd {
+        u8 cmd;
+        size_t len;
+        u8 *data;
+};
+
+#define ILI9486_CMD(c, ...) {			\
+	.cmd = c,				\
+	.len = sizeof((u8[]){__VA_ARGS__}),	\
+	.data = (u8[]){__VA_ARGS__} 		\
+}
 
-#define ILI9486_ITFCTR1         0xb0
-#define ILI9486_PWCTRL1         0xc2
-#define ILI9486_VMCTRL1         0xc5
-#define ILI9486_PGAMCTRL        0xe0
-#define ILI9486_NGAMCTRL        0xe1
-#define ILI9486_DGAMCTRL        0xe2
-#define ILI9486_MADCTL_BGR      BIT(3)
-#define ILI9486_MADCTL_MV       BIT(5)
-#define ILI9486_MADCTL_MX       BIT(6)
-#define ILI9486_MADCTL_MY       BIT(7)
+struct ili9486_disp_quirks {
+	int (*command)(struct mipi_dbi *dbi, u8 *cmd, u8 *param, size_t num);
+	const struct ili9486_disp_cmd *init_cmds;
+};
+
+struct mipi_dbi_dev_ex {
+	struct mipi_dbi_dev base;
+	const struct ili9486_disp_cmd *init_cmds;
+};
 
 /*
- * The PiScreen/waveshare rpi-lcd-35 has a SPI to 16-bit parallel bus converter
- * in front of the  display controller. This means that 8-bit values have to be
- * transferred as 16-bit.
+ * The display has a SPI to 16-bit parallel bus converter in front of the
+ * display controller. This means that 8-bit values has to be transferred
+ * as 16-bit.
  */
-static int waveshare_command(struct mipi_dbi *mipi, u8 *cmd, u8 *par,
-			     size_t num)
+static int waveshare35_command(struct mipi_dbi *dbi, u8 *cmdbuf, u8 *par, size_t num)
 {
-	struct spi_device *spi = mipi->spi;
+	struct spi_device *spi = dbi->spi;
 	void *data = par;
-	u32 speed_hz;
+	u32 speed_hz = 0;
 	int i, ret;
-	__be16 *buf;
+	u8 cmd = cmdbuf[0];
+	u16 *buf;
 
 	buf = kmalloc(32 * sizeof(u16), GFP_KERNEL);
 	if (!buf)
 		return -ENOMEM;
 
+	if (num == 0)
+		DRM_DEBUG_DRIVER("cmd=%02x\n", cmd);
+	else if (num <= 32)
+		DRM_DEBUG_DRIVER("cmd=%02x, par=%*ph\n", cmd, (int)num, par);
+	else
+		DRM_DEBUG_DRIVER("cmd=%02x, len=%zu\n", cmd, num);
+
 	/*
 	 * The displays are Raspberry Pi HATs and connected to the 8-bit only
 	 * SPI controller, so 16-bit command and parameters need byte swapping
@@ -58,12 +95,13 @@ static int waveshare_command(struct mipi_dbi *mipi, u8 *cmd, u8 *par,
 	 * Pixel data bytes have already been swapped before this function is
 	 * called.
 	 */
-	buf[0] = cpu_to_be16(*cmd);
-	gpiod_set_value_cansleep(mipi->dc, 0);
+	buf[0] = cpu_to_be16(cmd);
+	gpiod_set_value_cansleep(dbi->dc, 0);
+
 	speed_hz = mipi_dbi_spi_cmd_max_speed(spi, 2);
 	ret = mipi_dbi_spi_transfer(spi, speed_hz, 8, buf, 2);
 	if (ret || !num)
-		goto free;
+		goto cleanup;
 
 	/* 8-bit configuration data, not 16-bit pixel data */
 	if (num <= 32) {
@@ -74,23 +112,26 @@ static int waveshare_command(struct mipi_dbi *mipi, u8 *cmd, u8 *par,
 		data = buf;
 	}
 
-	gpiod_set_value_cansleep(mipi->dc, 1);
+	gpiod_set_value_cansleep(dbi->dc, 1);
 	ret = mipi_dbi_spi_transfer(spi, speed_hz, 8, data, num);
- free:
+cleanup:
 	kfree(buf);
 
 	return ret;
 }
 
-static void waveshare_enable(struct drm_simple_display_pipe *pipe,
-			     struct drm_crtc_state *crtc_state,
-			     struct drm_plane_state *plane_state)
+static void ili9486_enable(struct drm_simple_display_pipe *pipe,
+			   struct drm_crtc_state *crtc_state,
+			   struct drm_plane_state *plane_state)
 {
 	struct mipi_dbi_dev *dbidev = drm_to_mipi_dbi_dev(pipe->crtc.dev);
+	struct mipi_dbi_dev_ex *dbiex = (void*)dbidev;
 	struct mipi_dbi *dbi = &dbidev->dbi;
 	u8 addr_mode;
 	int ret, idx;
 
+	dev_dbg(pipe->crtc.dev->dev, "%s: enter", __func__);
+
 	if (!drm_dev_enter(pipe->crtc.dev, &idx))
 		return;
 
@@ -102,63 +143,119 @@ static void waveshare_enable(struct drm_simple_display_pipe *pipe,
 	if (ret == 1)
 		goto out_enable;
 
-	mipi_dbi_command(dbi, ILI9486_ITFCTR1);
 	mipi_dbi_command(dbi, MIPI_DCS_EXIT_SLEEP_MODE);
 	msleep(250);
 
-	mipi_dbi_command(dbi, MIPI_DCS_SET_PIXEL_FORMAT, 0x55);
-
-	mipi_dbi_command(dbi, ILI9486_PWCTRL1, 0x44);
-
-	mipi_dbi_command(dbi, ILI9486_VMCTRL1, 0x00, 0x00, 0x00, 0x00);
-
-	mipi_dbi_command(dbi, ILI9486_PGAMCTRL,
-			 0x0F, 0x1F, 0x1C, 0x0C, 0x0F, 0x08, 0x48, 0x98,
-			 0x37, 0x0A, 0x13, 0x04, 0x11, 0x0D, 0x0);
-	mipi_dbi_command(dbi, ILI9486_NGAMCTRL,
-			 0x0F, 0x32, 0x2E, 0x0B, 0x0D, 0x05, 0x47, 0x75,
-			 0x37, 0x06, 0x10, 0x03, 0x24, 0x20, 0x00);
-	mipi_dbi_command(dbi, ILI9486_DGAMCTRL,
-			 0x0F, 0x32, 0x2E, 0x0B, 0x0D, 0x05, 0x47, 0x75,
-			 0x37, 0x06, 0x10, 0x03, 0x24, 0x20, 0x00);
+	if (dbiex->init_cmds) {
+		const struct ili9486_disp_cmd *cmds = dbiex->init_cmds;
+		unsigned int i;
+
+		/* execute display init sequence */
+		for (i = 0; cmds[i].cmd != 0; i++) {
+			ret = mipi_dbi_command_buf(dbi, cmds[i].cmd,
+						cmds[i].data, cmds[i].len);
+			if (ret < 0) {
+				DRM_ERROR("display write failed: %d\n", ret);
+				goto out_exit;
+			}
+		}
+	}
 
 	mipi_dbi_command(dbi, MIPI_DCS_SET_DISPLAY_ON);
 	msleep(100);
 
- out_enable:
+out_enable:
 	switch (dbidev->rotation) {
-	case 90:
-		addr_mode = ILI9486_MADCTL_MY;
+	case 270:
+		addr_mode = ILI9486_MX;
 		break;
 	case 180:
-		addr_mode = ILI9486_MADCTL_MV;
+		addr_mode = ILI9486_MV;
 		break;
-	case 270:
-		addr_mode = ILI9486_MADCTL_MX;
+	case 90:
+		addr_mode = ILI9486_MY;
 		break;
+	case 0:
 	default:
-		addr_mode = ILI9486_MADCTL_MV | ILI9486_MADCTL_MY |
-			ILI9486_MADCTL_MX;
+		addr_mode = ILI9486_MY | ILI9486_MX | ILI9486_MV;
 		break;
 	}
-	addr_mode |= ILI9486_MADCTL_BGR;
+	addr_mode |= ILI9486_BGR;
 	mipi_dbi_command(dbi, MIPI_DCS_SET_ADDRESS_MODE, addr_mode);
+
 	mipi_dbi_enable_flush(dbidev, crtc_state, plane_state);
- out_exit:
+out_exit:
 	drm_dev_exit(idx);
 }
 
-static const struct drm_simple_display_pipe_funcs waveshare_pipe_funcs = {
-	.enable = waveshare_enable,
+static const struct drm_simple_display_pipe_funcs ili9486_pipe_funcs = {
+	.enable	= ili9486_enable,
 	.disable = mipi_dbi_pipe_disable,
-	.update = mipi_dbi_pipe_update,
+	.update	= mipi_dbi_pipe_update,
 	.prepare_fb = drm_gem_fb_simple_display_pipe_prepare_fb,
 };
 
-static const struct drm_display_mode waveshare_mode = {
+static const struct drm_display_mode ili9486_mode = {
 	DRM_SIMPLE_MODE(480, 320, 73, 49),
 };
 
+static const struct ili9486_disp_cmd waveshare35a_init[] = {
+	/* Interface Pixel Format */
+	ILI9486_CMD(0x3A, 0x55),
+
+	/* Power Control 3 (For Normal Mode) */
+	ILI9486_CMD(0xC2, 0x44),
+
+	/* VCOM Control */
+	ILI9486_CMD(0xC5, 0x00, 0x00, 0x00, 0x00),
+
+	/* PGAMCTRL(Positive Gamma Control) */
+	ILI9486_CMD(0xE0, 0x0f, 0x1f, 0x1c, 0x0c, 0x0f, 0x08, 0x48, 0x98, 0x37, 0x0a, 0x13, 0x04, 0x11, 0x0d, 0x00),
+
+	/* NGAMCTRL (Negative Gamma Correction) */
+	ILI9486_CMD(0xE1, 0x0f, 0x32, 0x2e, 0x0b, 0x0d, 0x05, 0x47, 0x75, 0x37, 0x06, 0x10, 0x03, 0x24, 0x20, 0x00),
+
+	/* Digital Gamma Control 1 */
+	ILI9486_CMD(0xE2, 0x0f, 0x32, 0x2e, 0x0b, 0x0d, 0x05, 0x47, 0x75, 0x37, 0x06, 0x10, 0x03, 0x24, 0x20, 0x00),
+
+	{ /*sentinel*/ }
+};
+
+static const struct ili9486_disp_cmd waveshare35b_init[] = {
+	/* Interface Pixel Format */
+	ILI9486_CMD(0x3A, 0x55),
+
+	/* Display Inversion ON */
+	ILI9486_CMD(0x21),
+
+	/* Power Control 1 */
+	ILI9486_CMD(0xC0, 0x09, 0x09),
+
+	/* Power Control 2 */
+	ILI9486_CMD(0xC1, 0x41, 0x00),
+
+	/* VCOM Control */
+	ILI9486_CMD(0xC5, 0x00, 0x36),
+
+	/* PGAMCTRL(Positive Gamma Control) */
+	ILI9486_CMD(0xE0, 0x00, 0x2c, 0x2c, 0x0b, 0x0c, 0x04, 0x4c, 0x64, 0x36, 0x03, 0x0e, 0x01, 0x10, 0x01, 0x00),
+
+	/* NGAMCTRL (Negative Gamma Correction) */
+	ILI9486_CMD(0xE1, 0x0f, 0x37, 0x37, 0x0c, 0x0f, 0x05, 0x50, 0x32, 0x36, 0x04, 0x0b, 0x00, 0x19, 0x14, 0x0f),
+
+	{ /*sentinel*/ }
+};
+
+static const struct ili9486_disp_quirks waveshare35a_quirks = {
+	.command = waveshare35_command,
+	.init_cmds = waveshare35a_init
+};
+
+static const struct ili9486_disp_quirks waveshare35b_quirks = {
+	.command = waveshare35_command,
+	.init_cmds = waveshare35b_init
+};
+
 DEFINE_DRM_GEM_CMA_FOPS(ili9486_fops);
 
 static struct drm_driver ili9486_driver = {
@@ -168,56 +265,60 @@ static struct drm_driver ili9486_driver = {
 	DRM_GEM_CMA_VMAP_DRIVER_OPS,
 	.debugfs_init		= mipi_dbi_debugfs_init,
 	.name			= "ili9486",
-	.desc			= "Ilitek ILI9486",
-	.date			= "20200118",
+	.desc			= "Ilitek ILI9486 3.5inch LCD display panel",
+	.date			= "20171208",
 	.major			= 1,
 	.minor			= 0,
 };
 
 static const struct of_device_id ili9486_of_match[] = {
-	{ .compatible = "waveshare,rpi-lcd-35" },
-	{ .compatible = "ozzmaker,piscreen" },
-	{},
+	{ .compatible = "waveshare,rpi-lcd-35a", .data = &waveshare35a_quirks },
+	{ .compatible = "waveshare,rpi-lcd-35b", .data = &waveshare35b_quirks },
+	{ /*sentinel*/ }
 };
 MODULE_DEVICE_TABLE(of, ili9486_of_match);
 
-static const struct spi_device_id ili9486_id[] = {
-	{ "ili9486", 0 },
-	{ }
-};
-MODULE_DEVICE_TABLE(spi, ili9486_id);
 
 static int ili9486_probe(struct spi_device *spi)
 {
+	const struct ili9486_disp_quirks *quirks;
+	const struct of_device_id *match;
 	struct device *dev = &spi->dev;
 	struct mipi_dbi_dev *dbidev;
+	struct mipi_dbi_dev_ex *dbiex;
 	struct drm_device *drm;
 	struct mipi_dbi *dbi;
 	struct gpio_desc *dc;
 	u32 rotation = 0;
 	int ret;
 
-	dbidev = kzalloc(sizeof(*dbidev), GFP_KERNEL);
-	if (!dbidev)
+	match = of_match_device(ili9486_of_match, dev);
+	if (!match)
+		return -ENODEV;
+	quirks = match->data;
+
+	dbiex = devm_kzalloc(dev, sizeof(*dbiex), GFP_KERNEL);
+	if (!dbiex)
 		return -ENOMEM;
 
+	dbiex->init_cmds = quirks->init_cmds;
+	dbidev = &dbiex->base;
+
 	dbi = &dbidev->dbi;
 	drm = &dbidev->drm;
 	ret = devm_drm_dev_init(dev, drm, &ili9486_driver);
-	if (ret) {
-		kfree(dbidev);
+	if (ret)
 		return ret;
-	}
 
 	drm_mode_config_init(drm);
 
-	dbi->reset = devm_gpiod_get(dev, "reset", GPIOD_OUT_HIGH);
+	dbi->reset = devm_gpiod_get_optional(dev, "reset", GPIOD_OUT_HIGH);
 	if (IS_ERR(dbi->reset)) {
 		DRM_DEV_ERROR(dev, "Failed to get gpio 'reset'\n");
 		return PTR_ERR(dbi->reset);
 	}
 
-	dc = devm_gpiod_get(dev, "dc", GPIOD_OUT_LOW);
+	dc = devm_gpiod_get_optional(dev, "dc", GPIOD_OUT_LOW);
 	if (IS_ERR(dc)) {
 		DRM_DEV_ERROR(dev, "Failed to get gpio 'dc'\n");
 		return PTR_ERR(dc);
@@ -233,11 +334,11 @@ static int ili9486_probe(struct spi_device *spi)
 	if (ret)
 		return ret;
 
-	dbi->command = waveshare_command;
-	dbi->read_commands = NULL;
+	dbi->command = quirks->command;
+	dbi->read_commands = NULL;	/* Reading is not supported */
 
-	ret = mipi_dbi_dev_init(dbidev, &waveshare_pipe_funcs,
-				&waveshare_mode, rotation);
+	ret = mipi_dbi_dev_init(dbidev, &ili9486_pipe_funcs,
+				&ili9486_mode, rotation);
 	if (ret)
 		return ret;
 
@@ -266,7 +367,9 @@ static int ili9486_remove(struct spi_device *spi)
 
 static void ili9486_shutdown(struct spi_device *spi)
 {
-	drm_atomic_helper_shutdown(spi_get_drvdata(spi));
+	struct drm_device *drm = spi_get_drvdata(spi);
+
+	drm_atomic_helper_shutdown(drm);
 }
 
 static struct spi_driver ili9486_spi_driver = {
@@ -274,13 +377,16 @@ static struct spi_driver ili9486_spi_driver = {
 		.name = "ili9486",
 		.of_match_table = ili9486_of_match,
 	},
-	.id_table = ili9486_id,
 	.probe = ili9486_probe,
 	.remove = ili9486_remove,
 	.shutdown = ili9486_shutdown,
 };
 module_spi_driver(ili9486_spi_driver);
 
-MODULE_DESCRIPTION("Ilitek ILI9486 DRM driver");
-MODULE_AUTHOR("Kamlesh Gurudasani <kamlesh.gurudasani@gmail.com>");
+MODULE_ALIAS("spi:ili9486");
+MODULE_ALIAS("spi:rpi-lcd-35a");
+MODULE_ALIAS("spi:rpi-lcd-35b");
+
+MODULE_DESCRIPTION("DRM driver for ILI9486 LCD display panels");
+MODULE_AUTHOR("Sergey Suloev <ssuloev@orpaltech.com>");
 MODULE_LICENSE("GPL");
-- 
2.17.1

