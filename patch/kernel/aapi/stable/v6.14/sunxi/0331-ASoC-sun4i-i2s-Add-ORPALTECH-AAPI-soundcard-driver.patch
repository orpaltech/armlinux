From 626fba9ce6503592553718ff29b4774c8e877b89 Mon Sep 17 00:00:00 2001
From: Sergey <ssuloev@orpaltech.com>
Date: Fri, 21 Mar 2025 22:08:13 +0300
Subject: [PATCH] ASoC: sun4i-i2s: Add ORPALTECH AAPI soundcard driver

---
 sound/soc/sunxi/Kconfig            |   7 +
 sound/soc/sunxi/Makefile           |   3 +
 sound/soc/sunxi/orpal-aapi-sound.c | 241 +++++++++++++++++++++++++++++
 3 files changed, 251 insertions(+)
 create mode 100644 sound/soc/sunxi/orpal-aapi-sound.c

diff --git a/sound/soc/sunxi/Kconfig b/sound/soc/sunxi/Kconfig
index 1f18f01..c1a257e 100644
--- a/sound/soc/sunxi/Kconfig
+++ b/sound/soc/sunxi/Kconfig
@@ -67,4 +67,11 @@ config SND_SUN8I_ADDA_PR_REGMAP
 	tristate
 	select REGMAP
 
+config SND_ORPAL_AAPI
+	tristate "ORPAL-AA-Pi Soundcard driver for Allwinner SoCs"
+	depends on SND_SUN4I_I2S
+	select SND_SOC_WM8731
+	help
+	  Say Y or M if you want to add support for ORPAL AAPI Soundcard.
+
 endmenu
diff --git a/sound/soc/sunxi/Makefile b/sound/soc/sunxi/Makefile
index 4483fe9..bc45108 100644
--- a/sound/soc/sunxi/Makefile
+++ b/sound/soc/sunxi/Makefile
@@ -7,3 +7,6 @@ obj-$(CONFIG_SND_SUN50I_CODEC_ANALOG) += sun50i-codec-analog.o
 obj-$(CONFIG_SND_SUN8I_CODEC) += sun8i-codec.o
 obj-$(CONFIG_SND_SUN8I_ADDA_PR_REGMAP) += sun8i-adda-pr-regmap.o
 obj-$(CONFIG_SND_SUN50I_DMIC) += sun50i-dmic.o
+# ORPAL-AA-Pi Soundcard Support
+snd-soc-orpal-aapi-objs := orpal-aapi-sound.o
+obj-$(CONFIG_SND_ORPAL_AAPI) += snd-soc-orpal-aapi.o
diff --git a/sound/soc/sunxi/orpal-aapi-sound.c b/sound/soc/sunxi/orpal-aapi-sound.c
new file mode 100644
index 0000000..5812c3a
--- /dev/null
+++ b/sound/soc/sunxi/orpal-aapi-sound.c
@@ -0,0 +1,241 @@
+/*
+ * ASoC Driver for ORPALTECH AA-PI Soundcard (capture mode only).
+ *
+ *  Created on:	15-Apr-2018
+ *  Created by:	Sergey Suloev <ssuloev@orpaltech.ru>
+ *
+ * Copyright (C) 2013-2025 ORPAL Technology, Inc.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ */
+
+#define DEBUG
+
+#include <linux/module.h>
+#include <linux/types.h>
+
+#include <sound/core.h>
+#include <sound/soc.h>
+#include <sound/pcm_params.h>
+#include <sound/control.h>
+
+#include "../codecs/wm8731.h"
+
+/*
+ * This is fixed on the board
+ */
+#define BOARD_XTAL_FREQ	12288000
+
+static const unsigned int aapi_sound_rates[] = { 48000, 96000 };
+
+static const unsigned int aapi_sound_channels[] = { 2 };
+
+/* Setup constraints */
+static struct snd_pcm_hw_constraint_list aapi_sound_constraints_rates = {
+	.list	= aapi_sound_rates,
+	.count	= ARRAY_SIZE(aapi_sound_rates),
+};
+static struct snd_pcm_hw_constraint_list aapi_sound_constraints_channels = {
+	.list	= aapi_sound_channels,
+	.count	= ARRAY_SIZE(aapi_sound_channels),
+};
+
+static int aapi_sound_asoc_dai_init(struct snd_soc_pcm_runtime *rtd)
+{
+	struct snd_soc_dai *codec_dai = snd_soc_rtd_to_codec(rtd, 0);
+	struct snd_soc_dai *cpu_dai = snd_soc_rtd_to_cpu(rtd, 0);
+	struct snd_soc_card *card = rtd->card;
+	int ret;
+
+	dev_dbg(card->dev, "%s: enter\n", __func__);
+
+	/* Set codec sysclk */
+	ret = snd_soc_dai_set_sysclk(codec_dai, WM8731_SYSCLK_XTAL,
+				     BOARD_XTAL_FREQ, SND_SOC_CLOCK_IN);
+	if (ret) {
+		dev_err(card->dev, "Failed to set WM8731 SYSCLK: %d\n", ret);
+		return ret;
+	}
+
+	/* Set I2S sysclk */
+	ret = snd_soc_dai_set_sysclk(cpu_dai, 0, BOARD_XTAL_FREQ,
+				     SND_SOC_CLOCK_OUT);
+	if (ret) {
+		dev_err(card->dev, "Failed to set I2S SYSCLK: %d\n", ret);
+		return ret;
+	}
+
+	return 0;
+}
+
+static int aapi_sound_asoc_startup(struct snd_pcm_substream *substream)
+{
+	struct snd_soc_pcm_runtime *rtd = snd_soc_substream_to_rtd(substream);
+	struct snd_soc_card *card = rtd->card;
+	int ret;
+
+	dev_dbg(card->dev, "%s: enter\n", __func__);
+
+	ret = snd_pcm_hw_constraint_list(substream->runtime, 0,
+					SNDRV_PCM_HW_PARAM_RATE,
+					&aapi_sound_constraints_rates);
+	if (ret < 0) {
+		dev_err(card->dev,
+			"%s: set rate constraints failed: 0x%x\n",
+			__func__, ret);
+		return ret;
+	}
+
+	ret = snd_pcm_hw_constraint_list(substream->runtime, 0,
+					SNDRV_PCM_HW_PARAM_CHANNELS,
+					&aapi_sound_constraints_channels);
+	if (ret) {
+		dev_err(card->dev,
+			"%s: set channels constraints failed: 0x%x\n",
+			__func__, ret);
+		return ret;
+	}
+
+	return 0;
+}
+
+static int aapi_sound_asoc_hw_params(struct snd_pcm_substream *substream,
+				     struct snd_pcm_hw_params *params)
+{
+	struct snd_soc_pcm_runtime *rtd = snd_soc_substream_to_rtd(substream);
+	struct snd_soc_dai *cpu_dai = snd_soc_rtd_to_cpu(rtd, 0);
+	struct snd_soc_card *card = rtd->card;
+	int ret;
+
+	dev_dbg(card->dev, "%s: enter\n", __func__);
+
+	/* WM8731 in master mode will use BCLK = 64 * FS  */
+	ret = snd_soc_dai_set_bclk_ratio(cpu_dai, 64);
+	if (ret < 0) {
+		dev_err(card->dev, "Failed to set BCLK ratio: %d\n", ret);
+		return ret;
+	}
+
+	return 0;
+}
+
+/* machine stream operations */
+static struct snd_soc_ops aapi_sound_ops = {
+	.startup   = aapi_sound_asoc_startup,
+	.hw_params = aapi_sound_asoc_hw_params,
+};
+
+static const struct snd_soc_dapm_widget aapi_sound_widgets[] = {
+	SND_SOC_DAPM_LINE("Line In Jacks", NULL),
+};
+
+static const struct snd_soc_dapm_route aapi_sound_routes[] = {
+	/* line inputs */
+	{ "LLINEIN", NULL, "Line In Jacks" },
+	{ "RLINEIN", NULL, "Line In Jacks" }
+};
+
+static int aapi_sound_probe(struct platform_device *pdev)
+{
+	struct device *dev = &pdev->dev;
+	struct snd_soc_card *card;
+	struct snd_soc_dai_link *dai;
+	struct device_node *codec_np, *cpu_np;
+	struct snd_soc_dai_link_component *comp;
+	int ret;
+
+	dev_dbg(dev, "%s: enter\n", __func__);
+
+	if (!dev->of_node)
+		return -ENODEV;
+
+	card = devm_kzalloc(dev, sizeof(*card), GFP_KERNEL);
+	dai = devm_kzalloc(dev, sizeof(*dai), GFP_KERNEL);
+	comp = devm_kzalloc(dev, 3 * sizeof(*comp), GFP_KERNEL);
+	if (!dai || !card)
+		return -ENOMEM;
+
+        // Populate DAI link structure
+	dai->cpus = &comp[0];
+	dai->num_cpus = 1;
+	dai->codecs = &comp[1];
+	dai->num_codecs = 1;
+	dai->platforms = &comp[2];
+	dai->num_platforms = 1;
+
+	dai->name = "aapi-snd-dai";
+	dai->stream_name = "aapi-snd-pcm";
+	dai->init = aapi_sound_asoc_dai_init;
+	dai->ops = &aapi_sound_ops;
+	dai->dai_fmt = SND_SOC_DAIFMT_I2S
+		     | SND_SOC_DAIFMT_CBM_CFM
+		     | SND_SOC_DAIFMT_NB_NF;
+
+	// Read the Device tree
+	codec_np = of_parse_phandle(dev->of_node, "orpal,audio-codec", 0);
+	if (!codec_np) {
+		dev_err(dev, "audio-codec node missing\n");
+		return -EINVAL;
+	}
+	dai->codecs->dai_name = "wm8731-hifi";
+	dai->codecs->of_node = codec_np;
+	of_node_put(codec_np);
+
+	cpu_np = of_parse_phandle(dev->of_node, "orpal,i2s-controller", 0);
+	if (!cpu_np) {
+		dev_err(dev, "i2s-controller node missing\n");
+		of_node_put(codec_np);
+		return -EINVAL;
+	}
+	dai->cpus->of_node = cpu_np;
+	dai->platforms->of_node = cpu_np;
+	of_node_put(cpu_np);
+
+	// Register ASoC card object
+	card->dev = dev;
+	card->name = "orpal-aapi-snd";
+	card->owner = THIS_MODULE;
+	card->dai_link = dai;
+	card->num_links = 1;
+	card->dapm_widgets = aapi_sound_widgets;
+	card->num_dapm_widgets = ARRAY_SIZE(aapi_sound_widgets);
+	card->dapm_routes = aapi_sound_routes;
+	card->num_dapm_routes = ARRAY_SIZE(aapi_sound_routes);
+	card->fully_routed = true;
+
+	ret = devm_snd_soc_register_card(dev, card);
+	if (ret == -EPROBE_DEFER)
+		return ret;
+	if (ret < 0) {
+		dev_err(dev, "register card failed: (%d)\n", ret);
+		return ret;
+	}
+
+	dev_info(dev, "%s card registered!\n", card->name);
+
+	return 0;
+}
+
+static const struct of_device_id aapi_sound_of_match[] = {
+	{ .compatible = "orpaltech,aapi-sound-wm8731", },
+	{ /*sentinel*/ },
+};
+MODULE_DEVICE_TABLE(of, aapi_sound_of_match);
+
+static struct platform_driver aapi_sound_driver = {
+	.probe	= aapi_sound_probe,
+	.driver	= {
+		.name	= "orpal-aapi-snd",
+		.owner	= THIS_MODULE,
+		.of_match_table	= aapi_sound_of_match,
+	},
+};
+module_platform_driver(aapi_sound_driver);
+
+MODULE_AUTHOR("Sergey Suloev <ssuloev@orpaltech.ru>");
+MODULE_DESCRIPTION("ORPALTECH AA-PI Soundcard driver");
+MODULE_LICENSE("GPL v2");
+MODULE_ALIAS("platform:orpal-aapi-snd");
-- 
2.43.0

