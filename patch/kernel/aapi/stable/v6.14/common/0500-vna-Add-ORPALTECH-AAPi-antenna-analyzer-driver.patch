From 9a599193982df741a86b9f42d130503f718d8e17 Mon Sep 17 00:00:00 2001
From: Sergey <ssuloev@orpaltech.com>
Date: Thu, 13 Mar 2025 22:29:44 +0300
Subject: [PATCH] vna: Add ORPALTECH AAPi antenna analyzer driver

---
 drivers/Kconfig                |   2 +
 drivers/Makefile               |   2 +
 drivers/vna/Kconfig            |  21 ++
 drivers/vna/Makefile           |   9 +
 drivers/vna/orpal_aapi_drv.c   | 598 +++++++++++++++++++++++++++++++++
 drivers/vna/orpal_aapi_drv.h   | 128 +++++++
 drivers/vna/orpal_aapi_power.c | 415 +++++++++++++++++++++++
 drivers/vna/orpal_aapi_sysfs.c | 163 +++++++++
 drivers/vna/orpal_aapi_sysfs.h |  18 +
 9 files changed, 1356 insertions(+)
 create mode 100644 drivers/vna/Kconfig
 create mode 100644 drivers/vna/Makefile
 create mode 100644 drivers/vna/orpal_aapi_drv.c
 create mode 100644 drivers/vna/orpal_aapi_drv.h
 create mode 100644 drivers/vna/orpal_aapi_power.c
 create mode 100644 drivers/vna/orpal_aapi_sysfs.c
 create mode 100644 drivers/vna/orpal_aapi_sysfs.h

diff --git a/drivers/Kconfig b/drivers/Kconfig
index 7bdad83..eb5c8e2 100644
--- a/drivers/Kconfig
+++ b/drivers/Kconfig
@@ -245,4 +245,6 @@ source "drivers/cdx/Kconfig"
 
 source "drivers/dpll/Kconfig"
 
+source "drivers/vna/Kconfig"
+
 endmenu
diff --git a/drivers/Makefile b/drivers/Makefile
index 45d1c3e..afc51ca 100644
--- a/drivers/Makefile
+++ b/drivers/Makefile
@@ -195,3 +195,5 @@ obj-$(CONFIG_CDX_BUS)		+= cdx/
 obj-$(CONFIG_DPLL)		+= dpll/
 
 obj-$(CONFIG_S390)		+= s390/
+
+obj-$(CONFIG_VNA)		+= vna/
diff --git a/drivers/vna/Kconfig b/drivers/vna/Kconfig
new file mode 100644
index 0000000..1fa8052
--- /dev/null
+++ b/drivers/vna/Kconfig
@@ -0,0 +1,21 @@
+#
+# VNA
+#
+
+menuconfig VNA
+        bool "VNA support"
+	help
+	  Enables support of the Vector Network Analyzer.
+
+config VNA_ORPAL_AAPI
+	tristate "ORPAL AAPI Antenna analyzer"
+	depends on ARCH_SUNXI || ARCH_BCM2835
+	depends on VNA
+	depends on COMMON_CLK
+	depends on SND_SOC
+	depends on PWM
+	depends on I2C
+	select SND_ORPAL_AAPI
+	select COMMON_CLK_ORPAL_AAPI
+	help
+	  This option enables ORPAL AAPi antenna analyzer.
diff --git a/drivers/vna/Makefile b/drivers/vna/Makefile
new file mode 100644
index 0000000..86bfed2
--- /dev/null
+++ b/drivers/vna/Makefile
@@ -0,0 +1,9 @@
+# SPDX-License-Identifier: GPL-2.0
+#
+# Makefile for kernel VNA drivers.
+#
+
+vna-orpal-aapi-objs  := orpal_aapi_drv.o \
+			orpal_aapi_power.o \
+			orpal_aapi_sysfs.o
+obj-$(CONFIG_VNA_ORPAL_AAPI) += vna-orpal-aapi.o
diff --git a/drivers/vna/orpal_aapi_drv.c b/drivers/vna/orpal_aapi_drv.c
new file mode 100644
index 0000000..556102b
--- /dev/null
+++ b/drivers/vna/orpal_aapi_drv.c
@@ -0,0 +1,598 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/*
+ * The driver for ORPAL AA-Pi antenna analyzer
+ *
+ * Copyright 2018 ORPAL Technologies Inc.
+ *   Sergey Suloev <ssuloev@orpaltech.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ */
+
+#define DEBUG
+
+#include <linux/delay.h>
+#include <linux/fs.h>
+#include <linux/i2c.h>
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/of.h>
+#include <linux/of_device.h>
+#include <linux/of_platform.h>
+#include <linux/platform_device.h>
+#include <linux/pm_runtime.h>
+#include <linux/slab.h>
+#include <linux/uaccess.h>
+#include <linux/version.h>
+
+#include "orpal_aapi_drv.h"
+#include "orpal_aapi_sysfs.h"
+
+
+static DEFINE_IDA(aapi_ida);
+static dev_t aapi_dev;
+static struct class *aapi_class;
+
+ATTRIBUTE_GROUPS(aapi);
+
+
+static int aapi_set_clock(struct clk *clk, u32 rate)
+{
+	int ret;
+
+	ret = clk_round_rate(clk, rate);
+	if (ret < 0)
+		return ret;
+
+	/* A rounded rate value will be passed */
+	ret = clk_set_rate(clk, ret);
+
+	return ret;
+}
+
+u32 aapi_get_measure_freq(struct aapi_device *aapi)
+{
+	return clk_get_rate(aapi->radio.clk0);
+}
+
+int aapi_set_measure_freq(struct aapi_device *aapi, u32 measure_freq)
+{
+        u32 loc_osc_freq;
+        int ret;
+
+	if (IS_ERR_OR_NULL(aapi->radio.clk0))
+		return -ENODEV;
+
+	ret = aapi_set_clock(aapi->radio.clk0, measure_freq);
+	if (ret)
+		return ret;
+
+	loc_osc_freq = measure_freq + aapi->radio.intermediate_freq;
+	// TODO: verify rates
+
+	ret = aapi_set_clock(aapi->radio.clk1, loc_osc_freq);
+	if (ret)
+		return ret;
+
+	return 0;
+}
+
+u32 aapi_get_local_osc_freq(struct aapi_device *aapi)
+{
+	return clk_get_rate(aapi->radio.clk1);
+}
+
+u32 aapi_get_intermediate_freq(struct aapi_device *aapi)
+{
+	return aapi->radio.intermediate_freq;
+}
+
+static ssize_t orpal_aapi_fread(struct file *filp, char __user *buf,
+				size_t size, loff_t *f_pos)
+{
+	struct aapi_device *aapi = filp->private_data;
+	unsigned int copied = 0;
+	size_t dev_size = sizeof(aapi->status);
+	int ret;
+
+	if (*f_pos >= dev_size)
+		goto out;
+
+	// TODO: read charger status
+
+	copied = min(size, dev_size);
+	copy_to_user(buf, &aapi->status, copied);
+
+out:
+	dev_dbg(aapi->dev.parent, "%s: reading %d bytes, %d read\n",
+		__func__, size, copied);
+
+	return copied;
+}
+
+static ssize_t orpal_aapi_fwrite(struct file *filp, const char __user *buf,
+				 size_t size, loff_t *f_pos)
+{
+	struct aapi_device *aapi = filp->private_data;
+
+	dev_dbg(aapi->dev.parent,
+		"%s: writing %d bytes, no actual write performed\n",
+		__func__);
+
+	return size;
+}
+
+static int orpal_aapi_fopen(struct inode *inode, struct file *filp)
+{
+	struct aapi_device *aapi;
+
+	aapi = container_of(inode->i_cdev, struct aapi_device, cdev);
+	if (!aapi) {
+		dev_err(aapi->dev.parent,
+			"device: minor %d unknown\n", iminor(inode));
+		return -ENODEV;
+	}
+
+	filp->private_data = aapi;
+
+	// device can't be open for write
+	if ( (filp->f_flags & O_ACCMODE) == O_WRONLY) {
+		dev_dbg(aapi->dev.parent,
+			"%s: device can't be open for write\n", __func__);
+		return -EACCES;
+	}
+
+	dev_dbg(aapi->dev.parent, "%s: open\n", __func__);
+
+	return 0;
+}
+
+static loff_t orpal_aapi_fllseek(struct file *filp, loff_t offset, int whence)
+{
+	struct aapi_device *aapi = filp->private_data;
+	loff_t dev_size = sizeof(aapi->status);
+
+	return no_seek_end_llseek_size(filp, offset, whence, dev_size);
+}
+
+static unsigned int orpal_aapi_fpoll(struct file *filp,
+				     struct poll_table_struct *wait)
+{
+	struct aapi_device *aapi = filp->private_data;
+
+	dev_dbg(aapi->dev.parent, "%s: poll\n", __func__);
+
+	return 0;
+}
+
+static int orpal_aapi_ffasync(int fd, struct file *filp, int mode)
+{
+	struct aapi_device *aapi = filp->private_data;
+
+	return fasync_helper(fd, filp, mode, &aapi->fasync_queue);
+}
+
+static int orpal_aapi_frelease(struct inode *inode, struct file *filp)
+{
+	struct aapi_device *aapi = filp->private_data;
+	filp->private_data = NULL;
+
+	/* remove this filp from the asynchronously notified filp's */
+	orpal_aapi_ffasync(-1, filp, 0);
+
+	dev_dbg(aapi->dev.parent, "%s: release\n", __func__);
+
+	return 0;
+}
+
+static const struct file_operations orpal_aapi_fops = {
+	.owner	 = THIS_MODULE,
+	.open	 = orpal_aapi_fopen,
+	.release = orpal_aapi_frelease,
+	.read	 = orpal_aapi_fread,
+	.write	 = orpal_aapi_fwrite,
+	.llseek	 = orpal_aapi_fllseek,
+	.poll	 = orpal_aapi_fpoll,
+	.fasync	 = orpal_aapi_ffasync,
+};
+
+static void aapi_radio_release(struct aapi_device *aapi)
+{
+	struct aapi_radio_board *radio = &aapi->radio;
+	struct device *dev = aapi->dev.parent;
+
+	dev_dbg(dev, "%s: release radio board\n", __func__);
+
+	regulator_disable(radio->power);
+}
+
+static int aapi_radio_init(struct aapi_device *aapi)
+{
+	struct aapi_radio_board *radio = &aapi->radio;
+	struct device *dev = aapi->dev.parent;
+	int ret;
+
+	dev_dbg(dev, "%s: obtain control over radio board\n", __func__);
+
+	radio->power = devm_regulator_get(dev, "radio");
+	if (IS_ERR(radio->power)) {
+		ret = PTR_ERR(radio->power);
+		dev_err(dev, "couldn't get regulator: %d\n", ret);
+		return ret;
+	}
+	/* power up radio board */
+	ret = regulator_enable(radio->power);
+	if (ret) {
+		dev_err(dev, "can't enable regulator: %d\n", ret);
+		return ret;
+	}
+
+	radio->clk0 = devm_clk_get(dev, "clk0");
+	if (IS_ERR(radio->clk0)) {
+		ret = PTR_ERR(radio->clk0);
+		if (ret == -EPROBE_DEFER)
+			dev_err(dev, "access to CLK0 output deferred\n");
+		else
+			dev_err(dev, "unable to acquire CLK0 clock\n");
+		goto err_release;
+	}
+
+	radio->clk1 = devm_clk_get(dev, "clk1");
+	if (IS_ERR(radio->clk1)) {
+		ret = PTR_ERR(radio->clk1);
+		if (ret == -EPROBE_DEFER)
+			dev_err(dev, "access to CLK1 output deferred\n");
+		else
+			dev_err(dev, "unable to acquire CLK1 clock\n");
+		goto err_release;
+	}
+
+	ret = device_property_read_u32(dev, "intermediate-freq",
+				       &radio->intermediate_freq);
+	if (ret < 0) {
+		dev_err(dev, "intermediate freq was not specified\n");
+		goto err_release;
+	}
+
+	ret = device_property_read_u32(dev, "initial-freq",
+					&radio->initial_freq);
+	if (ret < 0) {
+		dev_warn(dev, "initial freq was not specified\n");
+	}
+
+	return 0;
+
+err_release:
+	aapi_radio_release(aapi);
+	return ret;
+}
+
+static void aapi_radio_disable(struct aapi_device *aapi)
+{
+	struct device *dev = aapi->dev.parent;
+	struct aapi_radio_board *radio = &aapi->radio;
+
+	dev_dbg(dev, "%s: disable radio board\n", __func__);
+
+	clk_disable_unprepare(radio->clk0);
+	clk_disable_unprepare(radio->clk1);
+}
+
+static int aapi_radio_enable(struct aapi_device *aapi)
+{
+	struct device *dev = aapi->dev.parent;
+	struct aapi_radio_board *radio = &aapi->radio;
+	int ret;
+
+	dev_dbg(dev, "%s: enable radio board\n", __func__);
+
+	ret = clk_prepare_enable(radio->clk0);
+	if (ret) {
+		dev_err(dev, "failed to enable clk0\n");
+		goto err_disable;
+	}
+
+	ret = clk_prepare_enable(radio->clk1);
+	if (ret) {
+		dev_err(dev, "failed to enable clk1\n");
+		goto err_disable;
+	}
+
+	if (radio->initial_freq) {
+		ret = aapi_set_measure_freq(aapi, radio->initial_freq);
+		if (ret)
+			goto err_disable;
+	}
+
+	return 0;
+
+err_disable:
+	aapi_radio_disable(aapi);
+	return ret;
+}
+
+static void aapi_dev_release(struct device *dev)
+{
+	struct aapi_device *aapi = aapi_from_dev(dev);
+
+	ida_simple_remove(&aapi_ida, aapi->id);
+}
+
+static struct device_type orpal_aapi_devtype = {
+	.name	 = "aapi_device",
+	.release = aapi_dev_release,
+};
+
+static void aapi_power_status_changed(struct aapi_device *aapi)
+{
+	//struct aapi_fuel_gauge *fg = &aapi->fgauge;
+
+	/* signal asynchronous file readers */
+	if (aapi->fasync_queue)
+		kill_fasync(&aapi->fasync_queue, SIGIO, POLL_IN);
+
+	/* notify fuel gauge module */
+//	if (fg->power_status_changed)
+//		fg->power_status_changed(aapi);
+}
+
+static struct aapi_device *aapi_dev_create(struct platform_device *pdev)
+{
+	struct aapi_device *aapi;
+	int id;
+	int ret;
+
+	id = ida_simple_get(&aapi_ida, 0, 0, GFP_KERNEL);
+	if (id < 0) {
+		dev_err(&pdev->dev, "unable to allocate id\n");
+		return ERR_PTR(id);
+	}
+
+	aapi = devm_kzalloc(&pdev->dev, sizeof(*aapi), GFP_KERNEL);
+	if (!aapi) {
+		dev_err(&pdev->dev, "unable to allocate memory\n");
+		ret = -ENOMEM;
+		goto err_ida;
+	}
+
+	dev_set_name(&aapi->dev, DEV_NAME "%d", id);
+	aapi->id = id;
+	aapi->dev.devt = MKDEV(MAJOR(aapi_dev), id);
+	aapi->dev.parent = &pdev->dev;
+	aapi->dev.class = aapi_class;
+	aapi->dev.type = &orpal_aapi_devtype;
+	aapi->dev.groups = aapi_groups;
+
+	/* initialize status mutex */
+	mutex_init(&aapi->status_lock);
+
+	platform_set_drvdata(pdev, aapi);
+
+	ret = device_register(&aapi->dev);
+	if (ret < 0) {
+		dev_err(&pdev->dev, "failed to register device\n");
+		put_device(&aapi->dev);
+		goto err_ida;
+	}
+
+	cdev_init(&aapi->cdev, &orpal_aapi_fops);
+	aapi->cdev.owner = THIS_MODULE;
+
+	ret = cdev_add(&aapi->cdev, aapi->dev.devt, 1);
+	if (ret < 0) {
+		dev_err(&pdev->dev, "cdev add failed\n");
+		goto err_dev;
+	}
+
+	/* notification callbacks */
+	aapi->power_status_changed = aapi_power_status_changed;
+
+	dev_dbg(&pdev->dev,
+		"%s: char device created: major(%d), minor(%d)",
+		__func__,
+		MAJOR(aapi->dev.devt), MINOR(aapi->dev.devt));
+
+	return aapi;
+
+err_dev:
+	device_unregister(&aapi->dev);
+err_ida:
+	ida_simple_remove(&aapi_ida, id);
+
+	return ERR_PTR(ret);
+}
+
+static void aapi_unreg_device(struct aapi_device *aapi)
+{
+	cdev_del(&aapi->cdev);
+
+	dev_dbg(aapi->dev.parent,
+		"%s: char device deleted: major(%d), minor(%d)",
+		__func__,
+		MAJOR(aapi->dev.devt), MINOR(aapi->dev.devt));
+
+	device_unregister(&aapi->dev);
+}
+
+static int aapi_runtime_resume(struct device *dev)
+{
+	struct aapi_device *aapi = dev_get_drvdata(dev);
+	int ret;
+
+	dev_dbg(dev, "%s: device resume\n",  __func__);
+
+	ret = aapi_radio_enable(aapi);
+	if (ret)
+		return ret;
+
+	return 0;
+}
+
+static int aapi_runtime_suspend(struct device *dev)
+{
+	struct aapi_device *aapi = dev_get_drvdata(dev);
+
+	dev_dbg(dev, "%s: device suspend\n",  __func__);
+
+	aapi_radio_disable(aapi);
+
+	return 0;
+}
+
+static int orpal_aapi_probe(struct platform_device *pdev)
+{
+	struct aapi_device *aapi;
+	int ret;
+
+	aapi = aapi_dev_create(pdev);
+	if (IS_ERR(aapi)) {
+		ret = PTR_ERR(aapi);
+		if (ret != -EPROBE_DEFER)
+			dev_err(&pdev->dev, "device create failed: %d\n", ret);
+		return ret;
+	}
+
+	aapi->feedback = devm_regulator_get(&pdev->dev, "feedback");
+	if (IS_ERR(aapi->feedback)) {
+		ret = PTR_ERR(aapi->feedback);
+		dev_err(&pdev->dev,
+			"couldn't get feedback regulator: %d\n", ret);
+		goto err_dev_unreg;
+	}
+	ret = regulator_enable(aapi->feedback);
+	if (ret) {
+		dev_err(&pdev->dev,
+			"can't turn on feedback regulator: %d\n", ret);
+		goto err_dev_unreg;
+	}
+
+	ret = aapi_radio_init(aapi);
+	if (ret)
+		goto err_feedback_reg;
+
+	ret = aapi_power_init(aapi);
+	if (ret)
+		goto err_radio;
+
+	/*
+	 * This wake-up/shutdown pattern is used here to have the
+	 * device woken up even if runtime_pm is disabled
+	 */
+	ret = aapi_runtime_resume(&pdev->dev);
+	if (ret < 0) {
+		dev_err(&pdev->dev, "couldn't resume device\n");
+		pm_runtime_put(&pdev->dev);
+		goto err_pwr_ctrl;
+	}
+
+	pm_runtime_set_active(&pdev->dev);
+	pm_runtime_enable(&pdev->dev);
+	pm_runtime_get_noresume(&pdev->dev);
+
+	return 0;
+
+err_pwr_ctrl:
+	aapi_power_free(aapi);
+err_radio:
+	aapi_radio_release(aapi);
+err_feedback_reg:
+	regulator_disable(aapi->feedback);
+err_dev_unreg:
+	aapi_unreg_device(aapi);
+
+	return ret;
+}
+
+static void orpal_aapi_remove(struct platform_device *pdev)
+{
+	struct aapi_device *aapi = platform_get_drvdata(pdev);
+
+	pm_runtime_put_sync_suspend(&pdev->dev);
+	pm_runtime_disable(&pdev->dev);
+
+	aapi_power_free(aapi);
+
+	aapi_radio_release(aapi);
+
+	/* release feedback regulator */
+	regulator_disable(aapi->feedback);
+
+	aapi_unreg_device(aapi);
+}
+
+static const struct of_device_id orpal_aapi_match[] = {
+	{ .compatible = AAPI_DRIVER_COMPATIBLE, },
+	{ /*sentinel*/ }
+};
+MODULE_DEVICE_TABLE(of, orpal_aapi_match);
+
+/*
+ * Declare device runtime PM callbacks.
+ */
+static const struct dev_pm_ops orpal_aapi_pm_ops = {
+	.runtime_resume	 = aapi_runtime_resume,
+	.runtime_suspend = aapi_runtime_suspend,
+};
+
+static struct platform_driver orpal_aapi_driver = {
+	.probe	= orpal_aapi_probe,
+	.remove	= orpal_aapi_remove,
+	.driver	= {
+		.name = DEV_NAME,
+		.owner = THIS_MODULE,
+		.of_match_table	= orpal_aapi_match,
+		.pm = &orpal_aapi_pm_ops,
+	},
+};
+
+static int __init orpal_aapi_init(void)
+{
+	int ret;
+
+	ret = alloc_chrdev_region(&aapi_dev, 0, MINORMASK, DEV_NAME);
+	if (ret < 0) {
+		pr_err("Unable to alloc chrdev region\n");
+		return ret;
+	}
+
+	aapi_class = class_create(CLASS_NAME);
+	if (IS_ERR(aapi_class)) {
+		pr_err("Unable to create class\n");
+		ret = PTR_ERR(aapi_class);
+		goto err_class;
+	}
+
+	ret = platform_driver_register(&orpal_aapi_driver);
+	if (ret) {
+		pr_err("Unable to register platform driver\n");
+		goto err_register;
+	}
+
+	return 0;
+
+err_register:
+        class_destroy(aapi_class);
+err_class:
+	unregister_chrdev(MAJOR(aapi_dev), DEV_NAME);
+
+	return ret;
+}
+module_init(orpal_aapi_init);
+
+
+static void __exit orpal_aapi_exit(void)
+{
+	platform_driver_unregister(&orpal_aapi_driver);
+
+	class_destroy(aapi_class);
+
+	unregister_chrdev(MAJOR(aapi_dev), DEV_NAME);
+}
+module_exit(orpal_aapi_exit);
+
+
+MODULE_AUTHOR("Sergey Suloev <ssuloev@orpaltech.com>");
+MODULE_DESCRIPTION("ORPAL AA-Pi antenna analyzer driver");
+MODULE_LICENSE("GPL v2");
diff --git a/drivers/vna/orpal_aapi_drv.h b/drivers/vna/orpal_aapi_drv.h
new file mode 100644
index 0000000..7bd063b
--- /dev/null
+++ b/drivers/vna/orpal_aapi_drv.h
@@ -0,0 +1,128 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/*
+ * The driver for ORPAL AA-Pi antenna analyzer
+ *
+ * Copyright 2018 Sergey Suloev <ssuloev@orpaltech.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ */
+
+#ifndef ORPAL_AAPI_DRV_H
+#define ORPAL_AAPI_DRV_H
+
+#include <linux/clk.h>
+#include <linux/cdev.h>
+#include <linux/device.h>
+#include <linux/gpio/consumer.h>
+#include <linux/iio/consumer.h>
+#include <linux/mutex.h>
+#include <linux/regulator/consumer.h>
+#include <linux/timer.h>
+#include <linux/workqueue.h>
+
+#define CLASS_NAME	"vna"
+#define DEV_NAME	"aapi"
+
+#define DEFAULT_SHDN_TIMEOUT_MS	3000
+
+#define AAPI_DRIVER_COMPATIBLE	"orpaltech,aapi-160"
+
+enum aapi_charger_status {
+	AAPI_CHRG_SHUTDOWN = 0,
+	AAPI_CHRG_STANDBY,
+	AAPI_CHRG_CHARGING,
+	AAPI_CHRG_END_OF_CHARGE,
+	AAPI_CHRG_TEMP_FAULT,
+	AAPI_CHRG_TEST_MODE,
+};
+
+/* structure to manage status lines */
+struct aapi_status_line {
+	struct gpio_desc *gpio;
+	unsigned int irq;
+	char name[32];
+};
+
+struct aapi_shutdown {
+	struct gpio_desc *ctrl;
+	u32 timeout;
+	struct aapi_status_line	req;
+};
+
+struct aapi_device_status {
+	enum aapi_charger_status charger;
+	int	fgauge_voltage;
+	int	fgauge_current;
+	bool	is_shutdown;
+};
+
+struct aapi_charger {
+	struct aapi_status_line	pg, s1, s2;
+	struct gpio_desc *enable;
+};
+
+struct aapi_device;
+
+struct aapi_radio_board {
+	struct regulator *power;
+
+	struct clk *clk0, *clk1;	/* generator outputs */
+
+	u32	xtal_freq;		/* xtal frequency (fixed on board) */
+	u32	initial_freq;		/* initial measure frequency */
+	u32	intermediate_freq;	/* intermediate frequency */
+};
+
+struct aapi_device {
+	struct device	dev;
+	unsigned int	id;
+	struct cdev	cdev;
+
+	struct aapi_radio_board	radio;
+
+	/* charger data */
+	struct aapi_charger	chrg;
+
+	struct aapi_shutdown	shdn;
+
+	/* queue for asynchronous readers */
+	struct fasync_struct	*fasync_queue;
+
+	/* device status, can be obtained via chardev read operation */
+	struct aapi_device_status status;
+	struct mutex	status_lock;
+
+	/* regulator to turn ON in order to provide feedback voltage
+	   to the ON-OFF push-button controller (optional) */
+	struct regulator	*feedback;
+
+	/* notification callbacks */
+	void (*power_status_changed)(struct aapi_device *aapi);
+};
+
+int aapi_set_measure_freq(struct aapi_device *aapi, u32 measure_freq);
+u32 aapi_get_measure_freq(struct aapi_device *aapi);
+u32 aapi_get_local_osc_freq(struct aapi_device *aapi);
+u32 aapi_get_intermediate_freq(struct aapi_device *aapi);
+
+void aapi_signal_fasync(struct aapi_device *aapi);
+
+/* Power module functions */
+int aapi_power_init(struct aapi_device *aapi);
+void aapi_power_free(struct aapi_device *aapi);
+int aapi_charger_get_status(struct aapi_device *aapi,
+			    enum aapi_charger_status *val);
+int aapi_charger_enable(struct aapi_device *aapi, int enable);
+int aapi_charger_is_enabled(struct aapi_device *aapi);
+
+
+#define aapi_from_dev(dev) \
+	container_of(dev, struct aapi_device, dev)
+
+#define aapi_from_fgauge(fg) \
+	container_of(fg, struct aapi_device, fgauge)
+
+#endif /* ORPAL_AAPI_DRV_H */
diff --git a/drivers/vna/orpal_aapi_power.c b/drivers/vna/orpal_aapi_power.c
new file mode 100644
index 0000000..cedf198
--- /dev/null
+++ b/drivers/vna/orpal_aapi_power.c
@@ -0,0 +1,415 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/*
+ * The driver for ORPAL AA-Pi antenna analyzer
+ *
+ * Copyright 2018 Sergey Suloev <ssuloev@orpaltech.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ */
+
+#define DEBUG
+
+#include <linux/delay.h>
+#include <linux/interrupt.h>
+#include <linux/irq.h>
+#include <linux/kernel.h>
+#include <linux/of.h>
+#include <linux/of_device.h>
+#include <linux/of_platform.h>
+#include <linux/platform_device.h>
+#include <linux/reboot.h>
+
+#include "orpal_aapi_drv.h"
+
+#define IRQF_TRIGGER_EDGE_BOTH	(IRQF_TRIGGER_RISING | IRQF_TRIGGER_FALLING)
+
+
+int aapi_charger_enable(struct aapi_device *aapi, int enable)
+{
+	/* set charger enable line accordingly */
+	gpiod_set_value_cansleep(aapi->chrg.enable, enable);
+
+	return 0;
+}
+
+int aapi_charger_is_enabled(struct aapi_device *aapi)
+{
+	int ret;
+
+	ret = gpiod_get_value(aapi->chrg.enable);
+	if (ret < 0)
+		dev_err(aapi->dev.parent, "failed to read charger enable\n");
+
+	return ret;
+}
+
+int aapi_charger_get_status(struct aapi_device *aapi,
+			    enum aapi_charger_status *val)
+{
+	mutex_lock(&aapi->status_lock);
+
+	*val = aapi->status.charger;
+
+	mutex_unlock(&aapi->status_lock);
+
+	return 0;
+}
+
+static int aapi_charger_get_pg(struct aapi_device *aapi, bool *val)
+{
+	int ret;
+
+	ret = gpiod_get_value(aapi->chrg.pg.gpio);
+	if (ret < 0) {
+		dev_err(aapi->dev.parent, "failed to read PG line\n");
+		return ret;
+	}
+
+	// hardware reports 0 in case power is good
+	// i.e. report "inverted" PG
+	*val = ( ret == 0 );
+
+	return 0;
+}
+
+static int aapi_charger_get_stat1(struct aapi_device *aapi, bool *val)
+{
+	int ret;
+
+	ret = gpiod_get_value(aapi->chrg.s1.gpio);
+	if (ret < 0) {
+		dev_err(aapi->dev.parent, "failed to read STAT1 line\n");
+		return ret;
+	}
+
+	// report STAT1 value "as is"
+	*val = ( ret > 0 );
+	return 0;
+}
+
+static int aapi_charger_get_stat2(struct aapi_device *aapi, bool *val)
+{
+	int ret;
+
+	ret = gpiod_get_value(aapi->chrg.s2.gpio);
+	if (ret < 0) {
+		dev_err(aapi->dev.parent, "failed to read STAT2 line\n");
+		return ret;
+	}
+
+	// report STAT2 value "as is"
+	*val = ( ret > 0 );
+	return 0;
+}
+
+static int aapi_charger_update_status(struct aapi_device *aapi)
+{
+	int ret;
+	bool pwr_good, stat1, stat2;
+	enum aapi_charger_status old_status = aapi->status.charger;
+
+	ret = aapi_charger_get_pg(aapi, &pwr_good);
+	if (ret)
+		return ret;
+
+	if (!pwr_good) {
+		aapi->status.charger = AAPI_CHRG_SHUTDOWN;
+		return 0;
+	}
+
+	ret = aapi_charger_get_stat1(aapi, &stat1);
+	if (ret)
+		return ret;
+
+	ret = aapi_charger_get_stat2(aapi, &stat2);
+	if (ret)
+		return ret;
+
+	if (stat1 && stat2) {
+		/*if (old_status == AAPI_CHRG_CHARGING)
+			aapi->status.charger = AAPI_CHRG_TEMP_FAULT;
+		else*/
+		/* TODO: is there a way to detect temp fault? */
+		aapi->status.charger = AAPI_CHRG_STANDBY;
+	}
+	else if (!stat1 && stat2)
+		aapi->status.charger = AAPI_CHRG_CHARGING;
+
+	else if (stat1 && !stat2)
+		aapi->status.charger = AAPI_CHRG_END_OF_CHARGE;
+
+	else /* if (!stat1 && !stat2) */
+		aapi->status.charger = AAPI_CHRG_TEST_MODE;
+
+	return 0;
+}
+
+static irqreturn_t aapi_status_line_irq_handler(int irq, void *dev_id)
+{
+	struct aapi_device *aapi = dev_id;
+	struct device *dev = aapi->dev.parent;
+	enum aapi_charger_status old_status;
+	bool is_changed = false;
+	int ret;
+
+
+	mutex_lock(&aapi->status_lock);
+
+	// read status from hardware
+	if (irq == aapi->shdn.req.irq) {
+		dev_dbg(dev, "shutdown request detected\n");
+
+		aapi->status.is_shutdown = 1;
+		is_changed = true;
+
+		// TODO: initiate power-off sequence (user space)
+	}
+	else if (irq == aapi->chrg.pg.irq ||
+		irq == aapi->chrg.s1.irq ||
+		irq == aapi->chrg.s2.irq) {
+
+		old_status = aapi->status.charger;
+
+		ret = aapi_charger_update_status(aapi);
+		if (ret == 0) {
+			is_changed = ( aapi->status.charger != old_status );
+			if (is_changed) {
+				dev_dbg(dev,
+					"charger status changed: old = %d, new = %d\n",
+					old_status, aapi->status.charger );
+			}
+		}
+	}
+
+	mutex_unlock(&aapi->status_lock);
+
+	if (is_changed && aapi->power_status_changed)
+		aapi->power_status_changed(aapi);
+
+	return IRQ_HANDLED;
+}
+
+static struct gpio_desc *aapi_get_gpiod(struct aapi_device *aapi,
+					const char *gpio_name,
+					enum gpiod_flags flags)
+{
+	struct device *dev = aapi->dev.parent;
+	struct gpio_desc *gpiod;
+
+	gpiod = gpiod_get(dev, gpio_name, flags);
+
+	if (gpiod == ERR_PTR(-ENOENT))
+		dev_dbg(dev, "no entry for gpio '%s'\n", gpio_name);
+	else if (gpiod == ERR_PTR(-EBUSY))
+		dev_dbg(dev, "gpio '%s' is busy\n", gpio_name);
+
+	if (IS_ERR(gpiod))
+		dev_err(dev, "gpio '%s' setup error\n", gpio_name);
+
+	return gpiod;
+}
+
+static int aapi_status_line_init(struct aapi_device *aapi,
+				 struct aapi_status_line *line,
+				 unsigned int irq_flags)
+{
+	struct device *dev = aapi->dev.parent;
+	int ret;
+
+	line->gpio = aapi_get_gpiod(aapi, line->name, GPIOD_IN);
+	if (IS_ERR(line->gpio))
+		return PTR_ERR(line->gpio);
+
+
+	ret = gpiod_to_irq(line->gpio);
+	if (ret < 0) {
+		dev_err(dev, "can't get irq for line '%s'\n", line->name);
+		goto err_cleanup;
+	}
+
+	line->irq = ret;
+
+	ret = request_irq(line->irq,
+			  aapi_status_line_irq_handler,
+			  irq_flags,
+			  dev_name(&aapi->dev),
+			  aapi);
+	if (ret) {
+		dev_err(dev, "failed to request irq %d: %d\n", line->irq, ret);
+		line->irq = 0;
+		goto err_cleanup;
+	}
+
+	dev_dbg(dev, "%s: status line '%s' ready, num=%d, irq=%d\n",
+		__func__, line->name, desc_to_gpio(line->gpio), line->irq);
+
+	return 0;
+
+err_cleanup:
+	gpiod_put(line->gpio);
+	line->gpio = NULL;
+
+	return 0;
+}
+
+static void aapi_status_line_free(struct aapi_device *aapi,
+				  struct aapi_status_line *line)
+{
+	if (!IS_ERR_OR_NULL(line->gpio)) {
+		gpiod_put(line->gpio);
+		line->gpio = NULL;
+	}
+
+	if (line->irq) {
+		free_irq(line->irq, aapi);
+		line->irq = 0;
+	}
+}
+
+static void aapi_power_gpio_put(struct aapi_device *aapi)
+{
+	if (!IS_ERR_OR_NULL(aapi->shdn.ctrl)) {
+		gpiod_put(aapi->shdn.ctrl);
+		aapi->shdn.ctrl = NULL;
+	}
+
+	if (!IS_ERR_OR_NULL(aapi->chrg.enable)) {
+		gpiod_put(aapi->chrg.enable);
+		aapi->chrg.enable = NULL;
+	}
+
+	aapi_status_line_free(aapi, &aapi->shdn.req);
+	aapi_status_line_free(aapi, &aapi->chrg.pg);
+	aapi_status_line_free(aapi, &aapi->chrg.s1);
+	aapi_status_line_free(aapi, &aapi->chrg.s2);
+}
+
+static int aapi_power_gpio_get(struct aapi_device *aapi)
+{
+	struct device *dev = aapi->dev.parent;
+	int ret;
+
+	dev_dbg(dev, "%s: get ownership over GPIO control lines\n", __func__);
+
+	/* shutdown control setup */
+	aapi->shdn.ctrl = aapi_get_gpiod(aapi,
+					 "shutdown-ctrl",
+					 GPIOD_OUT_LOW);
+	if (IS_ERR(aapi->shdn.ctrl)) {
+		dev_err(dev, "%s: can't get shutdown control line\n",
+			__func__);
+		return PTR_ERR(aapi->shdn.ctrl);
+	}
+
+	aapi->shdn.timeout = DEFAULT_SHDN_TIMEOUT_MS;
+	device_property_read_u32(dev, "shutdown-timeout-ms",
+				&aapi->shdn.timeout);
+
+	/* shutdown request line name */
+	strcpy(aapi->shdn.req.name, "shutdown-req");
+
+	/* charger status line names */
+	strcpy(aapi->chrg.pg.name, "charger-pg");
+	strcpy(aapi->chrg.s1.name, "charger-stat1");
+	strcpy(aapi->chrg.s2.name, "charger-stat2");
+
+        /* charger enable line */
+	aapi->chrg.enable = aapi_get_gpiod(aapi,
+					   "charger-en",
+					   GPIOD_OUT_HIGH);
+	if (IS_ERR(aapi->chrg.enable)) {
+		dev_err(dev, "%s: can't get charger enable line\n",
+			__func__);
+		return PTR_ERR(aapi->chrg.enable);
+	}
+
+	/* shutdown request line */
+	ret = aapi_status_line_init(aapi,
+				    &aapi->shdn.req,
+				    IRQF_TRIGGER_FALLING);
+	if (ret) {
+		dev_err(dev, "%s: can't get shutdown request line\n",
+			__func__);
+		goto err_put;
+	}
+
+	/* charger indicators */
+	ret = aapi_status_line_init(aapi,
+				    &aapi->chrg.s1,
+				    IRQF_TRIGGER_EDGE_BOTH);
+	if (ret) {
+		dev_err(dev, "%s: can't get charger S1 line\n", __func__);
+		goto err_put;
+	}
+
+	ret = aapi_status_line_init(aapi,
+				    &aapi->chrg.s2,
+				    IRQF_TRIGGER_EDGE_BOTH);
+	if (ret) {
+		dev_err(dev, "%s: can't get charger S2 line\n", __func__);
+		goto err_put;
+	}
+
+	ret = aapi_status_line_init(aapi,
+				    &aapi->chrg.pg,
+				    IRQF_TRIGGER_EDGE_BOTH);
+	if (ret) {
+		dev_err(dev, "%s: can't get charger PG line\n", __func__);
+		goto err_put;
+	}
+
+	return 0;
+
+err_put:
+	aapi_power_gpio_put(aapi);
+	return ret;
+}
+
+static void aapi_do_poweroff(void)
+{
+	struct device_node *np =
+		of_find_compatible_node(NULL, NULL, AAPI_DRIVER_COMPATIBLE);
+	struct platform_device *pdev = of_find_device_by_node(np);
+	struct aapi_device *aapi = platform_get_drvdata(pdev);
+
+	BUG_ON(!aapi->shdn.ctrl);
+
+	/* assert shutdown control line */
+	gpiod_set_value_cansleep(aapi->shdn.ctrl, 1);
+
+	mdelay(aapi->shdn.timeout);
+
+	pr_emerg("unable to poweroff system\n");
+}
+
+int aapi_power_init(struct aapi_device *aapi)
+{
+	int ret;
+
+	ret = aapi_power_gpio_get(aapi);
+	if (ret)
+		return ret;
+
+	/*
+	 * The pm_power_off function can already be assigned.
+	 * Let's override it.
+	 */
+	if (pm_power_off)
+		dev_warn(aapi->dev.parent, "%s: pm_power_off already claimed",
+			__func__);
+
+	pm_power_off = aapi_do_poweroff;
+
+	return 0;
+}
+
+void aapi_power_free(struct aapi_device *aapi)
+{
+	if (pm_power_off == aapi_do_poweroff)
+		pm_power_off = NULL;
+
+	aapi_power_gpio_put(aapi);
+}
diff --git a/drivers/vna/orpal_aapi_sysfs.c b/drivers/vna/orpal_aapi_sysfs.c
new file mode 100644
index 0000000..16f14cd
--- /dev/null
+++ b/drivers/vna/orpal_aapi_sysfs.c
@@ -0,0 +1,163 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/*
+ * The driver for ORPAL AA-Pi antenna analyzer
+ *
+ * Copyright 2018 Sergey Suloev <ssuloev@orpaltech.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ */
+
+#include <linux/clk.h>
+#include <linux/cdev.h>
+#include <linux/device.h>
+#include <linux/err.h>
+#include <linux/fs.h>
+#include <linux/gpio/consumer.h>
+#include <linux/kernel.h>
+#include <linux/kfifo.h>
+#include <linux/list.h>
+#include <linux/types.h>
+
+#include "orpal_aapi_drv.h"
+#include "orpal_aapi_sysfs.h"
+
+
+struct aapi_charger_status_desc {
+	const char *name;
+	enum aapi_charger_status status;
+};
+
+static struct aapi_charger_status_desc charger_desc[] = {
+	{ .status = AAPI_CHRG_SHUTDOWN, 	.name = "shutdown" },
+	{ .status = AAPI_CHRG_STANDBY,		.name = "standby" },
+	{ .status = AAPI_CHRG_CHARGING,		.name = "charging" },
+	{ .status = AAPI_CHRG_END_OF_CHARGE,	.name = "end_of_charge" },
+	{ .status = AAPI_CHRG_TEMP_FAULT,	.name = "temperature_fault" },
+	{ .status = AAPI_CHRG_TEST_MODE,	.name = "test_mode" },
+};
+
+static ssize_t measure_freq_show(struct device *dev,
+				 struct device_attribute *attr,
+				 char *buf)
+{
+	struct aapi_device *aapi = aapi_from_dev(dev);
+	u32 rate;
+
+	rate = aapi_get_measure_freq(aapi);
+
+	return sprintf(buf, "%d\n", rate);
+}
+
+static ssize_t measure_freq_store(struct device *dev,
+				  struct device_attribute *attr,
+				  const char *buf, size_t len)
+{
+	struct aapi_device *aapi = aapi_from_dev(dev);
+	u32 measure_freq;
+	int ret;
+
+	ret = kstrtou32(buf, 10, &measure_freq);
+	if (ret < 0)
+		return ret;
+
+	ret = aapi_set_measure_freq(aapi, measure_freq);
+	if (ret)
+		return ret;
+
+        return len;
+}
+
+static ssize_t local_osc_freq_show(struct device *dev,
+				   struct device_attribute *attr,
+				   char *buf)
+{
+	struct aapi_device *aapi = aapi_from_dev(dev);
+	u32 rate;
+
+	rate = aapi_get_local_osc_freq(aapi);
+
+	return sprintf(buf, "%d\n", rate);
+}
+
+static ssize_t intermediate_freq_show(struct device *dev,
+				      struct device_attribute *attr,
+				      char *buf)
+{
+        struct aapi_device *aapi = aapi_from_dev(dev);
+	u32 rate;
+
+	rate = aapi_get_intermediate_freq(aapi);
+
+        return sprintf(buf, "%d\n", rate);
+}
+
+static ssize_t charger_status_show(struct device *dev,
+				   struct device_attribute *attr,
+				   char *buf)
+{
+	struct aapi_device *aapi = aapi_from_dev(dev);
+	enum aapi_charger_status status;
+	int i, ret;
+
+	ret = aapi_charger_get_status(aapi, &status);
+	if (ret)
+		return ret;
+
+	for (i = 0; i < ARRAY_SIZE(charger_desc); i++) {
+		if (status == charger_desc[i].status)
+			return sprintf(buf, "%s\n", charger_desc[i].name);
+	}
+
+	return -EINVAL;
+}
+
+static ssize_t charger_enable_store(struct device *dev,
+				    struct device_attribute *attr,
+				    const char *buf, size_t len)
+{
+	struct aapi_device *aapi = aapi_from_dev(dev);
+	u32 enable;
+	int ret;
+
+	ret = kstrtou32(buf, 10, &enable);
+	if (ret < 0)
+		return ret;
+
+	ret = aapi_charger_enable(aapi, enable);
+	if (ret)
+		return ret;
+
+	return len;
+}
+
+static ssize_t charger_enable_show(struct device *dev,
+				   struct device_attribute *attr,
+				   char *buf)
+{
+	struct aapi_device *aapi = aapi_from_dev(dev);
+	int val;
+
+	val = aapi_charger_is_enabled(aapi);
+
+	return sprintf(buf, "%d\n", val);
+}
+
+
+static DEVICE_ATTR_RW(measure_freq);
+static DEVICE_ATTR_RO(local_osc_freq);
+static DEVICE_ATTR_RO(intermediate_freq);
+static DEVICE_ATTR_RO(charger_status);
+static DEVICE_ATTR_RW(charger_enable);
+
+
+struct attribute *aapi_attrs[] = {
+	&dev_attr_measure_freq.attr,
+	&dev_attr_local_osc_freq.attr,
+	&dev_attr_intermediate_freq.attr,
+	&dev_attr_charger_status.attr,
+	&dev_attr_charger_enable.attr,
+	NULL,
+};
diff --git a/drivers/vna/orpal_aapi_sysfs.h b/drivers/vna/orpal_aapi_sysfs.h
new file mode 100644
index 0000000..1f42e52
--- /dev/null
+++ b/drivers/vna/orpal_aapi_sysfs.h
@@ -0,0 +1,18 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/*
+ * The driver for ORPAL AA-Pi antenna analyzer (VNA)
+ *
+ * Copyright 2018 Sergey Suloev <ssuloev@orpaltech.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ */
+
+#ifndef ORPAL_AAPI_SYSFS_H
+#define ORPAL_AAPI_SYSFS_H
+
+extern struct attribute *aapi_attrs[];
+
+#endif /* ORPAL_AAPI_SYSFS_H */
-- 
2.43.0

