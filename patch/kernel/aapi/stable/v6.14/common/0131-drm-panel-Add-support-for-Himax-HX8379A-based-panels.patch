From 6faf7aece979c92b30485471bf3a3ca27d17203c Mon Sep 17 00:00:00 2001
From: Sergey <ssuloev@orpaltech.com>
Date: Tue, 25 Mar 2025 22:20:48 +0300
Subject: [PATCH] drm: panel: Add support for Himax HX8379A-based panels

---
 drivers/gpu/drm/panel/Kconfig               |  12 +
 drivers/gpu/drm/panel/Makefile              |   1 +
 drivers/gpu/drm/panel/panel-himax-hx8379a.c | 467 ++++++++++++++++++++
 3 files changed, 480 insertions(+)
 create mode 100644 drivers/gpu/drm/panel/panel-himax-hx8379a.c

diff --git a/drivers/gpu/drm/panel/Kconfig b/drivers/gpu/drm/panel/Kconfig
index d7469c5..98438db 100644
--- a/drivers/gpu/drm/panel/Kconfig
+++ b/drivers/gpu/drm/panel/Kconfig
@@ -173,6 +173,18 @@ config DRM_PANEL_HIMAX_HX83112A
 	  Say Y here if you want to enable support for Himax HX83112A-based
 	  display panels, such as the one found in the Fairphone 4 smartphone.
 
+config DRM_PANEL_HIMAX_HX8379A
+	tristate "Himax HX8379A-based MIPI-DSI panels"
+	depends on OF
+	depends on DRM_MIPI_DSI
+	depends on BACKLIGHT_CLASS_DEVICE
+	help
+	  Say Y if you want to enable support for MIPI-DSI panels
+	  based on the Himax HX8379A controller.
+
+	  To compile this driver as a module, choose M. The module will
+	  be called panel-himax-hx8379a.
+
 config DRM_PANEL_HIMAX_HX8394
 	tristate "HIMAX HX8394 MIPI-DSI LCD panels"
 	depends on OF
diff --git a/drivers/gpu/drm/panel/Makefile b/drivers/gpu/drm/panel/Makefile
index 7dcf726..d82e30c 100644
--- a/drivers/gpu/drm/panel/Makefile
+++ b/drivers/gpu/drm/panel/Makefile
@@ -18,6 +18,7 @@ obj-$(CONFIG_DRM_PANEL_FEIXIN_K101_IM2BA02) += panel-feixin-k101-im2ba02.o
 obj-$(CONFIG_DRM_PANEL_FEIYANG_FY07024DI26A30D) += panel-feiyang-fy07024di26a30d.o
 obj-$(CONFIG_DRM_PANEL_HIMAX_HX83102) += panel-himax-hx83102.o
 obj-$(CONFIG_DRM_PANEL_HIMAX_HX83112A) += panel-himax-hx83112a.o
+obj-$(CONFIG_DRM_PANEL_HIMAX_HX8379A) += panel-himax-hx8379a.o
 obj-$(CONFIG_DRM_PANEL_HIMAX_HX8394) += panel-himax-hx8394.o
 obj-$(CONFIG_DRM_PANEL_ILITEK_IL9322) += panel-ilitek-ili9322.o
 obj-$(CONFIG_DRM_PANEL_ILITEK_ILI9341) += panel-ilitek-ili9341.o
diff --git a/drivers/gpu/drm/panel/panel-himax-hx8379a.c b/drivers/gpu/drm/panel/panel-himax-hx8379a.c
new file mode 100644
index 0000000..b5f6e79
--- /dev/null
+++ b/drivers/gpu/drm/panel/panel-himax-hx8379a.c
@@ -0,0 +1,467 @@
+// SPDX-License-Identifier: GPL-2.0-only
+// Copyright (c) 2021-2025 ORPAL Technology, Inc.
+
+#define DEBUG
+
+#include <linux/delay.h>
+#include <linux/gpio/consumer.h>
+#include <linux/module.h>
+#include <linux/of.h>
+#include <linux/regulator/consumer.h>
+
+#include <drm/drm_mipi_dsi.h>
+#include <drm/drm_modes.h>
+#include <drm/drm_panel.h>
+
+#include <video/mipi_display.h>
+
+
+struct hx8379a {
+	struct drm_panel panel;
+	struct mipi_dsi_device *dsi;
+
+	struct regulator *power;
+	struct gpio_desc *reset;
+
+	const struct hx8379a_panel_desc *desc;
+};
+
+struct hx8379a_panel_desc {
+	const struct drm_display_mode *mode;
+	unsigned int lanes;
+	unsigned long mode_flags;
+	enum mipi_dsi_pixel_format format;
+	int (*init_sequence)(struct hx8379a *ctx);
+};
+
+static inline struct hx8379a *panel_to_hx8379a(struct drm_panel *panel)
+{
+	return container_of(panel, struct hx8379a, panel);
+}
+
+/*
+static int hx8379a_init(struct hx8379a *ctx)
+{
+        struct mipi_dsi_device *dsi = ctx->dsi;
+	struct device *dev = &dsi->dev;
+	int ret;
+
+        dsi_dcs_write_seq(dsi, 0xb9, 0xff, 0x83, 0x79);
+        dsi_dcs_write_seq(dsi, 0xb1,
+                          0x44, 0x18, 0x18, 0x31, 0x51, 0x90, 0xd0, 0xee, 0xd4,
+                          0x80, 0x38, 0x38, 0xf8, 0x44, 0x44, 0x42, 0x00, 0x80,
+                          0x30, 0x00);
+        dsi_dcs_write_seq(dsi, 0xb2,
+                          0x80, 0xfe, 0x0a, 0x03, 0x30, 0x50, 0x11, 0x42, 0x1d);
+        dsi_dcs_write_seq(dsi, 0xb4,
+                          0x01, 0x28, 0x00, 0x34, 0x00, 0x34, 0x17, 0x3a, 0x17,
+                          0x3a, 0xb0, 0x00, 0xff);
+        dsi_generic_write_seq(dsi, 0xcc, 0x02);
+        dsi_dcs_write_seq(dsi, 0xd2, 0x33);
+        dsi_dcs_write_seq(dsi, 0xd3,
+                          0x00, 0x07, 0x00, 0x00, 0x00, 0x06, 0x06, 0x32, 0x10,
+                          0x03, 0x00, 0x03, 0x03, 0x5f, 0x03, 0x5f, 0x00, 0x08,
+                          0x00, 0x08, 0x35, 0x33, 0x07, 0x07, 0x37, 0x07, 0x07,
+                          0x37, 0x07);
+        dsi_dcs_write_seq(dsi, 0xd5,
+                          0x18, 0x18, 0x19, 0x19, 0x18, 0x18, 0x20, 0x21, 0x24,
+                          0x25, 0x18, 0x18, 0x18, 0x18, 0x00, 0x01, 0x04, 0x05,
+                          0x02, 0x03, 0x06, 0x07, 0x18, 0x18, 0x18, 0x18, 0x18,
+                          0x18, 0x18, 0x18, 0x18, 0x18);
+        dsi_dcs_write_seq(dsi, 0xd6,
+                          0x18, 0x18, 0x18, 0x18, 0x19, 0x19, 0x25, 0x24, 0x21,
+                          0x20, 0x18, 0x18, 0x18, 0x18, 0x05, 0x04, 0x01, 0x00,
+                          0x03, 0x02, 0x07, 0x06, 0x18, 0x18, 0x18, 0x18, 0x18,
+                          0x18, 0x18, 0x18, 0x18, 0x18);
+        dsi_dcs_write_seq(dsi, 0xe0,
+                          0x00, 0x05, 0x09, 0x26, 0x26, 0x3e, 0x1e, 0x45, 0x08,
+                          0x0c, 0x0d, 0x17, 0x0e, 0x12, 0x15, 0x13, 0x14, 0x12,
+                          0x1f, 0x1f, 0x1f, 0x00, 0x05, 0x09, 0x26, 0x26, 0x3e,
+                          0x1e, 0x45, 0x08, 0x0c, 0x0d, 0x17, 0x0e, 0x12, 0x15,
+                          0x13, 0x14, 0x12, 0x1f, 0x1f, 0x1f);
+        dsi_dcs_write_seq(dsi, 0xb6, 0x54, 0x54);
+
+
+        ret = mipi_dsi_dcs_set_display_brightness(dsi, 0x00ff);
+        if (ret < 0) {
+                dev_err(dev, "Failed to set display brightness: %d\n", ret);
+                return ret;
+        }
+
+        dsi_dcs_write_seq(dsi, MIPI_DCS_WRITE_CONTROL_DISPLAY, 0x2c);
+        dsi_dcs_write_seq(dsi, MIPI_DCS_WRITE_POWER_SAVE, 0x01);
+
+
+	return 0;
+}*/
+
+
+static int truly_tda_fwvga0500g50089_init(struct hx8379a *ctx)
+{
+	struct mipi_dsi_multi_context dsi_ctx = { .dsi = ctx->dsi };
+
+	ctx->dsi->mode_flags |= MIPI_DSI_MODE_LPM;
+
+	/* Set EXTC */
+	mipi_dsi_dcs_write_seq_multi(&dsi_ctx, 0xB9, 0xFF, 0x83, 0x79);
+
+	/* Set MIPI */
+	mipi_dsi_dcs_write_seq_multi(&dsi_ctx, 0xBA, 0x51, 0x93);
+
+	/* Set POWER */
+	mipi_dsi_dcs_write_seq_multi(&dsi_ctx, 0xB1,
+				     0x00, 0x50, 0x24, 0xF5, 0x98, 0x08,
+				     0x11, 0x17, 0x77, 0x29, 0x31, 0x9A,
+				     0x1A, 0x12, 0x0B, 0x76, 0xF1, 0x00,
+				     0xE6, 0xE6, 0xE6, 0xE6, 0xE6, 0x00,
+				     0x04, 0x05, 0x0A, 0x0B, 0x04, 0x05,
+				     0x6F);
+
+	/* Set DISPLAY */
+	mipi_dsi_dcs_write_seq_multi(&dsi_ctx, 0xB2,
+				     0x00, 0x00, 0xFE, 0x0E, 0x0A, 0x19,
+				     0xE2, 0x00, 0xFF, 0x0E, 0x0A, 0x19,
+				     0x20);
+
+	/* Set CYC*/
+	mipi_dsi_dcs_write_seq_multi(&dsi_ctx, 0xB4,
+				     0x80, 0x12, 0x00, 0x32, 0x10, 0x03,
+				     0x54, 0x13, 0x67, 0x32, 0x13, 0x6B,
+				     0x39, 0x00, 0x42, 0x05, 0x37, 0x00,
+				     0x41, 0x08, 0x3C, 0x3C, 0x08, 0x00,
+				     0x40, 0x08, 0x28, 0x08, 0x30, 0x30,
+				     0x04);
+
+	/* Set GIP*/
+	mipi_dsi_dcs_write_seq_multi(&dsi_ctx, 0xD5,
+				     0x00, 0x00, 0x0A, 0x00, 0x01, 0x00,
+				     0x00, 0x06, 0x01, 0x01, 0x01, 0x23,
+				     0x45, 0x67, 0xAA, 0xBB, 0x88, 0x88,
+				     0x67, 0x45, 0x88, 0x88, 0x88, 0x88,
+				     0x88, 0x54, 0x10, 0x76, 0x54, 0x32,
+				     0xAA, 0xBB, 0x88, 0x88, 0x76, 0x10,
+				     0x88, 0x88, 0x88, 0x88, 0x88, 0x39,
+				     0x01, 0x00, 0x00, 0x00, 0x00);
+
+	/* Set GAMMA */
+	mipi_dsi_dcs_write_seq_multi(&dsi_ctx, 0xE0,
+				     0x79, 0x00, 0x01, 0x0F, 0x25, 0x26,
+				     0x3F, 0x33, 0x47, 0x0A, 0x11, 0x11,
+				     0x15, 0x17, 0x14, 0x16, 0x11, 0x17,
+				     0x00, 0x01, 0x0F, 0x25, 0x26, 0x3F,
+				     0x33, 0x47, 0x0A, 0x11, 0x11, 0x15,
+				     0x17, 0x14, 0x16, 0x11, 0x17);
+
+	/* Set PANEL*/
+	//mipi_dsi_dcs_write_seq_multi(&dsi_ctx, 0xCC, 0x02); /* NO rotation */
+	mipi_dsi_dcs_write_seq_multi(&dsi_ctx, 0xCC, 0x0E); /* 180 rotation */
+
+	/* Set VCOM */
+	mipi_dsi_dcs_write_seq_multi(&dsi_ctx, 0xB6,
+				     0x00, 0xAC, 0x00, 0xAC);
+
+	mipi_dsi_dcs_set_tear_on_multi(&dsi_ctx, MIPI_DSI_DCS_TEAR_MODE_VBLANK);
+
+	mipi_dsi_dcs_set_display_brightness_multi(&dsi_ctx, 0x00ff);
+
+//        mipi_dsi_dcs_write_seq_multi(&dsi_ctx, MIPI_DCS_WRITE_CONTROL_DISPLAY,
+//                                     0x2c);
+
+	return dsi_ctx.accum_err;
+}
+
+static int old_init(struct hx8379a *hx_ctx)
+{
+	struct mipi_dsi_multi_context ctx;
+	struct device *dev = &hx_ctx->dsi->dev;
+	int ret;
+
+	ctx.dsi = hx_ctx->dsi;
+	ctx.accum_err = 0;
+
+	/* SETEXTC: Set extension command (B9h) */
+	mipi_dsi_dcs_write_seq_multi(&ctx, 0xB9, 0xff,0x83,0x79);
+
+	/* NOTE: command not listed in the HX8379-A datasheet */
+	mipi_dsi_dcs_write_seq_multi(&ctx, 0xBA, 0x51,0x93);
+
+	/* SETPOWER: Set power command (B1h)*/
+	mipi_dsi_dcs_write_seq_multi(&ctx, 0xB1, 0x00,0x50,0x44,0xEA,0x8D,0x08,0x11,0x11,0x11,0x27,0x2F,0x9A,0x1A,0x42,0x0B,0x6E,0xF1,0x00,0xE6);
+
+	/* SETDISP: Set display related register (B2h) */
+	mipi_dsi_dcs_write_seq_multi(&ctx, 0xB2, 0x00,0x00,0xFE,0x08,0x04,0x19,0x22,0x00,0xFF,0x08,0x04,0x19,0x20);
+
+	/* SETCYC: Set display waveform cycles (B4h) */
+	mipi_dsi_dcs_write_seq_multi(&ctx, 0xB4, 0x80,0x08,0x00,0x32,0x10,0x03,0x32,0x13,0x70,0x32,0x10,0x08,0x37,0x01,0x28,0x07,0x37,0x08,
+					0x4C,0x20,0x44,0x44,0x08,0x00,0x40,0x08,0x28,0x08,0x30,0x30,0x04);
+
+	/* SETGIP: Set GIP command (D5h) */
+	mipi_dsi_dcs_write_seq_multi(&ctx, 0xD5, 0x00,0x00,0x0A,0x00,0x01,0x05,0x00,0x03,0x00,0x88,0x88,0x88,0x88,0x23,0x01,0x67,0x45,0x02,
+					0x13,0x88,0x88,0x88,0x88,0x88,0x88,0x88,0x88,0x88,0x88,0x54,0x76,0x10,0x32,0x31,0x20,0x88,0x88,
+					0x88,0x88,0x88,0x88,0x00,0x00,0x00,0x00,0x00,0x00);
+
+	/* SETGAMMA: Set gamma command (E0h) */
+	mipi_dsi_dcs_write_seq_multi(&ctx, 0xE0, 0x79,0x00,0x02,0x09,0x22,0x25,0x3F,0x2B,0x43,0x01,0x0D,0x10,0x15,0x17,0x16,0x16,0x13,0x18,
+					0x00,0x02,0x09,0x22,0x25,0x3F,0x2B,0x43,0x01,0x0D,0x10,0x15,0x17,0x16,0x16,0x13,0x18);
+
+	/* SETPANEL: set panel  (CCh) */
+	mipi_dsi_dcs_write_seq_multi(&ctx, 0xCC, 0x02);
+
+	/* SETVCOM: Set VCOM voltage (B6h) */
+	mipi_dsi_dcs_write_seq_multi(&ctx, 0xB6, 0x00,0x8B,0x00,0x8B);
+
+
+	/* NOTE: command not listed in the HX8379-A datasheet */
+	mipi_dsi_dcs_write_seq_multi(&ctx, 0xDE, 0x05,0x70,0x04);
+
+	/* Write CTRL display (53h) */
+	mipi_dsi_dcs_write_seq_multi(&ctx, MIPI_DCS_WRITE_CONTROL_DISPLAY, 0x20);
+
+
+	if (ctx.accum_err)
+		return ctx.accum_err;
+
+
+        ret = mipi_dsi_dcs_set_display_brightness(ctx.dsi, 0x00ff);
+        if (ret < 0) {
+                dev_err(dev, "Failed to set display brightness: %d\n", ret);
+                return ret;
+        }
+
+	return 0;
+}
+
+static const struct drm_display_mode truly_tda_fwvga0500g50089_mode = {
+        .clock          = 30000, /*((480 + 25 + 11 + 25) * (854 + 22 + 3 + 12) * 62 / 1000),*/
+        .hdisplay       = 480,
+        .hsync_start    = 480 + 25,
+        .hsync_end      = 480 + 25 + 11,
+        .htotal         = 480 + 25 + 11 + 25,
+        .vdisplay       = 854,
+        .vsync_start    = 854 + 22,
+        .vsync_end      = 854 + 22 + 3,
+        .vtotal         = 854 + 22 + 3 + 12,
+	.flags		= DRM_MODE_FLAG_PHSYNC | DRM_MODE_FLAG_PVSYNC,
+        .width_mm       = 62,
+        .height_mm      = 110,
+};
+
+static const struct hx8379a_panel_desc truly_tda_fwvga0500g50089_desc = {
+	.mode		= &truly_tda_fwvga0500g50089_mode,
+	.lanes		= 2,
+	.mode_flags	= MIPI_DSI_MODE_VIDEO /*| MIPI_DSI_MODE_VIDEO_BURST*/,
+	.format		= MIPI_DSI_FMT_RGB888,
+	.init_sequence	= truly_tda_fwvga0500g50089_init,
+};
+
+static int hx8379a_prepare(struct drm_panel *panel)
+{
+	struct hx8379a *ctx = panel_to_hx8379a(panel);
+	struct device *dev = &ctx->dsi->dev;
+	int ret;
+
+	dev_dbg(dev, "%s: prepare...\n", __func__);
+
+//	gpiod_set_value_cansleep(ctx->reset, 0);
+	gpiod_set_value_cansleep(ctx->reset, 1);
+
+	/* power up the panel */
+	ret = regulator_enable(ctx->power);
+	if (ret) {
+		dev_err(dev, "Failed to power on: %d\n", ret);
+		return ret;
+	}
+	msleep(20);
+
+//	gpiod_set_value_cansleep(ctx->reset, 1);
+//	usleep_range(3000, 5000);
+
+	gpiod_set_value_cansleep(ctx->reset, 0);
+	msleep(120);
+
+	dev_dbg(dev, "%s: ok\n", __func__);
+	return 0;
+}
+
+static int hx8379a_unprepare(struct drm_panel *panel)
+{
+	struct hx8379a *ctx = panel_to_hx8379a(panel);
+
+	dev_dbg(&ctx->dsi->dev, "%s: unprepare...\n", __func__);
+
+	gpiod_set_value_cansleep(ctx->reset, 1);
+
+	/* power down the panel */
+	regulator_disable(ctx->power);
+
+	return 0;
+}
+
+static int hx8379a_enable(struct drm_panel *panel)
+{
+	struct hx8379a *ctx = panel_to_hx8379a(panel);
+	struct device *dev = &ctx->dsi->dev;
+	struct mipi_dsi_multi_context dsi_ctx = { .dsi = ctx->dsi };
+	int ret;
+
+	dev_dbg(dev, "enable ...\n");
+
+	ret = ctx->desc->init_sequence(ctx);
+	if (ret) {
+		dev_err(dev, "Failed to init panel: %d\n", ret);
+		return ret;
+	}
+
+        mipi_dsi_dcs_exit_sleep_mode_multi(&dsi_ctx);
+        mipi_dsi_msleep(&dsi_ctx, 120);
+
+        mipi_dsi_dcs_set_display_on_multi(&dsi_ctx);
+        mipi_dsi_msleep(&dsi_ctx, 20);
+
+	dev_dbg(dev, "%s: ok\n", __func__);
+
+	return 0;
+}
+
+static int hx8379a_disable(struct drm_panel *panel)
+{
+	struct hx8379a *ctx = panel_to_hx8379a(panel);
+	struct mipi_dsi_multi_context dsi_ctx = { .dsi = ctx->dsi };
+	int ret;
+
+	dev_dbg(&ctx->dsi->dev, "disable ...\n");
+
+	/* OFF commands sent in HS mode */
+	ctx->dsi->mode_flags &= ~MIPI_DSI_MODE_LPM;
+
+        mipi_dsi_dcs_set_display_off_multi(&dsi_ctx);
+        mipi_dsi_msleep(&dsi_ctx, 150);
+
+        mipi_dsi_dcs_enter_sleep_mode_multi(&dsi_ctx);
+        mipi_dsi_msleep(&dsi_ctx, 150);
+
+	ctx->dsi->mode_flags |= MIPI_DSI_MODE_LPM;
+        return dsi_ctx.accum_err;
+}
+
+static int hx8379a_get_modes(struct drm_panel *panel,
+			     struct drm_connector *connector)
+{
+	struct hx8379a *ctx = panel_to_hx8379a(panel);
+	struct drm_display_mode *mode;
+
+	mode = drm_mode_duplicate(connector->dev, ctx->desc->mode);
+	if (!mode) {
+		dev_err(&ctx->dsi->dev, "Failed to add mode %ux%u@%u\n",
+			ctx->desc->mode->hdisplay, ctx->desc->mode->vdisplay,
+			drm_mode_vrefresh(ctx->desc->mode));
+		return -ENOMEM;
+	}
+
+	drm_mode_set_name(mode);
+
+	mode->type = DRM_MODE_TYPE_DRIVER | DRM_MODE_TYPE_PREFERRED;
+	connector->display_info.width_mm = mode->width_mm;
+	connector->display_info.height_mm = mode->height_mm;
+	drm_mode_probed_add(connector, mode);
+
+	return 1;
+}
+
+static const struct drm_panel_funcs hx8379a_panel_funcs = {
+	.prepare = hx8379a_prepare,
+	.unprepare = hx8379a_unprepare,
+	.enable = hx8379a_enable,
+	.disable = hx8379a_disable,
+	.get_modes = hx8379a_get_modes,
+};
+
+static int hx8379a_probe(struct mipi_dsi_device *dsi)
+{
+	struct device *dev = &dsi->dev;
+	struct hx8379a *ctx;
+	int ret;
+
+	dev_dbg(dev, "%s: probing...\n", __func__);
+
+	ctx = devm_kzalloc(dev, sizeof(*ctx), GFP_KERNEL);
+	if (!ctx)
+		return -ENOMEM;
+
+	mipi_dsi_set_drvdata(dsi, ctx);
+
+	ctx->dsi = dsi;
+	ctx->desc = of_device_get_match_data(dev);
+
+	dsi->mode_flags = ctx->desc->mode_flags;
+	dsi->format = ctx->desc->format;
+	dsi->lanes = ctx->desc->lanes;
+
+
+	ctx->power = devm_regulator_get(dev, "power");
+	if (IS_ERR(ctx->power))
+		return dev_err_probe(dev, PTR_ERR(ctx->power),
+					"Failed to get regulator\n");
+
+	ctx->reset = devm_gpiod_get(dev, "reset", GPIOD_OUT_HIGH);
+	if (IS_ERR(ctx->reset))
+		return dev_err_probe(dev, PTR_ERR(ctx->reset),
+					"Failed to get reset-gpios\n");
+
+	drm_panel_init(&ctx->panel, dev, &hx8379a_panel_funcs,
+			DRM_MODE_CONNECTOR_DSI);
+
+	ret = drm_panel_of_backlight(&ctx->panel);
+	if (ret)
+		return dev_err_probe(dev, ret, "Failed to get backlight\n");
+
+	drm_panel_add(&ctx->panel);
+
+	ret = mipi_dsi_attach(dsi);
+	if (ret < 0) {
+		dev_err(dev, "Failed to attach to DSI host: %d\n", ret);
+		return ret;
+	}
+
+	dev_dbg(dev, "%ux%u@%u %ubpp dsi %udl - ready\n",
+		ctx->desc->mode->hdisplay, ctx->desc->mode->vdisplay,
+		drm_mode_vrefresh(ctx->desc->mode),
+		mipi_dsi_pixel_format_to_bpp(dsi->format), dsi->lanes);
+
+	return 0;
+}
+
+static void hx8379a_remove(struct mipi_dsi_device *dsi)
+{
+	struct hx8379a *ctx = mipi_dsi_get_drvdata(dsi);
+	int ret;
+
+	ret = mipi_dsi_detach(dsi);
+	if (ret < 0)
+		dev_err(&dsi->dev, "Failed to detach from DSI host: %d\n", ret);
+
+	drm_panel_remove(&ctx->panel);
+}
+
+static const struct of_device_id hx8379a_of_match[] = {
+	{
+		.compatible = "truly,tda-fwvga0500g50089",
+		.data	    = &truly_tda_fwvga0500g50089_desc,
+	},
+	{ /* sentinel */ }
+};
+MODULE_DEVICE_TABLE(of, hx8379a_of_match);
+
+static struct mipi_dsi_driver hx8379a_driver = {
+	.probe = hx8379a_probe,
+	.remove = hx8379a_remove,
+	.driver = {
+		.name = "panel-himax-hx8379a",
+		.of_match_table = hx8379a_of_match,
+	},
+};
+module_mipi_dsi_driver(hx8379a_driver);
+
+MODULE_AUTHOR("Sergey Suloev <ssuloev@orpaltech.ru>");
+MODULE_DESCRIPTION("DRM driver for HX8379A-based MIPI-DSI panels");
+MODULE_LICENSE("GPL v2");
-- 
2.43.0

