From a0ea5d71ccd08859e8b1a667d2d71120c6a97dc8 Mon Sep 17 00:00:00 2001
From: Sergey <ssuloev@orpaltech.com>
Date: Sat, 15 Mar 2025 20:53:45 +0300
Subject: [PATCH] drm: panel: Add support for Himax HX8379A-based panels

---
 drivers/gpu/drm/panel/Kconfig               |  12 +
 drivers/gpu/drm/panel/Makefile              |   1 +
 drivers/gpu/drm/panel/panel-himax-hx8379a.c | 387 ++++++++++++++++++++
 3 files changed, 400 insertions(+)
 create mode 100644 drivers/gpu/drm/panel/panel-himax-hx8379a.c

diff --git a/drivers/gpu/drm/panel/Kconfig b/drivers/gpu/drm/panel/Kconfig
index d7469c5..98438db 100644
--- a/drivers/gpu/drm/panel/Kconfig
+++ b/drivers/gpu/drm/panel/Kconfig
@@ -173,6 +173,18 @@ config DRM_PANEL_HIMAX_HX83112A
 	  Say Y here if you want to enable support for Himax HX83112A-based
 	  display panels, such as the one found in the Fairphone 4 smartphone.
 
+config DRM_PANEL_HIMAX_HX8379A
+	tristate "Himax HX8379A-based MIPI-DSI panels"
+	depends on OF
+	depends on DRM_MIPI_DSI
+	depends on BACKLIGHT_CLASS_DEVICE
+	help
+	  Say Y if you want to enable support for MIPI-DSI panels
+	  based on the Himax HX8379A controller.
+
+	  To compile this driver as a module, choose M. The module will
+	  be called panel-himax-hx8379a.
+
 config DRM_PANEL_HIMAX_HX8394
 	tristate "HIMAX HX8394 MIPI-DSI LCD panels"
 	depends on OF
diff --git a/drivers/gpu/drm/panel/Makefile b/drivers/gpu/drm/panel/Makefile
index 7dcf726..d82e30c 100644
--- a/drivers/gpu/drm/panel/Makefile
+++ b/drivers/gpu/drm/panel/Makefile
@@ -18,6 +18,7 @@ obj-$(CONFIG_DRM_PANEL_FEIXIN_K101_IM2BA02) += panel-feixin-k101-im2ba02.o
 obj-$(CONFIG_DRM_PANEL_FEIYANG_FY07024DI26A30D) += panel-feiyang-fy07024di26a30d.o
 obj-$(CONFIG_DRM_PANEL_HIMAX_HX83102) += panel-himax-hx83102.o
 obj-$(CONFIG_DRM_PANEL_HIMAX_HX83112A) += panel-himax-hx83112a.o
+obj-$(CONFIG_DRM_PANEL_HIMAX_HX8379A) += panel-himax-hx8379a.o
 obj-$(CONFIG_DRM_PANEL_HIMAX_HX8394) += panel-himax-hx8394.o
 obj-$(CONFIG_DRM_PANEL_ILITEK_IL9322) += panel-ilitek-ili9322.o
 obj-$(CONFIG_DRM_PANEL_ILITEK_ILI9341) += panel-ilitek-ili9341.o
diff --git a/drivers/gpu/drm/panel/panel-himax-hx8379a.c b/drivers/gpu/drm/panel/panel-himax-hx8379a.c
new file mode 100644
index 0000000..75da82f
--- /dev/null
+++ b/drivers/gpu/drm/panel/panel-himax-hx8379a.c
@@ -0,0 +1,387 @@
+// SPDX-License-Identifier: GPL-2.0-only
+// Copyright (c) 2021-2025 ORPAL Technology, Inc.
+
+#define DEBUG
+
+#include <linux/delay.h>
+#include <linux/gpio/consumer.h>
+#include <linux/module.h>
+#include <linux/of.h>
+#include <linux/regulator/consumer.h>
+
+#include <drm/drm_mipi_dsi.h>
+#include <drm/drm_modes.h>
+#include <drm/drm_panel.h>
+
+#include <video/mipi_display.h>
+
+
+struct hx8379a {
+	struct drm_panel panel;
+	struct mipi_dsi_device *dsi;
+
+	struct regulator *power;
+	struct gpio_desc *reset;
+};
+
+static inline struct hx8379a *to_hx8379a(struct drm_panel *panel)
+{
+	return container_of(panel, struct hx8379a, panel);
+}
+
+/*
+static int hx8379a_init(struct hx8379a *ctx)
+{
+        struct mipi_dsi_device *dsi = ctx->dsi;
+	struct device *dev = &dsi->dev;
+	int ret;
+
+        dsi_dcs_write_seq(dsi, 0xb9, 0xff, 0x83, 0x79);
+        dsi_dcs_write_seq(dsi, 0xb1,
+                          0x44, 0x18, 0x18, 0x31, 0x51, 0x90, 0xd0, 0xee, 0xd4,
+                          0x80, 0x38, 0x38, 0xf8, 0x44, 0x44, 0x42, 0x00, 0x80,
+                          0x30, 0x00);
+        dsi_dcs_write_seq(dsi, 0xb2,
+                          0x80, 0xfe, 0x0a, 0x03, 0x30, 0x50, 0x11, 0x42, 0x1d);
+        dsi_dcs_write_seq(dsi, 0xb4,
+                          0x01, 0x28, 0x00, 0x34, 0x00, 0x34, 0x17, 0x3a, 0x17,
+                          0x3a, 0xb0, 0x00, 0xff);
+        dsi_generic_write_seq(dsi, 0xcc, 0x02);
+        dsi_dcs_write_seq(dsi, 0xd2, 0x33);
+        dsi_dcs_write_seq(dsi, 0xd3,
+                          0x00, 0x07, 0x00, 0x00, 0x00, 0x06, 0x06, 0x32, 0x10,
+                          0x03, 0x00, 0x03, 0x03, 0x5f, 0x03, 0x5f, 0x00, 0x08,
+                          0x00, 0x08, 0x35, 0x33, 0x07, 0x07, 0x37, 0x07, 0x07,
+                          0x37, 0x07);
+        dsi_dcs_write_seq(dsi, 0xd5,
+                          0x18, 0x18, 0x19, 0x19, 0x18, 0x18, 0x20, 0x21, 0x24,
+                          0x25, 0x18, 0x18, 0x18, 0x18, 0x00, 0x01, 0x04, 0x05,
+                          0x02, 0x03, 0x06, 0x07, 0x18, 0x18, 0x18, 0x18, 0x18,
+                          0x18, 0x18, 0x18, 0x18, 0x18);
+        dsi_dcs_write_seq(dsi, 0xd6,
+                          0x18, 0x18, 0x18, 0x18, 0x19, 0x19, 0x25, 0x24, 0x21,
+                          0x20, 0x18, 0x18, 0x18, 0x18, 0x05, 0x04, 0x01, 0x00,
+                          0x03, 0x02, 0x07, 0x06, 0x18, 0x18, 0x18, 0x18, 0x18,
+                          0x18, 0x18, 0x18, 0x18, 0x18);
+        dsi_dcs_write_seq(dsi, 0xe0,
+                          0x00, 0x05, 0x09, 0x26, 0x26, 0x3e, 0x1e, 0x45, 0x08,
+                          0x0c, 0x0d, 0x17, 0x0e, 0x12, 0x15, 0x13, 0x14, 0x12,
+                          0x1f, 0x1f, 0x1f, 0x00, 0x05, 0x09, 0x26, 0x26, 0x3e,
+                          0x1e, 0x45, 0x08, 0x0c, 0x0d, 0x17, 0x0e, 0x12, 0x15,
+                          0x13, 0x14, 0x12, 0x1f, 0x1f, 0x1f);
+        dsi_dcs_write_seq(dsi, 0xb6, 0x54, 0x54);
+
+
+        ret = mipi_dsi_dcs_set_tear_on(dsi, MIPI_DSI_DCS_TEAR_MODE_VBLANK);
+        if (ret < 0) {
+                dev_err(dev, "Failed to set tear on: %d\n", ret);
+                return ret;
+        }
+
+        ret = mipi_dsi_dcs_set_display_brightness(dsi, 0x00ff);
+        if (ret < 0) {
+                dev_err(dev, "Failed to set display brightness: %d\n", ret);
+                return ret;
+        }
+
+        dsi_dcs_write_seq(dsi, MIPI_DCS_WRITE_CONTROL_DISPLAY, 0x2c);
+        dsi_dcs_write_seq(dsi, MIPI_DCS_WRITE_POWER_SAVE, 0x01);
+
+
+	return 0;
+}*/
+
+
+static int hx8379a_init(struct hx8379a *ctx)
+{
+        struct mipi_dsi_device *dsi = ctx->dsi;
+	struct device *dev = &ctx->dsi->dev;
+	int ret;
+
+	/* SETEXTC: Set extension command (B9h) */
+	mipi_dsi_dcs_write_seq(dsi, 0xB9, 0xff, 0x83, 0x79);
+
+	/* NOTE: command not listed in the HX8379-A datasheet */
+	mipi_dsi_dcs_write_seq(dsi, 0xBA, 0x51,0x93);
+
+	/* SETPOWER: Set power command (B1h)*/
+	mipi_dsi_dcs_write_seq(dsi, 0xB1, 0x00,0x50,0x44,0xEA,0x8D,0x08,0x11,0x11,0x11,0x27,0x2F,0x9A,0x1A,0x42,0x0B,0x6E,0xF1,0x00,0xE6);
+
+	/* SETDISP: Set display related register (B2h) */
+	mipi_dsi_dcs_write_seq(dsi, 0xB2, 0x00,0x00,0xFE,0x08,0x04,0x19,0x22,0x00,0xFF,0x08,0x04,0x19,0x20);
+
+	/* SETCYC: Set display waveform cycles (B4h) */
+	mipi_dsi_dcs_write_seq(dsi, 0xB4, 0x80,0x08,0x00,0x32,0x10,0x03,0x32,0x13,0x70,0x32,0x10,0x08,0x37,0x01,0x28,0x07,0x37,0x08,
+					0x4C,0x20,0x44,0x44,0x08,0x00,0x40,0x08,0x28,0x08,0x30,0x30,0x04);
+
+	/* SETGIP: Set GIP command (D5h) */
+	mipi_dsi_dcs_write_seq(dsi, 0xD5, 0x00,0x00,0x0A,0x00,0x01,0x05,0x00,0x03,0x00,0x88,0x88,0x88,0x88,0x23,0x01,0x67,0x45,0x02,
+					0x13,0x88,0x88,0x88,0x88,0x88,0x88,0x88,0x88,0x88,0x88,0x54,0x76,0x10,0x32,0x31,0x20,0x88,0x88,
+					0x88,0x88,0x88,0x88,0x00,0x00,0x00,0x00,0x00,0x00);
+
+	/* SETGAMMA: Set gamma command (E0h) */
+	mipi_dsi_dcs_write_seq(dsi, 0xE0, 0x79,0x00,0x02,0x09,0x22,0x25,0x3F,0x2B,0x43,0x01,0x0D,0x10,0x15,0x17,0x16,0x16,0x13,0x18,
+					0x00,0x02,0x09,0x22,0x25,0x3F,0x2B,0x43,0x01,0x0D,0x10,0x15,0x17,0x16,0x16,0x13,0x18);
+
+
+	/* Set CABC control (C9h)*/
+	mipi_dsi_dcs_write_seq(dsi, 0xC9, 0x77,0xF6,0x30,0x01,0x00,0x80);
+
+
+	/* SETPANEL: set panel  (CCh) */
+	mipi_dsi_dcs_write_seq(dsi, 0xCC, 0x02);
+
+	/* SETVCOM: Set VCOM voltage (B6h) */
+	mipi_dsi_dcs_write_seq(dsi, 0xB6, 0x00,0x8B,0x00,0x8B);
+
+
+	/* NOTE: command not listed in the HX8379-A datasheet */
+	mipi_dsi_dcs_write_seq(dsi, 0xDE, 0x05,0x70,0x04);
+
+
+        ret = mipi_dsi_dcs_set_display_brightness(dsi, 0x00ff);
+        if (ret < 0) {
+                dev_err(dev, "Failed to set display brightness: %d\n", ret);
+                return ret;
+        }
+
+
+	return 0;
+}
+
+
+static int hx8379a_prepare(struct drm_panel *panel)
+{
+	struct hx8379a *ctx = to_hx8379a(panel);
+	struct device *dev = &ctx->dsi->dev;
+	int ret;
+
+	dev_dbg(dev, "prepare...\n");
+
+	gpiod_set_value_cansleep(ctx->reset, 0);
+
+	/* power up the panel */
+	ret = regulator_enable(ctx->power);
+	if (ret) {
+		dev_err(dev, "Failed to power on (ret = %d)\n", ret);
+		return ret;
+	}
+	msleep(20);
+
+	gpiod_set_value_cansleep(ctx->reset, 1);
+	usleep_range(3000, 5000);
+
+	gpiod_set_value_cansleep(ctx->reset, 0);
+	msleep(50);
+
+	ret = hx8379a_init(ctx);
+	if (ret < 0) {
+		dev_err(dev, "Failed to initialize panel: %d\n", ret);
+		return ret;
+	}
+
+	return 0;
+}
+
+static int hx8379a_unprepare(struct drm_panel *panel)
+{
+	struct hx8379a *ctx = to_hx8379a(panel);
+	struct device *dev = &ctx->dsi->dev;
+
+	dev_dbg(dev, "unprepare...\n");
+
+	gpiod_set_value_cansleep(ctx->reset, 1);
+
+	/* power down the panel */
+	regulator_disable(ctx->power);
+
+	return 0;
+}
+
+static int hx8379a_enable(struct drm_panel *panel)
+{
+	struct hx8379a *ctx = to_hx8379a(panel);
+	struct device *dev = &ctx->dsi->dev;
+	int ret;
+
+	dev_dbg(dev, "enable ...\n");
+
+	ret = mipi_dsi_dcs_exit_sleep_mode(ctx->dsi);
+	if (ret < 0) {
+		dev_err(dev, "Failed to exit sleep mode: %d\n", ret);
+		return ret;
+	}
+	msleep(120);
+
+	ret = mipi_dsi_dcs_set_display_on(ctx->dsi);
+	if (ret < 0) {
+		dev_err(dev, "Failed to set display on: %d\n", ret);
+		/* This will probably fail, but let's try orderly power off anyway. */
+		if (!mipi_dsi_dcs_enter_sleep_mode(ctx->dsi))
+			msleep(50);
+
+		return ret;
+	}
+	msleep(50);
+
+	return 0;
+}
+
+static int hx8379a_disable(struct drm_panel *panel)
+{
+	struct hx8379a *ctx = to_hx8379a(panel);
+	struct device *dev = &ctx->dsi->dev;
+	int ret;
+
+	dev_dbg(dev, "disable ...\n");
+
+	/* OFF commands sent in HS mode */
+	ctx->dsi->mode_flags &= ~MIPI_DSI_MODE_LPM;
+	ret = mipi_dsi_dcs_set_display_off(ctx->dsi);
+	if (ret < 0) {
+		dev_err(dev, "Failed to set display off: %d\n", ret);
+		return ret;
+	}
+	msleep(50);
+
+	ret = mipi_dsi_dcs_enter_sleep_mode(ctx->dsi);
+	if (ret < 0) {
+		dev_err(dev, "Failed to enter sleep mode: %d\n", ret);
+		return ret;
+	}
+	msleep(120);
+	ctx->dsi->mode_flags |= MIPI_DSI_MODE_LPM;
+
+	return 0;
+}
+
+static const struct drm_display_mode hx8379a_mode = {
+	.clock		= ((480 + 100 + 40 + 94) * (854 + 6 + 6 + 4) * 60 / 1000),
+	.hdisplay	= 480,
+	.hsync_start	= 480 + 100,
+	.hsync_end	= 480 + 100 + 40,
+	.htotal		= 480 + 100 + 40 + 94,
+	.vdisplay	= 854,
+	.vsync_start	= 854 + 6,
+	.vsync_end	= 854 + 6 + 6,
+	.vtotal		= 854 + 6 + 6 + 4,
+
+	.width_mm	= 62,
+	.height_mm	= 110,
+};
+
+static int hx8379a_get_modes(struct drm_panel *panel,
+			     struct drm_connector *connector)
+{
+	struct hx8379a *ctx = to_hx8379a(panel);
+	const struct drm_display_mode *desc_mode = &hx8379a_mode;
+	struct drm_display_mode *mode;
+
+	mode = drm_mode_duplicate(connector->dev, desc_mode);
+	if (!mode) {
+		dev_err(&ctx->dsi->dev, "Failed to add mode %ux%u@%u\n",
+			desc_mode->hdisplay, desc_mode->vdisplay,
+			drm_mode_vrefresh(desc_mode));
+		return -ENOMEM;
+	}
+
+	drm_mode_set_name(mode);
+
+	mode->type = DRM_MODE_TYPE_DRIVER | DRM_MODE_TYPE_PREFERRED;
+	connector->display_info.width_mm = mode->width_mm;
+	connector->display_info.height_mm = mode->height_mm;
+	drm_mode_probed_add(connector, mode);
+
+	return 1;
+}
+
+static const struct drm_panel_funcs hx8379a_panel_funcs = {
+	.prepare = hx8379a_prepare,
+	.unprepare = hx8379a_unprepare,
+	.enable = hx8379a_enable,
+	.disable = hx8379a_disable,
+	.get_modes = hx8379a_get_modes,
+};
+
+static int hx8379a_probe(struct mipi_dsi_device *dsi)
+{
+	struct device *dev = &dsi->dev;
+	const struct drm_display_mode *mode = &hx8379a_mode;
+	struct hx8379a *ctx;
+	int ret;
+
+	ctx = devm_kzalloc(dev, sizeof(*ctx), GFP_KERNEL);
+	if (!ctx)
+		return -ENOMEM;
+
+	mipi_dsi_set_drvdata(dsi, ctx);
+	ctx->dsi = dsi;
+
+	dsi->lanes	= 2;
+	dsi->format	= MIPI_DSI_FMT_RGB888;
+	dsi->mode_flags = MIPI_DSI_MODE_VIDEO | MIPI_DSI_MODE_VIDEO_BURST |
+			MIPI_DSI_MODE_LPM;
+
+	ctx->power = devm_regulator_get(dev, "power");
+	if (IS_ERR(ctx->power))
+		return dev_err_probe(dev, PTR_ERR(ctx->power),
+					"Failed to get regulator\n");
+
+	ctx->reset = devm_gpiod_get(dev, "reset", GPIOD_OUT_LOW);
+	if (IS_ERR(ctx->reset))
+		return dev_err_probe(dev, PTR_ERR(ctx->reset),
+					"Failed to get reset-gpios\n");
+
+	drm_panel_init(&ctx->panel, dev, &hx8379a_panel_funcs,
+			DRM_MODE_CONNECTOR_DSI);
+
+	ret = drm_panel_of_backlight(&ctx->panel);
+	if (ret)
+		return dev_err_probe(dev, ret, "Failed to get backlight\n");
+
+	drm_panel_add(&ctx->panel);
+
+	ret = mipi_dsi_attach(dsi);
+	if (ret < 0) {
+		dev_err(dev, "Failed to attach to DSI host: %d\n", ret);
+		return ret;
+	}
+
+        dev_dbg(dev, "%ux%u@%u %ubpp dsi %ulanes - ready\n",
+                mode->hdisplay, mode->vdisplay, drm_mode_vrefresh(mode),
+                mipi_dsi_pixel_format_to_bpp(dsi->format), dsi->lanes);
+
+	return 0;
+}
+
+static void hx8379a_remove(struct mipi_dsi_device *dsi)
+{
+	struct hx8379a *ctx = mipi_dsi_get_drvdata(dsi);
+	int ret;
+
+	ret = mipi_dsi_detach(dsi);
+	if (ret < 0)
+		dev_err(&dsi->dev, "Failed to detach from DSI host: %d\n", ret);
+
+	drm_panel_remove(&ctx->panel);
+}
+
+static const struct of_device_id hx8379a_of_match[] = {
+	{ .compatible = "truly,tda-fwvga0500g50089" },
+	{ /* sentinel */ }
+};
+MODULE_DEVICE_TABLE(of, hx8379a_of_match);
+
+static struct mipi_dsi_driver hx8379a_driver = {
+	.probe = hx8379a_probe,
+	.remove = hx8379a_remove,
+	.driver = {
+		.name = "panel-himax-hx8379a",
+		.of_match_table = hx8379a_of_match,
+	},
+};
+module_mipi_dsi_driver(hx8379a_driver);
+
+MODULE_AUTHOR("Sergey Suloev <ssuloev@orpaltech.com>");
+MODULE_DESCRIPTION("DRM driver for HX8379A-based MIPI-DSI panels");
+MODULE_LICENSE("GPL v2");
-- 
2.43.0

