From 69b638aecc3a95f88b4894f430eecbee06f59627 Mon Sep 17 00:00:00 2001
From: Sergey Suloev <ssuloev@orpaltech.com>
Date: Thu, 23 Jan 2020 00:48:17 +0300
Subject: [PATCH] drm/vc4: Add verbose debugging logs

---
 drivers/gpu/drm/vc4/vc4_dsi.c | 55 ++++++++++++++++++++++++++++++++---
 1 file changed, 51 insertions(+), 4 deletions(-)

diff --git a/drivers/gpu/drm/vc4/vc4_dsi.c b/drivers/gpu/drm/vc4/vc4_dsi.c
index c9ba83e..0bae81b 100644
--- a/drivers/gpu/drm/vc4/vc4_dsi.c
+++ b/drivers/gpu/drm/vc4/vc4_dsi.c
@@ -18,6 +18,8 @@
  * hopefully present.
  */
 
+#define DEBUG
+
 #include <linux/clk-provider.h>
 #include <linux/clk.h>
 #include <linux/completion.h>
@@ -553,6 +555,8 @@ dsi_dma_workaround_write(struct vc4_dsi *dsi, u32 offset, u32 val)
 	dma_cookie_t cookie;
 	int ret;
 
+	dev_dbg(&dsi->pdev->dev, "dsi write\n");
+
 	/* DSI0 should be able to write normally. */
 	if (!chan) {
 		writel(val, dsi->regs + offset);
@@ -810,8 +814,20 @@ static bool vc4_dsi_encoder_mode_fixup(struct drm_encoder *encoder,
 	/* Given the new pixel clock, adjust HFP to keep vrefresh the same. */
 	adjusted_mode->htotal = adjusted_mode->clock * mode->htotal /
 				mode->clock;
-	adjusted_mode->hsync_end += adjusted_mode->htotal - mode->htotal;
-	adjusted_mode->hsync_start += adjusted_mode->htotal - mode->htotal;
+//	adjusted_mode->hsync_end += adjusted_mode->htotal - mode->htotal;
+//	adjusted_mode->hsync_start += adjusted_mode->htotal - mode->htotal;
+	int diff = adjusted_mode->htotal - mode->htotal;
+	unsigned int hbp = (mode->htotal - mode->hsync_end);
+	unsigned int hsync = (mode->hsync_end - mode->hsync_start);
+	unsigned int hfp = (mode->hsync_start - mode->hdisplay) + diff;
+	adjusted_mode->hsync_start = mode->hdisplay + hfp;
+	adjusted_mode->hsync_end = mode->hdisplay + hfp + hsync;
+
+	dev_dbg(&dsi->pdev->dev,
+		"%s: divider = %d, pll_clock = %d, pixel_clock_hz = %d, adjusted: { clock = %d, htotal = %d, hsync_end = %d, hsync_start = %d }\n",
+		__func__, divider, pll_clock, pixel_clock_hz,
+		adjusted_mode->clock, adjusted_mode->htotal,
+		adjusted_mode->hsync_end, adjusted_mode->hsync_start);
 
 	return true;
 }
@@ -822,7 +838,7 @@ static void vc4_dsi_encoder_enable(struct drm_encoder *encoder)
 	struct vc4_dsi_encoder *vc4_encoder = to_vc4_dsi_encoder(encoder);
 	struct vc4_dsi *dsi = vc4_encoder->dsi;
 	struct device *dev = &dsi->pdev->dev;
-	bool debug_dump_regs = false;
+	bool debug_dump_regs = true;
 	unsigned long hs_clock;
 	u32 ui_ns;
 	/* Minimum LP state duration in escape clock cycles. */
@@ -832,6 +848,9 @@ static void vc4_dsi_encoder_enable(struct drm_encoder *encoder)
 	unsigned long phy_clock;
 	int ret;
 
+	dev_dbg(dev, "%s: pixel_clock_hz = %d, mode->htotal = %d, mode->hsync_start = %d, mode->hsync_end = %d\n",
+		__func__, pixel_clock_hz, mode->htotal, mode->hsync_start, mode->hsync_end);
+
 	ret = pm_runtime_get_sync(dev);
 	if (ret) {
 		DRM_ERROR("Failed to runtime PM enable on DSI%d\n", dsi->port);
@@ -855,6 +874,8 @@ static void vc4_dsi_encoder_enable(struct drm_encoder *encoder)
 			"Failed to set phy clock to %ld: %d\n", phy_clock, ret);
 	}
 
+	dev_dbg(dev, "%s: phy_clock = %d\n", __func__, phy_clock);
+
 	/* Reset the DSI and all its fifos. */
 	DSI_PORT_WRITE(CTRL,
 		       DSI_CTRL_SOFT_RESET_CFG |
@@ -1130,6 +1151,9 @@ static ssize_t vc4_dsi_host_transfer(struct mipi_dsi_host *host,
 				      DSI_TXPKT1C_CMD_CTRL);
 	}
 
+	dev_dbg(&dsi->pdev->dev, "dsi host transfer, cmd_fifo_len = %d, pix_fifo_len = %d\n",
+		cmd_fifo_len, pix_fifo_len);
+
 	for (i = 0; i < cmd_fifo_len; i++)
 		DSI_PORT_WRITE(TXPKT_CMD_FIFO, packet.payload[i]);
 	for (i = 0; i < pix_fifo_len; i++) {
@@ -1221,6 +1245,8 @@ static ssize_t vc4_dsi_host_transfer(struct mipi_dsi_host *host,
 		}
 	}
 
+	dev_dbg(&dsi->pdev->dev, "dsi host transfer complete\n");
+
 	return ret;
 
 reset_fifo_and_return:
@@ -1269,6 +1295,8 @@ static int vc4_dsi_host_attach(struct mipi_dsi_host *host,
 		return 0;
 	}
 
+	dev_dbg(&dsi->pdev->dev, "%s: divider = %d\n", __func__, dsi->divider);
+
 	if (!(dsi->mode_flags & MIPI_DSI_MODE_VIDEO)) {
 		dev_err(&dsi->pdev->dev,
 			"Only VIDEO mode panels supported currently.\n");
@@ -1339,6 +1367,8 @@ static irqreturn_t vc4_dsi_irq_handler(int irq, void *data)
 	u32 stat = DSI_PORT_READ(INT_STAT);
 	irqreturn_t ret = IRQ_NONE;
 
+	dev_dbg(&dsi->pdev->dev, "irq handler\n");
+
 	DSI_PORT_WRITE(INT_STAT, stat);
 
 	dsi_handle_error(dsi, &ret, stat,
@@ -1361,10 +1391,12 @@ static irqreturn_t vc4_dsi_irq_handler(int irq, void *data)
 	if (stat & (DSI1_INT_TXPKT1_DONE | DSI1_INT_PHY_DIR_RTF)) {
 		complete(&dsi->xfer_completion);
 		ret = IRQ_HANDLED;
+		dev_dbg(&dsi->pdev->dev, "irq is ok\n");
 	} else if (stat & DSI1_INT_HSTX_TO) {
 		complete(&dsi->xfer_completion);
 		dsi->xfer_result = -ETIMEDOUT;
 		ret = IRQ_HANDLED;
+		dev_dbg(&dsi->pdev->dev, "irq timed out\n");
 	}
 
 	return ret;
@@ -1450,6 +1482,8 @@ static int vc4_dsi_bind(struct device *dev, struct device *master, void *data)
 	dma_cap_mask_t dma_mask;
 	int ret;
 
+	dev_dbg(dev, "DSI bind\n");
+
 	match = of_match_device(vc4_dsi_dt_match, dev);
 	if (!match)
 		return -ENODEV;
@@ -1560,9 +1594,13 @@ static int vc4_dsi_bind(struct device *dev, struct device *master, void *data)
 		return ret;
 	}
 
+	dev_dbg(dev, "try to find a panel\n");
+
 	ret = drm_of_find_panel_or_bridge(dev->of_node, 0, 0,
 					  &panel, &dsi->bridge);
 	if (ret) {
+		dev_dbg(dev, "couldn't find a panel\n");
+
 		/* If the bridge or panel pointed by dev->of_node is not
 		 * enabled, just return 0 here so that we don't prevent the DRM
 		 * dev from being registered. Of course that means the DSI
@@ -1576,6 +1614,8 @@ static int vc4_dsi_bind(struct device *dev, struct device *master, void *data)
 	}
 
 	if (panel) {
+		dev_dbg(dev, "add panel\n");
+
 		dsi->bridge = devm_drm_panel_bridge_add_typed(dev, panel,
 							      DRM_MODE_CONNECTOR_DSI);
 		if (IS_ERR(dsi->bridge))
@@ -1619,6 +1659,8 @@ static int vc4_dsi_bind(struct device *dev, struct device *master, void *data)
 
 	pm_runtime_enable(dev);
 
+	dev_dbg(dev, "DSI bind complete\n");
+
 	return 0;
 }
 
@@ -1634,8 +1676,11 @@ static void vc4_dsi_unbind(struct device *dev, struct device *master,
 
 	vc4_dsi_encoder_destroy(dsi->encoder);
 
-	if (dsi->port == 1)
+	if (dsi->port == 1) {
+		dma_release_channel(dsi->reg_dma_chan);
+
 		vc4->dsi1 = NULL;
+	}
 }
 
 static const struct component_ops vc4_dsi_ops = {
@@ -1669,6 +1714,8 @@ static int vc4_dsi_dev_probe(struct platform_device *pdev)
 	dsi->dsi_host.dev = dev;
 	mipi_dsi_host_register(&dsi->dsi_host);
 
+	dev_dbg(dev, "add component\n");
+
 	ret = component_add(&pdev->dev, &vc4_dsi_ops);
 	if (ret) {
 		mipi_dsi_host_unregister(&dsi->dsi_host);
-- 
2.17.1

