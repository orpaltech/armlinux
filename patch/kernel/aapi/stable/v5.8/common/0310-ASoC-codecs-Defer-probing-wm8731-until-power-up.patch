From 1efa0f3c899aff8ee16b1d06451c80dbc4551233 Mon Sep 17 00:00:00 2001
From: Sergey Suloev <ssuloev@orpaltech.com>
Date: Mon, 24 Jun 2019 11:08:48 +0300
Subject: [PATCH] ASoC: codecs: Defer probing wm8731 until power-up

---
 sound/soc/codecs/wm8731.c | 59 +++++++++++++++++++++++++++++++++------
 1 file changed, 51 insertions(+), 8 deletions(-)

diff --git a/sound/soc/codecs/wm8731.c b/sound/soc/codecs/wm8731.c
index 6fd1bef..a1fb5ad 100644
--- a/sound/soc/codecs/wm8731.c
+++ b/sound/soc/codecs/wm8731.c
@@ -10,6 +10,8 @@
  * Based on wm8753.c by Liam Girdwood
  */
 
+#define DEBUG
+
 #include <linux/module.h>
 #include <linux/moduleparam.h>
 #include <linux/init.h>
@@ -51,6 +53,8 @@ struct wm8731_priv {
 	int playback_fs;
 	bool deemph;
 
+	struct regulator *power;
+
 	struct mutex lock;
 };
 
@@ -343,6 +347,9 @@ static int wm8731_hw_params(struct snd_pcm_substream *substream,
 
 	wm8731->playback_fs = params_rate(params);
 
+	dev_dbg(dai->dev, "%s: codec hw params: srate = %d\n",
+		__func__, srate);
+
 	snd_soc_component_write(component, WM8731_SRATE, srate);
 
 	/* bit size */
@@ -422,7 +429,6 @@ static int wm8731_set_dai_sysclk(struct snd_soc_dai *codec_dai,
 	return 0;
 }
 
-
 static int wm8731_set_dai_fmt(struct snd_soc_dai *codec_dai,
 		unsigned int fmt)
 {
@@ -486,9 +492,16 @@ static int wm8731_set_bias_level(struct snd_soc_component *component,
 				 enum snd_soc_bias_level level)
 {
 	struct wm8731_priv *wm8731 = snd_soc_component_get_drvdata(component);
+	enum snd_soc_bias_level old_level;
 	int ret;
 	u16 reg;
 
+	old_level = snd_soc_component_get_bias_level(component);
+
+	dev_dbg(component->dev,
+		"%s: bias level %d will change to %d\n",
+		__func__, old_level, level);
+
 	switch (level) {
 	case SND_SOC_BIAS_ON:
 		if (wm8731->mclk) {
@@ -500,7 +513,7 @@ static int wm8731_set_bias_level(struct snd_soc_component *component,
 	case SND_SOC_BIAS_PREPARE:
 		break;
 	case SND_SOC_BIAS_STANDBY:
-		if (snd_soc_component_get_bias_level(component) == SND_SOC_BIAS_OFF) {
+		if (old_level == SND_SOC_BIAS_OFF) {
 			ret = regulator_bulk_enable(ARRAY_SIZE(wm8731->supplies),
 						    wm8731->supplies);
 			if (ret != 0)
@@ -522,6 +535,7 @@ static int wm8731_set_bias_level(struct snd_soc_component *component,
 		regcache_mark_dirty(wm8731->regmap);
 		break;
 	}
+
 	return 0;
 }
 
@@ -535,9 +549,17 @@ static int wm8731_startup(struct snd_pcm_substream *substream,
 					   SNDRV_PCM_HW_PARAM_RATE,
 					   wm8731->constraints);
 
+	dev_dbg(dai->dev, "%s: codec startup\n", __func__);
+
 	return 0;
 }
 
+static void wm8731_shutdown(struct snd_pcm_substream *substream,
+	struct snd_soc_dai *dai)
+{
+	dev_dbg(dai->dev, "%s: codec shutdown\n", __func__);
+}
+
 #define WM8731_RATES SNDRV_PCM_RATE_8000_96000
 
 #define WM8731_FORMATS (SNDRV_PCM_FMTBIT_S16_LE | SNDRV_PCM_FMTBIT_S20_3LE |\
@@ -545,6 +567,7 @@ static int wm8731_startup(struct snd_pcm_substream *substream,
 
 static const struct snd_soc_dai_ops wm8731_dai_ops = {
 	.startup	= wm8731_startup,
+	.shutdown	= wm8731_shutdown,
 	.hw_params	= wm8731_hw_params,
 	.digital_mute	= wm8731_mute,
 	.set_sysclk	= wm8731_set_dai_sysclk,
@@ -644,7 +667,6 @@ static const struct of_device_id wm8731_of_match[] = {
 	{ .compatible = "wlf,wm8731", },
 	{ }
 };
-
 MODULE_DEVICE_TABLE(of, wm8731_of_match);
 
 static const struct regmap_config wm8731_regmap = {
@@ -756,34 +778,55 @@ static int wm8731_i2c_probe(struct i2c_client *i2c,
 
 	i2c_set_clientdata(i2c, wm8731);
 
+	wm8731->power = devm_regulator_get(&i2c->dev, "power");
+	if (IS_ERR(wm8731->power)) {
+		ret = PTR_ERR(wm8731->power);
+		dev_err(&i2c->dev, "couldn't get our regulator: %d\n", ret);
+		return ret;
+	}
+	/* power up */
+	ret = regulator_enable(wm8731->power);
+	if (ret) {
+		dev_err(&i2c->dev, "can't enable regulator: %d\n", ret);
+		return ret;
+	}
+
 	ret = wm8731_request_supplies(&i2c->dev, wm8731);
 	if (ret != 0)
-		return ret;
+		goto err_regulator;
 
 	wm8731->regmap = devm_regmap_init_i2c(i2c, &wm8731_regmap);
 	if (IS_ERR(wm8731->regmap)) {
 		ret = PTR_ERR(wm8731->regmap);
 		dev_err(&i2c->dev, "Failed to allocate register map: %d\n",
 			ret);
-		return ret;
+		goto err_regulator;
 	}
 
 	ret = wm8731_hw_init(&i2c->dev, wm8731);
 	if (ret != 0)
-		return ret;
+		goto err_regulator;
 
 	ret = devm_snd_soc_register_component(&i2c->dev,
 			&soc_component_dev_wm8731, &wm8731_dai, 1);
 	if (ret != 0) {
 		dev_err(&i2c->dev, "Failed to register CODEC: %d\n", ret);
-		return ret;
+		goto err_regulator;
 	}
 
 	return 0;
+
+err_regulator:
+	regulator_disable(wm8731->power);
+	return ret;
 }
 
-static int wm8731_i2c_remove(struct i2c_client *client)
+static int wm8731_i2c_remove(struct i2c_client *i2c)
 {
+	struct wm8731_priv *wm8731 = i2c_get_clientdata(i2c);
+
+	regulator_disable(wm8731->power);
+
 	return 0;
 }
 
-- 
2.17.1

