From f942a934cb6dbb36ebadb76ff088c415d4e48cf9 Mon Sep 17 00:00:00 2001
From: Sergey Suloev <ssuloev@orpaltech.com>
Date: Sun, 4 Oct 2020 15:08:46 +0300
Subject: [PATCH] drm/panel: Add support for Himax HX8379A-based panels

---
 drivers/gpu/drm/panel/Kconfig                 |   9 +
 drivers/gpu/drm/panel/Makefile                |   1 +
 drivers/gpu/drm/panel/panel-himax-hx8379a.c   | 320 ++++++++++++++
 .../gpu/drm/panel/panel-himax-hx8379a.orig.c  | 414 ++++++++++++++++++
 4 files changed, 744 insertions(+)
 create mode 100644 drivers/gpu/drm/panel/panel-himax-hx8379a.c
 create mode 100644 drivers/gpu/drm/panel/panel-himax-hx8379a.orig.c

diff --git a/drivers/gpu/drm/panel/Kconfig b/drivers/gpu/drm/panel/Kconfig
index 39055c1..7a9f5cc 100644
--- a/drivers/gpu/drm/panel/Kconfig
+++ b/drivers/gpu/drm/panel/Kconfig
@@ -97,6 +97,15 @@ config DRM_PANEL_FEIYANG_FY07024DI26A30D
 	  Say Y if you want to enable support for panels based on the
 	  Feiyang FY07024DI26A30-D MIPI-DSI interface.
 
+config DRM_PANEL_HIMAX_HX8379A
+	tristate "Himax HX8379A-based MIPI-DSI panels"
+	depends on OF
+	depends on DRM_MIPI_DSI
+	depends on BACKLIGHT_CLASS_DEVICE
+	help
+	  Say Y here if you want to enable support for Himax HX8379A-based
+	  MIPI-DSI panels. To compile this driver as a module, choose M here.
+
 config DRM_PANEL_ILITEK_IL9322
 	tristate "Ilitek ILI9322 320x240 QVGA panels"
 	depends on OF && SPI
diff --git a/drivers/gpu/drm/panel/Makefile b/drivers/gpu/drm/panel/Makefile
index de74f28..f736081 100644
--- a/drivers/gpu/drm/panel/Makefile
+++ b/drivers/gpu/drm/panel/Makefile
@@ -8,6 +8,7 @@ obj-$(CONFIG_DRM_PANEL_SIMPLE) += panel-simple.o
 obj-$(CONFIG_DRM_PANEL_ELIDA_KD35T133) += panel-elida-kd35t133.o
 obj-$(CONFIG_DRM_PANEL_FEIXIN_K101_IM2BA02) += panel-feixin-k101-im2ba02.o
 obj-$(CONFIG_DRM_PANEL_FEIYANG_FY07024DI26A30D) += panel-feiyang-fy07024di26a30d.o
+obj-$(CONFIG_DRM_PANEL_HIMAX_HX8379A) += panel-himax-hx8379a.o
 obj-$(CONFIG_DRM_PANEL_ILITEK_IL9322) += panel-ilitek-ili9322.o
 obj-$(CONFIG_DRM_PANEL_ILITEK_ILI9881C) += panel-ilitek-ili9881c.o
 obj-$(CONFIG_DRM_PANEL_INNOLUX_P079ZCA) += panel-innolux-p079zca.o
diff --git a/drivers/gpu/drm/panel/panel-himax-hx8379a.c b/drivers/gpu/drm/panel/panel-himax-hx8379a.c
new file mode 100644
index 0000000..2a4d358
--- /dev/null
+++ b/drivers/gpu/drm/panel/panel-himax-hx8379a.c
@@ -0,0 +1,320 @@
+// SPDX-License-Identifier: GPL-2.0-only
+/*
+ * The driver for Himax HX8379a-based display panels
+ *
+ * Copyright 2018-2020 Sergey Suloev <ssuloev@orpaltech.com>
+ */
+
+#define DEBUG
+
+#include <linux/delay.h>
+#include <linux/gpio/consumer.h>
+#include <linux/regulator/consumer.h>
+#include <linux/module.h>
+#include <linux/of.h>
+
+#include <video/mipi_display.h>
+
+#include <drm/drm_mipi_dsi.h>
+#include <drm/drm_modes.h>
+#include <drm/drm_panel.h>
+
+struct hx8379a_panel {
+	struct drm_panel panel;
+	struct mipi_dsi_device *dsi;
+	struct gpio_desc *reset_gpio;
+	struct regulator *power;
+	bool prepared;
+};
+
+static inline struct hx8379a_panel *to_hx8379a_panel(struct drm_panel *panel)
+{
+	return container_of(panel, struct hx8379a_panel, panel);
+}
+
+#define dsi_generic_write_seq(dsi, seq...) do {				\
+		static const u8 d[] = { seq };				\
+		int ret;						\
+		ret = mipi_dsi_generic_write(dsi, d, ARRAY_SIZE(d));	\
+		if (ret < 0)						\
+			return ret;					\
+	} while (0)
+
+#define dsi_dcs_write_seq(dsi, seq...) do {				\
+		static const u8 d[] = { seq };				\
+		int ret;						\
+		ret = mipi_dsi_dcs_write_buffer(dsi, d, ARRAY_SIZE(d));	\
+		if (ret < 0)						\
+			return ret;					\
+	} while (0)
+
+static void hx8379a_panel_reset(struct hx8379a_panel *ctx)
+{
+	gpiod_set_value_cansleep(ctx->reset_gpio, 0);
+	msleep(20);
+	gpiod_set_value_cansleep(ctx->reset_gpio, 1);
+	usleep_range(2000, 3000);
+	gpiod_set_value_cansleep(ctx->reset_gpio, 0);
+	msleep(20);
+}
+
+static int hx8379a_panel_on(struct hx8379a_panel *ctx)
+{
+	struct mipi_dsi_device *dsi = ctx->dsi;
+	struct device *dev = &dsi->dev;
+	int ret;
+
+	dsi->mode_flags |= MIPI_DSI_MODE_LPM;
+
+	dsi_dcs_write_seq(dsi, 0xb9, 0xff, 0x83, 0x79);
+	dsi_dcs_write_seq(dsi, 0xba, 0x51, 0x93);
+	dsi_dcs_write_seq(dsi, 0xb1,
+			  0x00, 0x50, 0x24, 0xea, 0x51, 0x08, 0x11, 0x10, 0xf0,
+			  0x27, 0x2f, 0x9a, 0x1a, 0x42, 0x0b, 0x7a, 0xf1, 0x00,
+			  0xe6);
+	dsi_dcs_write_seq(dsi, 0xb2,
+			  0x00, 0x00, 0xfe, 0x07, 0x03, 0x19, 0x44, 0x00, 0xff,
+			  0x07, 0x03, 0x19, 0x20);
+	dsi_dcs_write_seq(dsi, 0xb4,
+			  0x82, 0x08, 0x00, 0x32, 0x10, 0x03, 0x32, 0x13, 0x70,
+			  0x32, 0x10, 0x08, 0x37, 0x01, 0x28, 0x07, 0x37, 0x08,
+			  0x3c, 0x08, 0x3e, 0x3e, 0x08, 0x00, 0x40, 0x08, 0x28,
+			  0x08, 0x30, 0x30, 0x04);
+	dsi_generic_write_seq(dsi, 0xcc, 0x02);
+	dsi_dcs_write_seq(dsi, 0xd5,
+			  0x00, 0x00, 0x0a, 0x00, 0x01, 0x05, 0x00, 0x03, 0x00,
+			  0x88, 0x88, 0x88, 0x88, 0x23, 0x01, 0x67, 0x45, 0x02,
+			  0x13, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88,
+			  0x88, 0x88, 0x54, 0x76, 0x10, 0x32, 0x31, 0x20, 0x88,
+			  0x88, 0x88, 0x88, 0x88, 0x88, 0x00, 0x00, 0x00, 0x00,
+			  0x00, 0x00);
+	dsi_dcs_write_seq(dsi, 0xe0,
+			  0x79, 0x00, 0x0f, 0x14, 0x22, 0x22, 0x39, 0x2f, 0x43,
+			  0x04, 0x0a, 0x12, 0x14, 0x17, 0x15, 0x16, 0x12, 0x16,
+			  0x00, 0x0f, 0x14, 0x22, 0x22, 0x39, 0x2f, 0x43, 0x04,
+			  0x0a, 0x12, 0x14, 0x17, 0x15, 0x16, 0x12, 0x16);
+	dsi_dcs_write_seq(dsi, 0xb6, 0x00, 0x9c, 0x00, 0x9c);
+
+	ret = mipi_dsi_dcs_exit_sleep_mode(dsi);
+	if (ret < 0) {
+		dev_err(dev, "Failed to exit sleep mode: %d\n", ret);
+		return ret;
+	}
+	msleep(150);
+
+	ret = mipi_dsi_dcs_set_display_on(dsi);
+	if (ret < 0) {
+		dev_err(dev, "Failed to set display on: %d\n", ret);
+		return ret;
+	}
+	usleep_range(10000, 11000);
+
+	return 0;
+}
+
+static int hx8379a_panel_off(struct hx8379a_panel *ctx)
+{
+	struct mipi_dsi_device *dsi = ctx->dsi;
+	struct device *dev = &dsi->dev;
+	int ret;
+
+	dsi->mode_flags &= ~MIPI_DSI_MODE_LPM;
+
+	ret = mipi_dsi_dcs_set_display_off(dsi);
+	if (ret < 0) {
+		dev_err(dev, "Failed to set display off: %d\n", ret);
+		return ret;
+	}
+	msleep(50);
+
+	ret = mipi_dsi_dcs_enter_sleep_mode(dsi);
+	if (ret < 0) {
+		dev_err(dev, "Failed to enter sleep mode: %d\n", ret);
+		return ret;
+	}
+	msleep(120);
+
+	return 0;
+}
+
+static int hx8379a_panel_prepare(struct drm_panel *panel)
+{
+	struct hx8379a_panel *ctx = to_hx8379a_panel(panel);
+	struct device *dev = &ctx->dsi->dev;
+	int ret;
+
+	if (ctx->prepared)
+		return 0;
+
+	ret = regulator_enable(ctx->power);
+	if (ret < 0) {
+		dev_err(dev, "failed to power on: %d\n", ret);
+		return ret;
+	}
+	usleep_range(5000, 10000);
+
+	hx8379a_panel_reset(ctx);
+
+	ret = hx8379a_panel_on(ctx);
+	if (ret < 0) {
+		dev_err(dev, "Failed to initialize panel: %d\n", ret);
+		goto err_exit;
+	}
+
+	ctx->prepared = true;
+	return 0;
+
+err_exit:
+	gpiod_set_value_cansleep(ctx->reset_gpio, 1);
+	regulator_disable(ctx->power);
+	return ret;
+}
+
+static int hx8379a_panel_unprepare(struct drm_panel *panel)
+{
+	struct hx8379a_panel *ctx = to_hx8379a_panel(panel);
+	struct device *dev = &ctx->dsi->dev;
+	int ret;
+
+	if (!ctx->prepared)
+		return 0;
+
+	ret = hx8379a_panel_off(ctx);
+	if (ret < 0)
+		dev_err(dev, "Failed to un-initialize panel: %d\n", ret);
+
+	gpiod_set_value_cansleep(ctx->reset_gpio, 0);
+	regulator_disable(ctx->power);
+
+	ctx->prepared = false;
+	return 0;
+}
+
+static const struct drm_display_mode hx8379a_panel_mode = {
+	.clock		= (480 + 100 + 40 + 94) * (854 + 6 + 6 + 4) * 60 / 1000,
+
+	.hdisplay	= 480,
+	.hsync_start	= 480 + 100,
+	.hsync_end	= 480 + 100 + 40,
+	.htotal		= 480 + 100 + 40 + 94,
+
+	.vdisplay	= 854,
+	.vsync_start	= 854 + 6,
+	.vsync_end	= 854 + 6 + 6,
+	.vtotal		= 854 + 6 + 6 + 4,
+	.vrefresh	= 60,
+
+	.width_mm	= 62,
+	.height_mm	= 110,
+};
+
+static int hx8379a_panel_get_modes(struct drm_panel *panel,
+				   struct drm_connector *connector)
+{
+	struct drm_display_mode *mode;
+
+	mode = drm_mode_duplicate(connector->dev, &hx8379a_panel_mode);
+	if (!mode)
+		return -ENOMEM;
+
+	drm_mode_set_name(mode);
+
+	mode->type = DRM_MODE_TYPE_DRIVER | DRM_MODE_TYPE_PREFERRED;
+	connector->display_info.width_mm = mode->width_mm;
+	connector->display_info.height_mm = mode->height_mm;
+	drm_mode_probed_add(connector, mode);
+
+	return 1;
+}
+
+static const struct drm_panel_funcs hx8379a_panel_funcs = {
+	.prepare = hx8379a_panel_prepare,
+	.unprepare = hx8379a_panel_unprepare,
+	.get_modes = hx8379a_panel_get_modes,
+};
+
+static int hx8379a_panel_probe(struct mipi_dsi_device *dsi)
+{
+	struct device *dev = &dsi->dev;
+	struct hx8379a_panel *ctx;
+	int ret;
+
+	ctx = devm_kzalloc(dev, sizeof(*ctx), GFP_KERNEL);
+	if (!ctx)
+		return -ENOMEM;
+
+	ctx->power = devm_regulator_get(dev, "power");
+	if (IS_ERR(ctx->power)) {
+		ret = PTR_ERR(ctx->power);
+		if (ret != -EPROBE_DEFER)
+			dev_err(dev, "Couldn't get our regulator: %d\n", ret);
+		return ret;
+	}
+
+	ctx->reset_gpio = devm_gpiod_get(dev, "reset", GPIOD_OUT_LOW);
+	if (IS_ERR(ctx->reset_gpio)) {
+		ret = PTR_ERR(ctx->reset_gpio);
+		dev_err(dev, "Failed to get reset-gpios: %d\n", ret);
+		return ret;
+	}
+
+	ctx->dsi = dsi;
+	mipi_dsi_set_drvdata(dsi, ctx);
+
+	dsi->lanes = 2;
+	dsi->format = MIPI_DSI_FMT_RGB888;
+	dsi->mode_flags = MIPI_DSI_MODE_VIDEO | MIPI_DSI_MODE_VIDEO_BURST |
+			  MIPI_DSI_MODE_VIDEO_HSE | MIPI_DSI_MODE_EOT_PACKET |
+			  MIPI_DSI_CLOCK_NON_CONTINUOUS;
+
+	drm_panel_init(&ctx->panel, dev, &hx8379a_panel_funcs,
+		       DRM_MODE_CONNECTOR_DSI);
+
+	ret = drm_panel_add(&ctx->panel);
+	if (ret < 0) {
+		dev_err(dev, "Failed to add panel: %d\n", ret);
+		return ret;
+	}
+
+	ret = mipi_dsi_attach(dsi);
+	if (ret < 0) {
+		dev_err(dev, "Failed to attach to DSI host: %d\n", ret);
+		return ret;
+	}
+
+	return 0;
+}
+
+static int hx8379a_panel_remove(struct mipi_dsi_device *dsi)
+{
+	struct hx8379a_panel *ctx = mipi_dsi_get_drvdata(dsi);
+	int ret;
+
+	ret = mipi_dsi_detach(dsi);
+	if (ret < 0)
+		dev_err(&dsi->dev, "Failed to detach from DSI host: %d\n", ret);
+
+	drm_panel_remove(&ctx->panel);
+
+	return 0;
+}
+
+static const struct of_device_id hx8379a_panel_of_match[] = {
+	{ .compatible = "truly,tda-fwvga0500g50089" },
+	{ /* sentinel */ }
+};
+MODULE_DEVICE_TABLE(of, hx8379a_panel_of_match);
+
+static struct mipi_dsi_driver hx8379a_panel_driver = {
+	.probe = hx8379a_panel_probe,
+	.remove = hx8379a_panel_remove,
+	.driver = {
+		.name = "panel-himax-hx8379a",
+		.of_match_table = hx8379a_panel_of_match,
+	},
+};
+module_mipi_dsi_driver(hx8379a_panel_driver);
+
+MODULE_AUTHOR("Sergey Suloev <ssuloev@orpaltech.com>");
+MODULE_DESCRIPTION("The driver for Himax HX8379a-based display panels");
+MODULE_LICENSE("GPL v2");
diff --git a/drivers/gpu/drm/panel/panel-himax-hx8379a.orig.c b/drivers/gpu/drm/panel/panel-himax-hx8379a.orig.c
new file mode 100644
index 0000000..ca1d788
--- /dev/null
+++ b/drivers/gpu/drm/panel/panel-himax-hx8379a.orig.c
@@ -0,0 +1,414 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * The driver for Himax HX8379A-based MIPI-DSI panels
+ *
+ * Copyright 2018-2020 Sergey Suloev <ssuloev@orpaltech.com>
+ */
+
+#define DEBUG
+
+#include <linux/delay.h>
+#include <linux/device.h>
+#include <linux/err.h>
+#include <linux/errno.h>
+#include <linux/fb.h>
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/of_device.h>
+
+#include <linux/gpio/consumer.h>
+#include <linux/regulator/consumer.h>
+#include <linux/reset.h>
+
+#include <drm/drm_mipi_dsi.h>
+#include <drm/drm_modes.h>
+#include <drm/drm_panel.h>
+#include <drm/drm_print.h>
+
+#include <video/mipi_display.h>
+
+
+enum hx8379a_init_type {
+	INIT_CMD = 1,
+	INIT_DELAY,
+};
+
+struct hx8379a_init_instr {
+	int type;
+	size_t len;
+	const char *data;
+};
+
+#define _INIT_CMD(...) { \
+	.type = INIT_CMD, \
+	.len = sizeof((char[]){__VA_ARGS__}), \
+	.data = (char[]){__VA_ARGS__} \
+}
+#define _INIT_DELAY(ms) { \
+	.type = INIT_DELAY, \
+	.len = (ms), \
+}
+
+struct hx8379a_panel_quirks {
+	unsigned long flags;
+	unsigned int lanes;
+
+	const struct drm_display_mode *mode;
+	const struct hx8379a_init_instr *init_cmds;
+
+	/**
+	 * @width: width (in mm) of the panel's active display area
+	 * @height: height (in mm) of the panel's active display area
+	 */
+	struct {
+		u32	width;
+		u32	height;
+	} size;
+};
+
+struct hx8379a_panel {
+	struct drm_panel	panel;
+	struct mipi_dsi_device	*dsi;
+
+	struct reset_control	*rstc;
+	struct regulator	*power;
+
+	const struct hx8379a_panel_quirks *quirks;
+
+	bool prepared;
+};
+
+static const struct hx8379a_init_instr truly_tda_fwvga0500g50008_init[] = {
+	// Set EXTC
+	_INIT_CMD(0xB9, 0xFF,0x83,0x79),
+
+	_INIT_CMD(0xBA,	0x51,0x93),
+
+	// Set POWER
+	_INIT_CMD(0xB1,	0x00,0x50,0x24,0xEA,0x51,0x08,0x11,0x10,0xF0,0x27,
+			0x2F,0x9A,0x1A,0x42,0x0B,0x7A,0xF1,0x00,0xE6),
+
+	// Set DISP
+	_INIT_CMD(0xB2,	0x00,0x00,0xFE,0x07,0x03,0x19,0x44,0x00,0xFF,0x07,
+			0x03,0x19,0x20),
+
+	// Set CYC
+	_INIT_CMD(0xB4,	0x82,0x08,0x00,0x32,0x10,0x03,0x32,0x13,0x70,0x32,
+			0x10,0x08,0x37,0x01,0x28,0x07,0x37,0x08,0x3C,0x08,
+			0x3E,0x3E,0x08,0x00,0x40,0x08,0x28,0x08,0x30,0x30,
+			0x04),
+
+	// Set GIP
+	_INIT_CMD(0xD5,	0x00,0x00,0x0A,0x00,0x01,0x05,0x00,0x03,0x00,0x88,
+			0x88,0x88,0x88,0x23,0x01,0x67,0x45,0x02,0x13,0x88,
+			0x88,0x88,0x88,0x88,0x88,0x88,0x88,0x88,0x88,0x54,
+			0x76,0x10,0x32,0x31,0x20,0x88,0x88,0x88,0x88,0x88,
+			0x88,0x00,0x00,0x00,0x00,0x00,0x00),
+
+	// Set GAMMA
+	_INIT_CMD(0xE0,	0x79,0x00,0x08,0x0F,0x3C,0x3E,0x3F,0x22,0x4D,0x07,
+			0x0D,0x0D,0x10,0x11,0x10,0x14,0x11,0x17,0x00,0x09,
+			0x0F,0x3C,0x3D,0x3F,0x22,0x4D,0x07,0x0C,0x0C,0x10,
+			0x11,0x10,0x13,0x12,0x17),
+
+	// Set PANEL
+	_INIT_CMD(0xCC,	0x02),
+
+	// Set VCOM
+	_INIT_CMD(0xB6,	0x00,0x9C,0x00,0x9C),
+
+	_INIT_CMD(0x53, 0x00),
+
+	{ /*EOF*/ },
+};
+
+/*
+ * The horizontal and vertical timings
+ */
+#define HX8379A_HSYNC           40	/* pixels */
+#define HX8379A_HFP             100
+#define HX8379A_HBP             94
+
+#define HX8379A_VSYNC           6	/* lines */
+#define HX8379A_VFP             6
+#define HX8379A_VBP             4
+
+#define HX8379A_HDISP		480
+#define HX8379A_VDISP		854
+
+
+static const struct drm_display_mode truly_tda_fwvga0500g50008_mode = {
+	.clock		= 37270,	/*KHz*/
+	.vrefresh	= 60,		/*Hz*/
+
+	.hdisplay	= HX8379A_HDISP,
+	.hsync_start	= HX8379A_HDISP + HX8379A_HFP,
+	.hsync_end	= HX8379A_HDISP + HX8379A_HFP + HX8379A_HSYNC,
+	.htotal		= HX8379A_HDISP + HX8379A_HFP + HX8379A_HSYNC + HX8379A_HBP,
+
+	.vdisplay	= HX8379A_VDISP,
+	.vsync_start	= HX8379A_VDISP + HX8379A_VFP,
+	.vsync_end	= HX8379A_VDISP + HX8379A_VFP + HX8379A_VSYNC,
+	.vtotal		= HX8379A_VDISP + HX8379A_VFP + HX8379A_VSYNC + HX8379A_VBP,
+};
+
+static const struct hx8379a_panel_quirks truly_tda_fwvga0500g50008 = {
+	.init_cmds = truly_tda_fwvga0500g50008_init,
+	.mode	= &truly_tda_fwvga0500g50008_mode,
+	.size	= {
+		.width	= 62,
+		.height	= 110,
+	},
+	.lanes = 2,
+	.flags = MIPI_DSI_MODE_VIDEO /*| MIPI_DSI_CLOCK_NON_CONTINUOUS
+		| MIPI_DSI_MODE_VIDEO_HSE*/,
+};
+
+static struct hx8379a_panel *panel_to_hxp(struct drm_panel *panel)
+{
+	return container_of(panel, struct hx8379a_panel, panel);
+}
+
+static int hx8379a_panel_unprepare(struct drm_panel *panel)
+{
+	struct hx8379a_panel *hxp = panel_to_hxp(panel);
+	int ret;
+
+	if (!hxp->prepared)
+		return 0;
+
+	dev_dbg(&hxp->dsi->dev, "panel unprepare\n");
+
+	ret = mipi_dsi_dcs_enter_sleep_mode(hxp->dsi);
+	if (ret) {
+		DRM_WARN("failed to enter sleep mode: %d\n", ret);
+		return ret;
+	}
+
+	/* wait for entering sleep mode*/
+	msleep(200);
+
+	/* power down the panel */
+	regulator_disable(hxp->power);
+
+	hxp->prepared = false;
+
+	return 0;
+}
+
+static int hx8379a_panel_prepare(struct drm_panel *panel)
+{
+	struct hx8379a_panel *hxp = panel_to_hxp(panel);
+	int ret;
+
+	if (hxp->prepared)
+		return 0;
+
+	dev_dbg(&hxp->dsi->dev, "panel prepare\n");
+
+	/* power up the panel */
+	ret = regulator_enable(hxp->power);
+	if (ret) {
+		DRM_ERROR("failed to enable regulator: %d\n", ret);
+		return ret;
+	}
+
+	/* reset the panel*/
+	reset_control_reset(hxp->rstc);
+
+	if (hxp->quirks->init_cmds) {
+		const struct hx8379a_init_instr *cmds = hxp->quirks->init_cmds;
+		unsigned int i;
+
+		/* execute panel init sequence */
+		for (i = 0; cmds[i].type != 0; i++) {
+			const struct  hx8379a_init_instr *cmd = &cmds[i];
+
+			if (cmd->type == INIT_CMD) {
+				dev_dbg(&hxp->dsi->dev, "panel write, len = %d\n", cmd->len);
+
+				ret = mipi_dsi_dcs_write_buffer(hxp->dsi, cmd->data, cmd->len);
+			        if (ret < 0) {
+					DRM_ERROR("panel write failed: %d\n", ret);
+					goto err_quit;
+				}
+			} else if (cmd->type == INIT_DELAY) {
+				msleep(cmd->len);
+			}
+		}
+	}
+
+	ret = mipi_dsi_dcs_set_tear_on(hxp->dsi,
+				MIPI_DSI_DCS_TEAR_MODE_VBLANK);
+	if (ret) {
+		DRM_WARN("failed to set tear on: %d\n", ret);
+		goto err_quit;
+	}
+
+	ret = mipi_dsi_dcs_exit_sleep_mode(hxp->dsi);
+	if (ret) {
+		DRM_ERROR("failed to exit sleep mode: %d\n", ret);
+		goto err_quit;
+	}
+
+	/* wait for exit sleep mode */
+	msleep(200);
+
+	hxp->prepared = true;
+
+	return 0;
+
+err_quit:
+	/* power down the panel */
+        regulator_disable(hxp->power);
+
+	return ret;
+}
+
+static int hx8379a_panel_disable(struct drm_panel *panel)
+{
+	struct hx8379a_panel *hxp = panel_to_hxp(panel);
+
+	dev_dbg(&hxp->dsi->dev, "panel disable\n");
+
+	mipi_dsi_dcs_set_display_off(hxp->dsi);
+
+	return 0;
+}
+
+static int hx8379a_panel_enable(struct drm_panel *panel)
+{
+	struct hx8379a_panel *hxp = panel_to_hxp(panel);
+	int ret;
+
+	dev_dbg(&hxp->dsi->dev, "panel enable\n");
+
+	ret = mipi_dsi_dcs_set_display_on(hxp->dsi);
+	if (ret) {
+		DRM_ERROR("couldn't set display ON: %d\n", ret);
+		return ret;
+	}
+
+	return 0;
+}
+
+static int hx8379a_panel_get_modes(struct drm_panel *panel,
+				   struct drm_connector *connector)
+{
+	struct hx8379a_panel *hxp = panel_to_hxp(panel);
+	struct drm_display_mode *mode;
+
+	mode = drm_mode_duplicate(connector->dev, hxp->quirks->mode);
+	if (!mode) {
+		DRM_ERROR("failed to add mode %ux%ux@%u\n",
+			  hxp->quirks->mode->hdisplay,
+			  hxp->quirks->mode->vdisplay,
+			  hxp->quirks->mode->vrefresh);
+		return -ENOMEM;
+	}
+
+	drm_mode_set_name(mode);
+
+	mode->type = DRM_MODE_TYPE_DRIVER | DRM_MODE_TYPE_PREFERRED;
+	drm_mode_probed_add(connector, mode);
+
+	connector->display_info.width_mm = hxp->quirks->size.width;
+	connector->display_info.height_mm = hxp->quirks->size.height;
+
+	return 1;
+}
+
+static const struct drm_panel_funcs hx8379a_panel_funcs = {
+	.unprepare	= hx8379a_panel_unprepare,
+	.prepare	= hx8379a_panel_prepare,
+	.disable	= hx8379a_panel_disable,
+	.enable		= hx8379a_panel_enable,
+	.get_modes	= hx8379a_panel_get_modes,
+};
+
+static int hx8379a_panel_probe(struct mipi_dsi_device *dsi)
+{
+	struct hx8379a_panel *hxp;
+	int ret;
+
+	hxp = devm_kzalloc(&dsi->dev, sizeof(*hxp), GFP_KERNEL);
+	if (!hxp)
+		return -ENOMEM;
+	mipi_dsi_set_drvdata(dsi, hxp);
+	hxp->dsi = dsi;
+
+	hxp->quirks = of_device_get_match_data(&dsi->dev);
+	if (!hxp->quirks) {
+		dev_err(&dsi->dev, "no device match found\n");
+		return -ENODEV;
+	}
+
+	drm_panel_init(&hxp->panel, &dsi->dev, &hx8379a_panel_funcs,
+			DRM_MODE_CONNECTOR_DSI);
+
+	hxp->rstc = devm_reset_control_get(&dsi->dev, "reset");
+	if (IS_ERR(hxp->rstc)) {
+		ret = PTR_ERR(hxp->rstc);
+		dev_err(&dsi->dev, "couldn't get our reset line: %d\n", ret);
+		return ret;
+	}
+
+	hxp->power = devm_regulator_get(&dsi->dev, "power");
+	if (IS_ERR(hxp->power)) {
+		ret = PTR_ERR(hxp->power);
+		dev_err(&dsi->dev, "couldn't get our regulator: %d\n", ret);
+		return ret;
+	}
+
+	ret = drm_panel_of_backlight(&hxp->panel);
+	if (ret) {
+		dev_err(&dsi->dev, "couldn't setup backlight: %d\n", ret);
+		return ret;
+	}
+
+	ret = drm_panel_add(&hxp->panel);
+	if (ret) {
+		dev_err(&dsi->dev, "couldn't add drm panel: %d\n", ret);
+		return ret;
+	}
+
+	dsi->format = MIPI_DSI_FMT_RGB888;
+	dsi->lanes  = hxp->quirks->lanes;
+	dsi->mode_flags	= hxp->quirks->flags;
+
+	return mipi_dsi_attach(dsi);
+}
+
+static int hx8379a_panel_remove(struct mipi_dsi_device *dsi)
+{
+	struct hx8379a_panel *hxp = mipi_dsi_get_drvdata(dsi);
+
+	mipi_dsi_detach(dsi);
+	drm_panel_remove(&hxp->panel);
+
+	return 0;
+}
+
+static const struct of_device_id hx8379a_panel_dsi_of_match[] = {
+	{
+		.compatible = "truly,tda-fwvga0500g50008",
+		.data       = &truly_tda_fwvga0500g50008,
+	},{
+		/* sentinel */
+	}
+};
+MODULE_DEVICE_TABLE(of, hx8379a_panel_dsi_of_match);
+
+static struct mipi_dsi_driver hx8379a_panel_dsi_driver = {
+	.driver	= {
+		.name = "panel-himax-hx8379a",
+		.of_match_table = hx8379a_panel_dsi_of_match,
+	},
+	.probe  = hx8379a_panel_probe,
+	.remove = hx8379a_panel_remove,
+};
+module_mipi_dsi_driver(hx8379a_panel_dsi_driver);
+
+MODULE_AUTHOR("Sergey Suloev <ssuloev@orpaltech.com>");
+MODULE_DESCRIPTION("The driver for Himax HX8379A-based MIPI-DSI panels");
+MODULE_LICENSE("GPL v2");
-- 
2.25.1

