From f7a5ceb39f38374dcc1d9c9cf24be9f549870a60 Mon Sep 17 00:00:00 2001
From: ssuloev <ssuloev@orpaltech.com>
Date: Tue, 26 Apr 2022 10:17:25 +0300
Subject: [PATCH] ASoC: codecs: Defer probing wm8731 until power-up

---
 sound/soc/codecs/wm8731.c | 62 +++++++++++++++++++++++++++++++++++----
 1 file changed, 57 insertions(+), 5 deletions(-)

diff --git a/sound/soc/codecs/wm8731.c b/sound/soc/codecs/wm8731.c
index b14c6d1..79ea45e 100644
--- a/sound/soc/codecs/wm8731.c
+++ b/sound/soc/codecs/wm8731.c
@@ -10,6 +10,8 @@
  * Based on wm8753.c by Liam Girdwood
  */
 
+#define DEBUG
+
 #include <linux/module.h>
 #include <linux/moduleparam.h>
 #include <linux/init.h>
@@ -50,7 +52,7 @@ struct wm8731_priv {
 	int sysclk_type;
 	int playback_fs;
 	bool deemph;
-
+	struct regulator *power;
 	struct mutex lock;
 };
 
@@ -343,6 +345,9 @@ static int wm8731_hw_params(struct snd_pcm_substream *substream,
 
 	wm8731->playback_fs = params_rate(params);
 
+	dev_dbg(dai->dev, "%s: codec hw params: srate = %d\n",
+		__func__, srate);
+
 	snd_soc_component_write(component, WM8731_SRATE, srate);
 
 	/* bit size */
@@ -486,9 +491,16 @@ static int wm8731_set_bias_level(struct snd_soc_component *component,
 				 enum snd_soc_bias_level level)
 {
 	struct wm8731_priv *wm8731 = snd_soc_component_get_drvdata(component);
+	enum snd_soc_bias_level old_level;
 	int ret;
 	u16 reg;
 
+	old_level = snd_soc_component_get_bias_level(component);
+
+	dev_dbg(component->dev,
+		"%s: bias level %d will change to %d\n",
+		__func__, old_level, level);
+
 	switch (level) {
 	case SND_SOC_BIAS_ON:
 		if (wm8731->mclk) {
@@ -500,7 +512,7 @@ static int wm8731_set_bias_level(struct snd_soc_component *component,
 	case SND_SOC_BIAS_PREPARE:
 		break;
 	case SND_SOC_BIAS_STANDBY:
-		if (snd_soc_component_get_bias_level(component) == SND_SOC_BIAS_OFF) {
+		if (old_level == SND_SOC_BIAS_OFF) {
 			ret = regulator_bulk_enable(ARRAY_SIZE(wm8731->supplies),
 						    wm8731->supplies);
 			if (ret != 0)
@@ -522,6 +534,7 @@ static int wm8731_set_bias_level(struct snd_soc_component *component,
 		regcache_mark_dirty(wm8731->regmap);
 		break;
 	}
+
 	return 0;
 }
 
@@ -535,9 +548,17 @@ static int wm8731_startup(struct snd_pcm_substream *substream,
 					   SNDRV_PCM_HW_PARAM_RATE,
 					   wm8731->constraints);
 
+	dev_dbg(dai->dev, "%s: codec startup\n", __func__);
+
 	return 0;
 }
 
+static void wm8731_shutdown(struct snd_pcm_substream *substream,
+			    struct snd_soc_dai *dai)
+{
+	dev_dbg(dai->dev, "%s: codec shutdown\n", __func__);
+}
+
 #define WM8731_RATES SNDRV_PCM_RATE_8000_96000
 
 #define WM8731_FORMATS (SNDRV_PCM_FMTBIT_S16_LE | SNDRV_PCM_FMTBIT_S20_3LE |\
@@ -545,6 +566,7 @@ static int wm8731_startup(struct snd_pcm_substream *substream,
 
 static const struct snd_soc_dai_ops wm8731_dai_ops = {
 	.startup	= wm8731_startup,
+	.shutdown	= wm8731_shutdown,
 	.hw_params	= wm8731_hw_params,
 	.mute_stream	= wm8731_mute,
 	.set_sysclk	= wm8731_set_dai_sysclk,
@@ -710,12 +732,17 @@ static int wm8731_spi_probe(struct spi_device *spi)
 	return 0;
 }
 
+static void wm8731_spi_remove(struct spi_device *spi)
+{
+}
+
 static struct spi_driver wm8731_spi_driver = {
 	.driver = {
 		.name	= "wm8731",
 		.of_match_table = wm8731_of_match,
 	},
 	.probe		= wm8731_spi_probe,
+	.remove		= wm8731_spi_remove,
 };
 #endif /* CONFIG_SPI_MASTER */
 
@@ -748,9 +775,22 @@ static int wm8731_i2c_probe(struct i2c_client *i2c,
 
 	i2c_set_clientdata(i2c, wm8731);
 
+	wm8731->power = devm_regulator_get(&i2c->dev, "power");
+	if (IS_ERR(wm8731->power)) {
+		ret = PTR_ERR(wm8731->power);
+		dev_err(&i2c->dev, "couldn't get our regulator: %d\n", ret);
+		return ret;
+	}
+	/* power up */
+	ret = regulator_enable(wm8731->power);
+	if (ret) {
+		dev_err(&i2c->dev, "can't enable regulator: %d\n", ret);
+		return ret;
+	}
+
 	ret = wm8731_request_supplies(&i2c->dev, wm8731);
 	if (ret != 0)
-		return ret;
+		goto err_disable_power;
 
 	wm8731->regmap = devm_regmap_init_i2c(i2c, &wm8731_regmap);
 	if (IS_ERR(wm8731->regmap)) {
@@ -777,9 +817,20 @@ err_regulator_enable:
 	/* Regulators will be enabled by bias management */
 	regulator_bulk_disable(ARRAY_SIZE(wm8731->supplies), wm8731->supplies);
 
+err_disable_power:
+	regulator_disable(wm8731->power);
 	return ret;
 }
 
+static int wm8731_i2c_remove(struct i2c_client *i2c)
+{
+	struct wm8731_priv *wm8731 = i2c_get_clientdata(i2c);
+
+	regulator_disable(wm8731->power);
+
+	return 0;
+}
+
 static const struct i2c_device_id wm8731_i2c_id[] = {
 	{ "wm8731", 0 },
 	{ }
@@ -791,8 +842,9 @@ static struct i2c_driver wm8731_i2c_driver = {
 		.name = "wm8731",
 		.of_match_table = wm8731_of_match,
 	},
-	.probe =    wm8731_i2c_probe,
-	.id_table = wm8731_i2c_id,
+	.probe		= wm8731_i2c_probe,
+	.remove		= wm8731_i2c_remove,
+	.id_table	= wm8731_i2c_id,
 };
 #endif
 
-- 
2.25.1

