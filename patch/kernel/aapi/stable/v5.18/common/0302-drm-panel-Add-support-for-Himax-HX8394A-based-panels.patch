From 5511c9684c61c9a34018558ad56260f4860e200d Mon Sep 17 00:00:00 2001
From: ssuloev <ssuloev@orpaltech.com>
Date: Wed, 13 Apr 2022 10:14:24 +0300
Subject: [PATCH] drm/panel: Add support for Himax HX8394A-based panels

---
 drivers/gpu/drm/panel/Kconfig               |   9 +
 drivers/gpu/drm/panel/Makefile              |   1 +
 drivers/gpu/drm/panel/panel-himax-hx8394a.c | 448 ++++++++++++++++++++
 3 files changed, 458 insertions(+)
 create mode 100644 drivers/gpu/drm/panel/panel-himax-hx8394a.c

diff --git a/drivers/gpu/drm/panel/Kconfig b/drivers/gpu/drm/panel/Kconfig
index ddf5f38..546c7d9 100644
--- a/drivers/gpu/drm/panel/Kconfig
+++ b/drivers/gpu/drm/panel/Kconfig
@@ -142,6 +142,15 @@ config DRM_PANEL_FEIYANG_FY07024DI26A30D
 	  Say Y if you want to enable support for panels based on the
 	  Feiyang FY07024DI26A30-D MIPI-DSI interface.
 
+config DRM_PANEL_HIMAX_HX8394A
+	tristate "Himax HX8394A-based MIPI-DSI panels"
+	depends on OF
+	depends on DRM_MIPI_DSI
+	depends on BACKLIGHT_CLASS_DEVICE
+	help
+	  Say Y here if you want to enable support for Himax HX8394A-based
+	  MIPI-DSI panels. To compile this driver as a module, choose M here.
+
 config DRM_PANEL_ILITEK_IL9322
 	tristate "Ilitek ILI9322 320x240 QVGA panels"
 	depends on OF && SPI
diff --git a/drivers/gpu/drm/panel/Makefile b/drivers/gpu/drm/panel/Makefile
index 5740911..b7080fc 100644
--- a/drivers/gpu/drm/panel/Makefile
+++ b/drivers/gpu/drm/panel/Makefile
@@ -12,6 +12,7 @@ obj-$(CONFIG_DRM_PANEL_EDP) += panel-edp.o
 obj-$(CONFIG_DRM_PANEL_ELIDA_KD35T133) += panel-elida-kd35t133.o
 obj-$(CONFIG_DRM_PANEL_FEIXIN_K101_IM2BA02) += panel-feixin-k101-im2ba02.o
 obj-$(CONFIG_DRM_PANEL_FEIYANG_FY07024DI26A30D) += panel-feiyang-fy07024di26a30d.o
+obj-$(CONFIG_DRM_PANEL_HIMAX_HX8394A) += panel-himax-hx8394a.o
 obj-$(CONFIG_DRM_PANEL_ILITEK_IL9322) += panel-ilitek-ili9322.o
 obj-$(CONFIG_DRM_PANEL_ILITEK_ILI9341) += panel-ilitek-ili9341.o
 obj-$(CONFIG_DRM_PANEL_ILITEK_ILI9881C) += panel-ilitek-ili9881c.o
diff --git a/drivers/gpu/drm/panel/panel-himax-hx8394a.c b/drivers/gpu/drm/panel/panel-himax-hx8394a.c
new file mode 100644
index 0000000..dde32f4
--- /dev/null
+++ b/drivers/gpu/drm/panel/panel-himax-hx8394a.c
@@ -0,0 +1,448 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * The driver for Himax HX8394A-based MIPI-DSI panels
+ *
+ * Copyright (C) 2018-2020 Sergey Suloev <ssuloev@orpaltech.com>
+ */
+
+#define DEBUG
+
+#include <linux/delay.h>
+#include <linux/device.h>
+#include <linux/err.h>
+#include <linux/errno.h>
+#include <linux/fb.h>
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/of_device.h>
+
+#include <linux/gpio/consumer.h>
+#include <linux/regulator/consumer.h>
+
+#include <drm/drm_mipi_dsi.h>
+#include <drm/drm_modes.h>
+#include <drm/drm_panel.h>
+#include <drm/drm_print.h>
+
+#include <video/mipi_display.h>
+
+
+struct hx8394a_cmd {
+	size_t len;
+	const char *data;
+};
+
+#define HX8394A_CMD(...) { \
+	.len = sizeof((char[]){__VA_ARGS__}), \
+	.data = (char[]){__VA_ARGS__} }
+
+struct hx8394a_panel_quirks {
+	unsigned long flags;
+	unsigned int lanes;
+	enum mipi_dsi_pixel_format format;
+
+	const struct drm_display_mode *mode;
+	const struct hx8394a_cmd *init_cmds;
+
+	/**
+	 * @width: width (in mm) of the panel's active display area
+	 * @height: height (in mm) of the panel's active display area
+	 */
+	struct {
+		u32 width;
+		u32 height;
+	} size;
+};
+
+struct hx8394a_panel {
+	struct drm_panel base;
+	struct mipi_dsi_device *dsi;
+	struct gpio_desc *reset;
+	struct regulator *power;
+	const struct hx8394a_panel_quirks *desc;
+
+	bool prepared;
+	bool enabled;
+};
+
+static const struct hx8394a_cmd microtech_lcd_mtf0500hdi_init[] = {
+	// Set EXTC
+	HX8394A_CMD(0xB9,	0xFF,0x83,0x94),
+
+	// Set MIPI
+	HX8394A_CMD(0xBA,	0x11,0x82,0x00,0x16,0xC5,0x00,0x10,0xFF,0x0F,0x24,0x03,0x21,0x24,0x25,0x20,0x08),
+
+	// Set POWER
+	HX8394A_CMD(0xB1,	0x01,0x00,0x54,0x87,0x01,0x11,0x11,0x35,0x3D,0x29,0x29,0x47,0x12,0x01,0xE6,0xE2),
+
+	// Set CYC
+	HX8394A_CMD(0xB4,	0x80,0x08,0x32,0x10,0x06,0x32,0x15,0x08,0x32,0x10,0x08,0x33,0x05,0x55,0x0A,0x37,0x05,0x55,0x0A,0x68,0x68,0x0A),
+
+	// Set GIP
+	HX8394A_CMD(0xD5,	0x00,0x00,0x00,0x00,0x0A,0x00,0x01,0x00,0x00,0x33,0x00,0x00,0x99,0x88,0xAA,0xBB,0x45,0x67,0x01,0x23,0x01,0x23,0x88,0x88,0x88,0x88,0x88,0x88,0x88,0x88,0x88,0x88,0x88,0x99,0xAA,0xBB,0x32,0x10,0x76,0x54,0x32,0x10,0x88,0x88,0x88,0x88,0x88,0x88,0x88,0x88,0x88,0x88,0x1E,0x08),
+
+
+	HX8394A_CMD(0xB6,	0x02),
+
+	// Set GAMMA
+	HX8394A_CMD(0xE0,	0x00,0x04,0x09,0x3F,0x3F,0x3F,0x17,0x3A,0x06,0x0C,0x0E,0x11,0x13,0x11,0x14,0x0F,0x1B,0x00,0x04,0x09,0x3F,0x3F,0x3F,0x17,0x3A,0x06,0x0C,0x0E,0x11,0x13,0x11,0x14,0x0F,0x1B,0x0B,0x14,0x06,0x0E,0x0B,0x14,0x06,0x0E),
+
+
+	HX8394A_CMD(0xBF,	0x06,0x00,0x10,0x04),
+
+
+	HX8394A_CMD(0xC0,	0x0C,0x17),
+
+	// Himax internal use, closed.
+	HX8394A_CMD(0xC7,	0x00,0x10,0x00,0x10),
+
+	// Set DISP
+	HX8394A_CMD(0xB2,	0x00,0xC8,0x0D,0x05,0x00,0x22),
+
+	// Set PANEL
+	HX8394A_CMD(0xCC,	0x01),
+
+
+	HX8394A_CMD(0xBC,	0x07),
+
+	// Set Address Mode
+	HX8394A_CMD(0x36,	0x0A),
+
+	// Enter Invert Mode
+/*	HX8394A_CMD(0x21),*/
+
+	{ /*EOF*/ },
+};
+
+/*
+ * Display characteristics
+ * ============================================================================
+ * MTF0500HDI-22	720*1280	65.4*119.3*1.65	62.1*110.4      MIPI    IC:HX8394A 25PIN         IPS
+ */
+
+static const struct drm_display_mode microtech_lcd_mtf0500hdi_mode = {
+	.clock		= 54594,
+
+	.hdisplay	= 720,
+	.hsync_start	= 720 + 12,
+	.hsync_end	= 720 + 12 + 12,
+	.htotal		= 720 + 12 + 12 + 12,
+
+	.vdisplay	= 1280,
+	.vsync_start	= 1280 + 6,
+	.vsync_end	= 1280 + 6 + 12,
+	.vtotal		= 1280 + 6 + 12 + 15,
+};
+
+static const struct hx8394a_panel_quirks microtech_lcd_mtf0500hdi = {
+	.init_cmds	= microtech_lcd_mtf0500hdi_init,
+	.mode		= &microtech_lcd_mtf0500hdi_mode,
+	.format		= MIPI_DSI_FMT_RGB888,
+	.size		= {
+		.width	= 62,
+		.height	= 110,
+	},
+	.lanes	= 4,
+	.flags	= MIPI_DSI_MODE_VIDEO /*
+		| MIPI_DSI_MODE_VIDEO_BURST
+		| MIPI_DSI_MODE_VIDEO_SYNC_PULSE
+		| MIPI_DSI_MODE_VIDEO_HSE
+		| MIPI_DSI_MODE_LPM
+		| MIPI_DSI_CLOCK_NON_CONTINUOUS*/,
+};
+
+static struct hx8394a_panel *panel_to_hxp(struct drm_panel *panel)
+{
+	return container_of(panel, struct hx8394a_panel, base);
+}
+
+static int hx8394a_init_cmds(struct hx8394a_panel *hxp)
+{
+	struct drm_panel *panel = &hxp->base;
+	struct mipi_dsi_device *dsi = hxp->dsi;
+	const struct hx8394a_cmd *cmds = hxp->desc->init_cmds;
+	int i, ret;
+
+	dev_dbg(panel->dev, "%s\n", __func__);
+
+	if (cmds) {
+		/* execute panel init sequence */
+		for (i = 0; cmds[i].len != 0; i++) {
+			const struct hx8394a_cmd *cmd = &cmds[i];
+
+			dev_dbg(panel->dev, "%s: cmd = %02X, len = %d\n",
+				__func__, cmd->data[0], cmd->len);
+
+			ret = mipi_dsi_dcs_write_buffer(dsi, cmd->data, cmd->len);
+			if (ret < 0) {
+				dev_dbg(panel->dev,
+					"Failed to write command %d (ret = %d)\n",
+					i, ret);
+				return ret;
+			}
+                }
+        }
+
+	dev_dbg(panel->dev, "%s success\n", __func__);
+	return 0;
+}
+
+static int hx8394a_unprepare(struct drm_panel *panel)
+{
+	struct hx8394a_panel *hxp = panel_to_hxp(panel);
+	int ret;
+
+	if (!hxp->prepared)
+		return 0;
+
+	dev_dbg(panel->dev, "%s\n", __func__);
+
+        ret = mipi_dsi_dcs_enter_sleep_mode(hxp->dsi);
+        if (ret < 0)
+		dev_err(panel->dev, "Failed to enter sleep mode: %d\n", ret);
+
+        /* wait for entering sleep mode*/
+        msleep(120);
+
+	gpiod_set_value(hxp->reset, 1);
+
+	/* Power down the panel */
+	regulator_disable(hxp->power);
+
+	hxp->prepared = false;
+	return 0;
+}
+
+static int hx8394a_disable(struct drm_panel *panel)
+{
+	struct hx8394a_panel *hxp = panel_to_hxp(panel);
+	int ret;
+
+	if (!hxp->enabled)
+		return 0;
+
+	dev_dbg(panel->dev, "%s\n", __func__);
+
+	ret = mipi_dsi_dcs_set_display_off(hxp->dsi);
+	if (ret < 0)
+		return ret;
+
+	msleep(20);
+
+	hxp->enabled = false;
+	return 0;
+}
+
+static void hx8394a_reset(struct hx8394a_panel *hxp)
+{
+	gpiod_set_value(hxp->reset, 0);
+	usleep_range(10000, 20000);
+
+	gpiod_set_value(hxp->reset, 1);
+	usleep_range(5000, 10000);
+
+	gpiod_set_value(hxp->reset, 0);
+	msleep(50);
+}
+
+static int hx8394a_prepare(struct drm_panel *panel)
+{
+	struct device *dev = panel->dev;
+	struct hx8394a_panel *hxp = panel_to_hxp(panel);
+	int ret;
+
+	if (hxp->prepared)
+		return 0;
+
+	dev_dbg(dev, "%s\n", __func__);
+
+	/* Power up the panel */
+	ret = regulator_enable(hxp->power);
+	if (ret < 0) {
+		dev_err(dev, "Failed to power on (ret = %d)\n", ret);
+		return ret;
+	}
+	usleep_range(10000, 20000);
+
+	hx8394a_reset(hxp);
+
+	ret = hx8394a_init_cmds(hxp);
+	if (ret < 0) {
+		dev_err(dev, "Failed to init panel (ret = %d)\n", ret);
+		goto err_exit;
+	}
+
+	ret = mipi_dsi_dcs_set_tear_off(hxp->dsi);
+//	ret = mipi_dsi_dcs_set_tear_on(hxp->dsi, MIPI_DSI_DCS_TEAR_MODE_VBLANK);
+	if (ret < 0) {
+		dev_err(dev, "Failed to set tear off (ret = %d)\n", ret);
+		goto err_exit;
+	}
+
+	ret = mipi_dsi_dcs_exit_sleep_mode(hxp->dsi);
+	if (ret < 0) {
+		dev_err(dev, "Failed to exit sleep mode (ret = %d)\n", ret);
+		goto err_exit;
+	}
+
+	/* wait for exit sleep mode */
+	msleep(120);
+
+	hxp->prepared = true;
+	return 0;
+
+err_exit:
+	/* Power down the panel */
+	regulator_disable(hxp->power);
+
+	gpiod_set_value(hxp->reset, 1);
+
+	return ret;
+}
+
+static int hx8394a_enable(struct drm_panel *panel)
+{
+	struct hx8394a_panel *hxp = panel_to_hxp(panel);
+	int ret;
+
+	if (hxp->enabled)
+		return 0;
+
+	dev_dbg(panel->dev, "%s\n", __func__);
+
+	ret = mipi_dsi_dcs_set_display_on(hxp->dsi);
+	if (ret < 0)
+		return ret;
+
+	msleep(120);
+
+	hxp->enabled = true;
+	return 0;
+}
+
+static int hx8394a_get_modes(struct drm_panel *panel,
+			     struct drm_connector *connector)
+{
+	struct hx8394a_panel *hxp = panel_to_hxp(panel);
+	const struct drm_display_mode *m = hxp->desc->mode;
+	struct drm_display_mode *mode;
+
+	mode = drm_mode_duplicate(connector->dev, m);
+	if (!mode) {
+		dev_err(&hxp->dsi->dev, "Failed to add mode %ux%ux@%u\n",
+			m->hdisplay, m->vdisplay,
+			drm_mode_vrefresh(m));
+		return -ENOMEM;
+	}
+
+	drm_mode_set_name(mode);
+
+	mode->type = DRM_MODE_TYPE_DRIVER | DRM_MODE_TYPE_PREFERRED;
+	drm_mode_probed_add(connector, mode);
+
+	connector->display_info.width_mm = hxp->desc->size.width;
+	connector->display_info.height_mm = hxp->desc->size.height;
+
+	return 1;
+}
+
+static const struct drm_panel_funcs hx8394a_panel_funcs = {
+	.unprepare	= hx8394a_unprepare,
+	.prepare	= hx8394a_prepare,
+	.enable		= hx8394a_enable,
+	.disable	= hx8394a_disable,
+	.get_modes	= hx8394a_get_modes,
+};
+
+static int hx8394a_probe(struct mipi_dsi_device *dsi)
+{
+	struct device *dev = &dsi->dev;
+	struct hx8394a_panel_quirks *desc;
+	struct hx8394a_panel *hxp;
+	int ret;
+
+	dev_dbg(dev, "%s\n", __func__);
+
+	hxp = devm_kzalloc(dev, sizeof(*hxp), GFP_KERNEL);
+	if (!hxp)
+		return -ENOMEM;
+	mipi_dsi_set_drvdata(dsi, hxp);
+
+	desc = of_device_get_match_data(dev);
+
+	hxp->desc = desc;
+	hxp->dsi = dsi;
+
+	dsi->format = desc->format;
+	dsi->lanes  = desc->lanes;
+	dsi->mode_flags = desc->flags;
+
+	hxp->power = devm_regulator_get(dev, "power");
+	if (IS_ERR(hxp->power)) {
+		ret = PTR_ERR(hxp->power);
+		if (ret != -EPROBE_DEFER)
+			dev_err(dev, "Couldn't get regulator: %d\n", ret);
+		return ret;
+	}
+
+	hxp->reset = devm_gpiod_get(dev, "reset", GPIOD_OUT_LOW);
+	if (IS_ERR(hxp->reset)) {
+		ret = PTR_ERR(hxp->reset);
+		if (ret != -EPROBE_DEFER)
+			dev_err(dev, "Couldn't get reset GPIO: %d\n", ret);
+		return ret;
+	}
+
+	drm_panel_init(&hxp->base, dev, &hx8394a_panel_funcs,
+			DRM_MODE_CONNECTOR_DSI);
+
+	ret = drm_panel_of_backlight(&hxp->base);
+	if (ret)
+		return ret;
+
+	drm_panel_add(&hxp->base);
+
+	ret = mipi_dsi_attach(dsi);
+	if (ret < 0) {
+		drm_panel_remove(&hxp->base);
+		dev_dbg(dev, "Failed to attach to host (ret = %d)\n", ret);
+	}
+
+	dev_dbg(dev, "%s complete (ret = %d)\n", __func__, ret);
+
+	return ret;
+}
+
+static int hx8394a_remove(struct mipi_dsi_device *dsi)
+{
+	struct hx8394a_panel *hxp = mipi_dsi_get_drvdata(dsi);
+
+	mipi_dsi_detach(dsi);
+	drm_panel_remove(&hxp->base);
+
+	return 0;
+}
+
+static const struct of_device_id hx8394a_dsi_of_match[] = {
+	{
+		.compatible	= "microtech-lcd,mtf0500hdi-22",
+		.data		= &microtech_lcd_mtf0500hdi,
+	},
+	{ /* sentinel */ }
+};
+MODULE_DEVICE_TABLE(of, hx8394a_dsi_of_match);
+
+static struct mipi_dsi_driver hx8394a_panel_driver = {
+	.probe  = hx8394a_probe,
+	.remove = hx8394a_remove,
+	.driver	= {
+		.name = "panel-himax-hx8394a",
+		.owner = THIS_MODULE,
+		.of_match_table = hx8394a_dsi_of_match,
+	},
+};
+module_mipi_dsi_driver(hx8394a_panel_driver);
+
+MODULE_AUTHOR("Sergey Suloev <ssuloev@orpaltech.com>");
+MODULE_DESCRIPTION("The driver for Himax HX8394A-based MIPI-DSI panels");
+MODULE_LICENSE("GPL v2");
-- 
2.25.1

