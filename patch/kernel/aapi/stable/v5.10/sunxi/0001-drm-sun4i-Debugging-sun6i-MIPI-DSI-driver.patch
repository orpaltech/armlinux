From 2d42214fc4dfbe615065908f2c1a9b1f83e0bbe3 Mon Sep 17 00:00:00 2001
From: Sergey Suloev <ssuloev@orpaltech.com>
Date: Tue, 27 Oct 2020 11:49:28 +0300
Subject: [PATCH] drm/sun4i: Debugging sun6i MIPI-DSI driver

---
 drivers/gpu/drm/drm_panel.c            | 26 ++++++++++++++++++++
 drivers/gpu/drm/sun4i/sun6i_mipi_dsi.c | 34 ++++++++++++++++++++++++++
 2 files changed, 60 insertions(+)

diff --git a/drivers/gpu/drm/drm_panel.c b/drivers/gpu/drm/drm_panel.c
index f634371..be85c75 100644
--- a/drivers/gpu/drm/drm_panel.c
+++ b/drivers/gpu/drm/drm_panel.c
@@ -21,6 +21,8 @@
  * DEALINGS IN THE SOFTWARE.
  */
 
+#define DEBUG
+
 #include <linux/backlight.h>
 #include <linux/err.h>
 #include <linux/module.h>
@@ -57,6 +59,8 @@ static LIST_HEAD(panel_list);
 void drm_panel_init(struct drm_panel *panel, struct device *dev,
 		    const struct drm_panel_funcs *funcs, int connector_type)
 {
+	dev_dbg(panel->dev, "%s", __func__);
+
 	INIT_LIST_HEAD(&panel->list);
 	panel->dev = dev;
 	panel->funcs = funcs;
@@ -73,6 +77,8 @@ EXPORT_SYMBOL(drm_panel_init);
  */
 void drm_panel_add(struct drm_panel *panel)
 {
+	dev_dbg(panel->dev, "%s", __func__);
+
 	mutex_lock(&panel_lock);
 	list_add_tail(&panel->list, &panel_list);
 	mutex_unlock(&panel_lock);
@@ -87,6 +93,8 @@ EXPORT_SYMBOL(drm_panel_add);
  */
 void drm_panel_remove(struct drm_panel *panel)
 {
+	dev_dbg(panel->dev, "%s", __func__);
+
 	mutex_lock(&panel_lock);
 	list_del_init(&panel->list);
 	mutex_unlock(&panel_lock);
@@ -108,6 +116,8 @@ int drm_panel_prepare(struct drm_panel *panel)
 	if (!panel)
 		return -EINVAL;
 
+	dev_dbg(panel->dev, "%s", __func__);
+
 	if (panel->funcs && panel->funcs->prepare)
 		return panel->funcs->prepare(panel);
 
@@ -131,6 +141,8 @@ int drm_panel_unprepare(struct drm_panel *panel)
 	if (!panel)
 		return -EINVAL;
 
+	dev_dbg(panel->dev, "%s", __func__);
+
 	if (panel->funcs && panel->funcs->unprepare)
 		return panel->funcs->unprepare(panel);
 
@@ -155,6 +167,8 @@ int drm_panel_enable(struct drm_panel *panel)
 	if (!panel)
 		return -EINVAL;
 
+	dev_dbg(panel->dev, "%s", __func__);
+
 	if (panel->funcs && panel->funcs->enable) {
 		ret = panel->funcs->enable(panel);
 		if (ret < 0)
@@ -187,6 +201,8 @@ int drm_panel_disable(struct drm_panel *panel)
 	if (!panel)
 		return -EINVAL;
 
+	dev_dbg(panel->dev, "%s", __func__);
+
 	ret = backlight_disable(panel->backlight);
 	if (ret < 0)
 		DRM_DEV_INFO(panel->dev, "failed to disable backlight: %d\n",
@@ -216,6 +232,8 @@ int drm_panel_get_modes(struct drm_panel *panel,
 	if (!panel)
 		return -EINVAL;
 
+	dev_dbg(panel->dev, "%s", __func__);
+
 	if (panel->funcs && panel->funcs->get_modes)
 		return panel->funcs->get_modes(panel, connector);
 
@@ -244,19 +262,25 @@ struct drm_panel *of_drm_find_panel(const struct device_node *np)
 {
 	struct drm_panel *panel;
 
+	printk(KERN_ALERT "DEBUG: Passed %s 1\n",__FUNCTION__);
+
 	if (!of_device_is_available(np))
 		return ERR_PTR(-ENODEV);
 
+	printk(KERN_ALERT "DEBUG: Passed %s 2\n",__FUNCTION__);
+
 	mutex_lock(&panel_lock);
 
 	list_for_each_entry(panel, &panel_list, list) {
 		if (panel->dev->of_node == np) {
 			mutex_unlock(&panel_lock);
+			printk(KERN_ALERT "DEBUG: Passed %s 3\n",__FUNCTION__);
 			return panel;
 		}
 	}
 
 	mutex_unlock(&panel_lock);
+	printk(KERN_ALERT "DEBUG: Passed %s 4\n",__FUNCTION__);
 	return ERR_PTR(-EPROBE_DEFER);
 }
 EXPORT_SYMBOL(of_drm_find_panel);
@@ -333,6 +357,8 @@ int drm_panel_of_backlight(struct drm_panel *panel)
 	if (!panel || !panel->dev)
 		return -EINVAL;
 
+	dev_dbg(panel->dev, "%s", __func__);
+
 	backlight = devm_of_find_backlight(panel->dev);
 
 	if (IS_ERR(backlight))
diff --git a/drivers/gpu/drm/sun4i/sun6i_mipi_dsi.c b/drivers/gpu/drm/sun4i/sun6i_mipi_dsi.c
index 4f5efca..6630633 100644
--- a/drivers/gpu/drm/sun4i/sun6i_mipi_dsi.c
+++ b/drivers/gpu/drm/sun4i/sun6i_mipi_dsi.c
@@ -6,6 +6,8 @@
  * Maxime Ripard <maxime.ripard@bootlin.com>
  */
 
+#define DEBUG
+
 #include <linux/clk.h>
 #include <linux/component.h>
 #include <linux/crc-ccitt.h>
@@ -963,8 +965,12 @@ static int sun6i_dsi_attach(struct mipi_dsi_host *host,
 			    struct mipi_dsi_device *device)
 {
 	struct sun6i_dsi *dsi = host_to_sun6i_dsi(host);
+
+	dev_dbg(host->dev, "%s: %p\n", __func__, device->dev);
 	struct drm_panel *panel = of_drm_find_panel(device->dev.of_node);
 
+	dev_dbg(host->dev, "%s: 2\n", __func__);
+
 	if (IS_ERR(panel))
 		return PTR_ERR(panel);
 	if (!dsi->drm || !dsi->drm->registered)
@@ -1054,6 +1060,8 @@ static int sun6i_dsi_bind(struct device *dev, struct device *master,
 	struct sun6i_dsi *dsi = dev_get_drvdata(dev);
 	int ret;
 
+	dev_dbg(dsi->dev, "%s: 1\n", __func__);
+
 	drm_encoder_helper_add(&dsi->encoder,
 			       &sun6i_dsi_enc_helper_funcs);
 	ret = drm_simple_encoder_init(drm, &dsi->encoder,
@@ -1064,6 +1072,8 @@ static int sun6i_dsi_bind(struct device *dev, struct device *master,
 	}
 	dsi->encoder.possible_crtcs = BIT(0);
 
+	dev_dbg(dsi->dev, "%s: 2\n", __func__);
+
 	drm_connector_helper_add(&dsi->connector,
 				 &sun6i_dsi_connector_helper_funcs);
 	ret = drm_connector_init(drm, &dsi->connector,
@@ -1075,6 +1085,8 @@ static int sun6i_dsi_bind(struct device *dev, struct device *master,
 		goto err_cleanup_connector;
 	}
 
+	dev_dbg(dsi->dev, "%s: 3\n", __func__);
+
 	drm_connector_attach_encoder(&dsi->connector, &dsi->encoder);
 
 	dsi->drm = drm;
@@ -1116,6 +1128,8 @@ static int sun6i_dsi_probe(struct platform_device *pdev)
 	dsi->host.ops = &sun6i_dsi_host_ops;
 	dsi->host.dev = dev;
 
+	dev_dbg(dev, "1\n");
+
 	if (of_device_is_compatible(dev->of_node,
 				    "allwinner,sun6i-a31-mipi-dsi"))
 		bus_clk_name = "bus";
@@ -1127,34 +1141,46 @@ static int sun6i_dsi_probe(struct platform_device *pdev)
 		return PTR_ERR(base);
 	}
 
+	dev_dbg(dev, "2\n");
+
 	dsi->regulator = devm_regulator_get(dev, "vcc-dsi");
 	if (IS_ERR(dsi->regulator)) {
 		dev_err(dev, "Couldn't get VCC-DSI supply\n");
 		return PTR_ERR(dsi->regulator);
 	}
 
+	dev_dbg(dev, "3\n");
+
 	dsi->reset = devm_reset_control_get_shared(dev, NULL);
 	if (IS_ERR(dsi->reset)) {
 		dev_err(dev, "Couldn't get our reset line\n");
 		return PTR_ERR(dsi->reset);
 	}
 
+	dev_dbg(dev, "4\n");
+
 	dsi->regs = devm_regmap_init_mmio(dev, base, &sun6i_dsi_regmap_config);
 	if (IS_ERR(dsi->regs)) {
 		dev_err(dev, "Couldn't init regmap\n");
 		return PTR_ERR(dsi->regs);
 	}
 
+	dev_dbg(dev, "5\n");
+
 	dsi->bus_clk = devm_clk_get(dev, bus_clk_name);
 	if (IS_ERR(dsi->bus_clk)) {
 		dev_err(dev, "Couldn't get the DSI bus clock\n");
 		return PTR_ERR(dsi->bus_clk);
 	}
 
+	dev_dbg(dev, "6\n");
+
 	ret = regmap_mmio_attach_clk(dsi->regs, dsi->bus_clk);
 	if (ret)
 		return ret;
 
+	dev_dbg(dev, "7\n");
+
 	if (of_device_is_compatible(dev->of_node,
 				    "allwinner,sun6i-a31-mipi-dsi")) {
 		dsi->mod_clk = devm_clk_get(dev, "mod");
@@ -1171,6 +1197,8 @@ static int sun6i_dsi_probe(struct platform_device *pdev)
 	 */
 	clk_set_rate_exclusive(dsi->mod_clk, 297000000);
 
+	dev_dbg(dev, "8\n");
+
 	dsi->dphy = devm_phy_get(dev, "dphy");
 	if (IS_ERR(dsi->dphy)) {
 		dev_err(dev, "Couldn't get the MIPI D-PHY\n");
@@ -1178,18 +1206,24 @@ static int sun6i_dsi_probe(struct platform_device *pdev)
 		goto err_unprotect_clk;
 	}
 
+	dev_dbg(dev, "9\n");
+
 	ret = mipi_dsi_host_register(&dsi->host);
 	if (ret) {
 		dev_err(dev, "Couldn't register MIPI-DSI host\n");
 		goto err_unprotect_clk;
 	}
 
+	dev_dbg(dev, "10\n");
+
 	ret = component_add(&pdev->dev, &sun6i_dsi_ops);
 	if (ret) {
 		dev_err(dev, "Couldn't register our component\n");
 		goto err_remove_dsi_host;
 	}
 
+	dev_dbg(dev, "11 - success\n");
+
 	return 0;
 
 err_remove_dsi_host:
-- 
2.25.1

