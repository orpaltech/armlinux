From 46a4d6ff14348257c14922099900ab87fb46705a Mon Sep 17 00:00:00 2001
From: Sergey Suloev <ssuloev@orpaltech.com>
Date: Wed, 5 Feb 2020 22:35:06 +0300
Subject: [PATCH] power: Add support for bq34z1xx standalone fuel gauge

---
 drivers/power/supply/Kconfig              |    8 +
 drivers/power/supply/Makefile             |    1 +
 drivers/power/supply/bq34z1xx_gauge_i2c.c | 1259 +++++++++++++++++++++
 include/linux/power/bq34z1xx_gauge.h      |   68 ++
 4 files changed, 1336 insertions(+)
 create mode 100644 drivers/power/supply/bq34z1xx_gauge_i2c.c
 create mode 100644 include/linux/power/bq34z1xx_gauge.h

diff --git a/drivers/power/supply/Kconfig b/drivers/power/supply/Kconfig
index 27164a1..e83f052 100644
--- a/drivers/power/supply/Kconfig
+++ b/drivers/power/supply/Kconfig
@@ -269,6 +269,14 @@ config BATTERY_BQ27XXX_DT_UPDATES_NVM
 	  general-purpose kernels, as this can cause misconfiguration of a
 	  smart battery with embedded NVM/flash.
 
+config BATTERY_GAUGE_BQ34Z1XX_I2C
+	tristate "TI standalone fuel gauge bq34z1xx over I2C support"
+	depends on I2C
+	select REGMAP_I2C
+	help
+	  Say Y here to enable support for TI standalone fuel gauge bq34z1xx chips
+	  connected over an I2C bus.
+
 config BATTERY_DA9030
 	tristate "DA9030 battery driver"
 	depends on PMIC_DA903X
diff --git a/drivers/power/supply/Makefile b/drivers/power/supply/Makefile
index 6c7da92..fe31e9a 100644
--- a/drivers/power/supply/Makefile
+++ b/drivers/power/supply/Makefile
@@ -92,3 +92,4 @@ obj-$(CONFIG_FUEL_GAUGE_SC27XX)	+= sc27xx_fuel_gauge.o
 obj-$(CONFIG_CHARGER_UCS1002)	+= ucs1002_power.o
 obj-$(CONFIG_CHARGER_BD70528)	+= bd70528-charger.o
 obj-$(CONFIG_CHARGER_WILCO)	+= wilco-charger.o
+obj-$(CONFIG_BATTERY_GAUGE_BQ34Z1XX_I2C) += bq34z1xx_gauge_i2c.o
diff --git a/drivers/power/supply/bq34z1xx_gauge_i2c.c b/drivers/power/supply/bq34z1xx_gauge_i2c.c
new file mode 100644
index 0000000..4c18736
--- /dev/null
+++ b/drivers/power/supply/bq34z1xx_gauge_i2c.c
@@ -0,0 +1,1259 @@
+// SPDX-License-Identifier: GPL-2.0-or-later
+/*
+ * BQ34Z1xx standalone fuel gauge I2C driver
+ *
+ * Copyright (C) 2013-2019 ORPAL Technologies Inc.
+ *	Sergey Suloev <ssuloev@orpaltech.com>
+ */
+
+#define DEBUG
+
+#include <linux/i2c.h>
+#include <linux/interrupt.h>
+#include <linux/module.h>
+#include <linux/mutex.h>
+#include <linux/of_device.h>
+#include <linux/power_supply.h>
+#include <linux/regmap.h>
+#include <asm/unaligned.h>
+
+#include <linux/power/bq34z1xx_gauge.h>
+
+
+#define BQ34Z1XX_MANUFACTURER	"Texas Instruments"
+
+/* Control Subcommands */
+#define BQ34Z1XX_CNTL_SEALED	0x0020	// Places the device in SEALED mode
+#define BQ34Z1XX_CNTL_IT_ENABLE	0x0021	// Enables the Impedance Track algorithm
+#define BQ34Z1XX_CNTL_RESET	0x0041	// Forces a full reset of the device
+
+/* bq34z100-G1 registers */
+#define BQ34Z100G1_REG_CNTL	0x00
+#define BQ34Z100G1_REG_FLAGS	0x0E
+
+#define INVALID_REG_ADDR	0xff
+
+
+struct bq34z1xx_dm_reg {
+	u8 subclass_id;
+	u8 offset;
+	u8 bytes;
+	u16 min, max;
+};
+
+/*
+ * bq34z1xx_reg - Register names
+ *
+ * These are indexes into a device's register mapping array.
+ */
+enum bq34z1xx_reg {
+	// Name				Description		Unit	Access
+	// -------------------------------------------------------------------
+        BQ34Z1XX_REG_CNTL = 0,          // Control                      R/W
+        BQ34Z1XX_REG_SOC,               // State Of Charge	%	R
+        BQ34Z1XX_REG_ME,                // Max Error		%	R
+        BQ34Z1XX_REG_RM,                // Remaining Capacity	mAh	R
+        BQ34Z1XX_REG_FCC,               // Full-Charge Capacity	mAh	R
+        BQ34Z1XX_REG_VOLT,              // Voltage		mV	R
+        BQ34Z1XX_REG_AI,                // Average Current	mA	R
+        BQ34Z1XX_REG_TEMP,              // Temperature		0.1K	R
+        BQ34Z1XX_REG_FLAGS,             // Flags			R
+        BQ34Z1XX_REG_I,                 // Current		mA	R
+	BQ34Z1XX_REG_ATTE,		// Time To Empty	Min	R
+	BQ34Z1XX_REG_ATTF,		// Time To Full		Min	R
+	BQ34Z1XX_REG_AE,		// Available Energy	10mW/h	R
+	BQ34Z1XX_REG_AP,		// Average Power	10mW	R
+	BQ34Z1XX_REG_SOH,		// State Of Health	%	R
+	BQ34Z1XX_REG_PKCFG,		// Pack Configuration		R/W
+	BQ34Z1XX_REG_CC,		// Cycle Count			R
+	BQ34Z1XX_REG_DCAP,		// Design Capacity		R
+
+	BQ34Z1XX_NUM_REG		/* keep it last */
+};
+
+enum bq34z1xx_reg_field {
+	BQ34Z1XX_REGF_FAS,		// is in FULL ACCESS SEALED state.
+	BQ34Z1XX_REGF_SS,		// is in SEALED state.
+	BQ34Z1XX_REGF_CALEN,		// calibration function is active.
+	BQ34Z1XX_REGF_CCA,		// Coulomb Counter Calibration routine is active.
+	BQ34Z1XX_REGF_BCA,		// Board Calibration routine is active.
+	BQ34Z1XX_REGF_CSV,		// a valid data flash checksum has been generated.
+	BQ34Z1XX_REGF_SLEEP,		// is in SLEEP mode.
+
+	BQ34Z1XX_REGF_OTC,		// Overtemperature in Charge condition is detected.
+	BQ34Z1XX_REGF_OTD,		// Overtemperature in Discharge condition is detected.
+	BQ34Z1XX_REGF_BATHI,		// Battery High bit that indicates a high battery voltage condition.
+	BQ34Z1XX_REGF_BATLOW,		// Battery Low bit that indicates a low battery voltage condition.
+	BQ34Z1XX_REGF_XCHG,		// Charging not allowed.
+	BQ34Z1XX_REGF_FC,		// Full charge is detected.
+	BQ34Z1XX_REGF_CHG,		// (Fast) charging allowed.
+	BQ34Z1XX_REGF_CF,		// Condition Flag indicates that the gauge needs to run
+					// through an update cycle to optimize accuracy.
+	BQ34Z1XX_REGF_SOC1,		// State-of-Charge Threshold 1 reached.
+	BQ34Z1XX_REGF_SOCF,		// State-of-Charge Threshold Final reached.
+	BQ34Z1XX_REGF_DSG,		// Discharging detected.
+
+        BQ34Z1XX_NUM_REGF		/* keep it last */
+};
+
+/* Register mappings */
+static const u8
+	bq34z100g1_regs[BQ34Z1XX_NUM_REG] = {
+		[BQ34Z1XX_REG_CNTL]	= BQ34Z100G1_REG_CNTL,
+		[BQ34Z1XX_REG_SOC]	= 0x02,
+		[BQ34Z1XX_REG_ME]	= 0x03,
+		[BQ34Z1XX_REG_RM]	= 0x04,
+		[BQ34Z1XX_REG_FCC]	= 0x06,
+		[BQ34Z1XX_REG_VOLT]	= 0x08,
+		[BQ34Z1XX_REG_AI]	= 0x0A,
+		[BQ34Z1XX_REG_TEMP]	= 0x0C,
+		[BQ34Z1XX_REG_FLAGS]	= BQ34Z100G1_REG_FLAGS,
+		[BQ34Z1XX_REG_I]	= 0x10,
+		[BQ34Z1XX_REG_ATTE]	= 0x18,
+		[BQ34Z1XX_REG_ATTF]	= 0x1A,
+		[BQ34Z1XX_REG_AE]	= 0x24,
+		[BQ34Z1XX_REG_AP]	= 0x26,
+		[BQ34Z1XX_REG_CC]	= 0x2C,
+		[BQ34Z1XX_REG_SOH]	= 0x2E,
+		[BQ34Z1XX_REG_PKCFG]	= 0x3A,
+		[BQ34Z1XX_REG_DCAP]	= 0x3C,
+	};
+
+static const struct reg_field
+	bq34z100g1_reg_fields[BQ34Z1XX_NUM_REGF] = {
+        	[BQ34Z1XX_REGF_FAS]	= REG_FIELD(BQ34Z100G1_REG_CNTL, 14, 14),
+		[BQ34Z1XX_REGF_SS]	= REG_FIELD(BQ34Z100G1_REG_CNTL, 13, 13),
+		[BQ34Z1XX_REGF_CALEN]	= REG_FIELD(BQ34Z100G1_REG_CNTL, 12, 12),
+		[BQ34Z1XX_REGF_CCA]	= REG_FIELD(BQ34Z100G1_REG_CNTL, 11, 11),
+		[BQ34Z1XX_REGF_BCA]	= REG_FIELD(BQ34Z100G1_REG_CNTL, 10, 10),
+		[BQ34Z1XX_REGF_CSV]	= REG_FIELD(BQ34Z100G1_REG_CNTL, 9, 9),
+		[BQ34Z1XX_REGF_SLEEP]	= REG_FIELD(BQ34Z100G1_REG_CNTL, 4, 4),
+
+	        [BQ34Z1XX_REGF_OTC]	= REG_FIELD(BQ34Z100G1_REG_FLAGS, 15, 15),
+		[BQ34Z1XX_REGF_OTD]	= REG_FIELD(BQ34Z100G1_REG_FLAGS, 14, 14),
+		[BQ34Z1XX_REGF_BATHI]	= REG_FIELD(BQ34Z100G1_REG_FLAGS, 13, 13),
+		[BQ34Z1XX_REGF_BATLOW]	= REG_FIELD(BQ34Z100G1_REG_FLAGS, 12, 12),
+		[BQ34Z1XX_REGF_FC]	= REG_FIELD(BQ34Z100G1_REG_FLAGS, 9, 9),
+		[BQ34Z1XX_REGF_CHG]	= REG_FIELD(BQ34Z100G1_REG_FLAGS, 8, 8),
+		[BQ34Z1XX_REGF_CF]	= REG_FIELD(BQ34Z100G1_REG_FLAGS, 4, 4),
+		[BQ34Z1XX_REGF_SOC1]	= REG_FIELD(BQ34Z100G1_REG_FLAGS, 2, 2),
+		[BQ34Z1XX_REGF_SOCF]	= REG_FIELD(BQ34Z100G1_REG_FLAGS, 1, 1),
+	};
+
+static const enum power_supply_property
+	bq34z100g1_ps_props[] = {
+		POWER_SUPPLY_PROP_STATUS,
+		POWER_SUPPLY_PROP_PRESENT,
+		POWER_SUPPLY_PROP_VOLTAGE_NOW,
+		POWER_SUPPLY_PROP_CURRENT_NOW,
+		POWER_SUPPLY_PROP_CURRENT_AVG,
+		POWER_SUPPLY_PROP_CAPACITY,
+		POWER_SUPPLY_PROP_CAPACITY_LEVEL,
+		POWER_SUPPLY_PROP_TEMP,
+		POWER_SUPPLY_PROP_TIME_TO_EMPTY_AVG,
+		POWER_SUPPLY_PROP_TIME_TO_FULL_AVG,
+		POWER_SUPPLY_PROP_TECHNOLOGY,
+		POWER_SUPPLY_PROP_CHARGE_FULL,
+		POWER_SUPPLY_PROP_CHARGE_NOW,
+		POWER_SUPPLY_PROP_CHARGE_FULL_DESIGN,
+		POWER_SUPPLY_PROP_CYCLE_COUNT,
+		POWER_SUPPLY_PROP_ENERGY_NOW,
+		POWER_SUPPLY_PROP_POWER_AVG,
+		POWER_SUPPLY_PROP_HEALTH,
+		POWER_SUPPLY_PROP_MANUFACTURER,
+	};
+
+
+static DEFINE_IDR(bq34z1xx_id);
+static DEFINE_MUTEX(bq34z1xx_id_lock);
+
+static DEFINE_MUTEX(bq34z1xx_list_lock);
+static LIST_HEAD(bq34z1xx_devices);
+
+
+static int poll_interval_param_set(const char *val,
+				   const struct kernel_param *kp)
+{
+	struct bq34z1xx_gauge_data *dd;
+	unsigned int prev_val = *(unsigned int *) kp->arg;
+	int ret;
+
+	ret = param_set_uint(val, kp);
+	if (ret < 0 || prev_val == *(unsigned int *) kp->arg)
+		return ret;
+
+	mutex_lock(&bq34z1xx_list_lock);
+	list_for_each_entry(dd, &bq34z1xx_devices, list) {
+		cancel_delayed_work_sync(&dd->work);
+		schedule_delayed_work(&dd->work, 0);
+	}
+	mutex_unlock(&bq34z1xx_list_lock);
+
+	return ret;
+}
+
+static const struct kernel_param_ops param_ops_poll_interval = {
+	.get = param_get_uint,
+	.set = poll_interval_param_set,
+};
+
+static unsigned int poll_interval = 360;
+module_param_cb(poll_interval, &param_ops_poll_interval, &poll_interval, 0644);
+MODULE_PARM_DESC(poll_interval,
+		 "gauge poll interval in seconds - 0 disables polling");
+
+
+static bool bq34z1xx_has_reg(struct bq34z1xx_gauge_data *dd, int index)
+{
+	if (index < 0 || index >= BQ34Z1XX_NUM_REG)
+		return false;
+
+	return dd->quirks->regs[index] != INVALID_REG_ADDR;
+}
+
+static int bq34z1xx_reg_index(struct bq34z1xx_gauge_data *dd, u8 reg)
+{
+	int i;
+
+	for (i = 0; i < BQ34Z1XX_NUM_REG; i++) {
+		if (dd->quirks->regs[i] == reg)
+			return i;
+	}
+	return -1;
+}
+
+static int bq34z1xx_reg_read(struct bq34z1xx_gauge_data *dd, int index)
+{
+        unsigned int val;
+        int ret;
+
+        if (index < 0 || index >= BQ34Z1XX_NUM_REG)
+                return -EINVAL;
+
+	ret = regmap_read(dd->regmap, dd->quirks->regs[index], &val);
+        if (ret < 0) {
+                dev_err(dd->dev,
+			"error reading register (index = %d): %d\n",
+			index, ret);
+                return ret;
+        }
+
+        return (u16)val;
+}
+
+static int bq34z1xx_reg_write(struct bq34z1xx_gauge_data *dd, int index, u16 val)
+{
+	int ret;
+
+	if (index < 0 || index >= BQ34Z1XX_NUM_REG)
+		return -EINVAL;
+
+	ret = regmap_write(dd->regmap, dd->quirks->regs[index], val);
+	if (ret < 0)
+		dev_err(dd->dev, "error writing register (index = %d): %d\n",
+			index, ret);
+
+	return ret;
+}
+
+static int bq34z1xx_field_read(struct bq34z1xx_gauge_data *dd, int index)
+{
+	struct regmap_field *field;
+	unsigned int val;
+	int ret;
+
+	if (index < 0 || index >= BQ34Z1XX_NUM_REGF)
+		return -EINVAL;
+
+	field = dd->regmap_fields[index];
+	ret = regmap_field_read(field, &val);
+	if (ret < 0) {
+		dev_err(dd->dev, "error reading field (index = %d): %d\n",
+			index, ret);
+		return ret;
+	}
+
+	return (u16)val;
+}
+
+static int
+__maybe_unused bq34z1xx_field_write(struct bq34z1xx_gauge_data *dd,
+				    int index, u16 val)
+{
+	struct regmap_field *field;
+
+	if (index < 0 || index >= BQ34Z1XX_NUM_REGF)
+		return -EINVAL;
+
+	dev_dbg(dd->dev, "write regmap field (index = %d, val = 0x%04x)\n",
+		index, val);
+
+	field = dd->regmap_fields[index];
+	return regmap_field_write(field, val);
+}
+
+/*static int bq34z1xx_gauge_i2c_bulk_read(struct bq34z1xx_gauge_data *dd,
+					u8 reg, u8 *data, int len)
+{
+	struct i2c_client *i2c = to_i2c_client(dd->dev);
+	int ret;
+
+	if (!i2c->adapter)
+		return -ENODEV;
+
+	ret = i2c_smbus_read_i2c_block_data(i2c, reg, len, data);
+	if (ret < 0)
+		return ret;
+	if (ret != len)
+		return -EINVAL;
+	return 0;
+}
+
+static int bq34z1xx_gauge_i2c_bulk_write(struct bq34z1xx_gauge_data *dd,
+					 u8 reg, const u8 *data, int len)
+{
+	struct i2c_client *i2c = to_i2c_client(dd->dev);
+	struct i2c_msg msg;
+	u8 buf[33];
+	int ret;
+
+	if (!i2c->adapter)
+		return -ENODEV;
+
+	buf[0] = reg;
+	memcpy(&buf[1], data, len);
+
+	msg.buf = buf;
+	msg.addr = i2c->addr;
+	msg.flags = 0;
+	msg.len = len + 1;
+
+	ret = i2c_transfer(i2c->adapter, &msg, 1);
+	if (ret < 0)
+		return ret;
+	if (ret != 1)
+		return -EINVAL;
+	return 0;
+}*/
+
+static int bq34z1xx_simple_value(int value,
+				 union power_supply_propval *val)
+{
+	if (value < 0)
+		return value;
+
+	val->intval = value;
+
+	return 0;
+}
+
+static int bq34z1xx_gauge_seal(struct bq34z1xx_gauge_data *dd)
+{
+	int ret;
+
+	ret = bq34z1xx_reg_write(dd, BQ34Z1XX_REG_CNTL, BQ34Z1XX_CNTL_SEALED);
+	if (ret < 0) {
+		dev_err(dd->dev, "write error on seal: %d\n", ret);
+		return ret;
+	}
+
+	return 0;
+}
+
+static int bq34z1xx_gauge_unseal(struct bq34z1xx_gauge_data *dd)
+{
+	int ret;
+	u32 unseal_key = dd->quirks->unseal_key;
+
+	if (unseal_key == 0) {
+		dev_err(dd->dev, "unseal failed due to missing key\n");
+		return -EINVAL;
+	}
+
+	ret = bq34z1xx_reg_write(dd, BQ34Z1XX_REG_CNTL,
+				(u16)(unseal_key >> 16));
+	if (ret < 0)
+		goto err_out;
+
+	ret = bq34z1xx_reg_write(dd, BQ34Z1XX_REG_CNTL, (u16)unseal_key);
+	if (ret < 0)
+		goto err_out;
+
+	return 0;
+
+err_out:
+	dev_err(dd->dev, "write error while unseal: %d\n", ret);
+	return ret;
+}
+
+static int bq34z1xx_gauge_read_status(struct bq34z1xx_gauge_data *dd)
+{
+	int val, status;
+
+	val = bq34z1xx_field_read(dd, BQ34Z1XX_REGF_FC);
+	if (val < 0)
+		return val;
+
+	if (val != 0) {
+		status = POWER_SUPPLY_STATUS_FULL;
+	} else {
+		val = bq34z1xx_field_read(dd, BQ34Z1XX_REGF_DSG);
+		if (val < 0)
+			return val;
+
+		if (val != 0) {
+			status = POWER_SUPPLY_STATUS_DISCHARGING;
+		} else {
+			status = POWER_SUPPLY_STATUS_CHARGING;
+		}
+	}
+
+	return status;
+}
+
+/*
+ * Return the battery temperature in tenths of degree K
+ * Or < 0 if something fails.
+ */
+static int bq34z1xx_gauge_read_temp(struct bq34z1xx_gauge_data *dd)
+{
+	int temp;
+
+	temp = bq34z1xx_reg_read(dd, BQ34Z1XX_REG_TEMP);
+	if (temp < 0) {
+		dev_err(dd->dev, "error reading temperature\n");
+		return temp;
+	}
+
+	// the value expressed in tenths of degree K
+	return temp;
+}
+
+/*
+ * Return the Design Capacity in µAh
+ * Or < 0 if something fails.
+ */
+static int bq34z1xx_gauge_read_dcap(struct bq34z1xx_gauge_data *dd)
+{
+	int dcap;
+
+	dcap = bq34z1xx_reg_read(dd, BQ34Z1XX_REG_DCAP);
+	if (dcap < 0) {
+		dev_dbg(dd->dev, "error reading nominal battery capacity\n");
+		return dcap;
+	}
+
+	dcap *= 1000;
+
+	return dcap;
+}
+
+/*
+ * Returns true if a battery over temperature condition is detected
+ */
+static int bq34z1xx_gauge_is_overtemp(struct bq34z1xx_gauge_data *dd)
+{
+	int otc, otd;
+
+	otc = bq34z1xx_field_read(dd, BQ34Z1XX_REGF_OTC);
+	if (otc < 0)
+		return otc;
+	otd = bq34z1xx_field_read(dd, BQ34Z1XX_REGF_OTD);
+	if (otd < 0)
+		return otd;
+
+	if (otc || otd)
+		return true;
+
+	return false;
+}
+
+/*
+ * Returns true if a low state of charge condition is detected
+ */
+static int bq34z1xx_gauge_is_battery_dead(struct bq34z1xx_gauge_data *dd)
+{
+	int soc1, socf;
+
+	soc1 = bq34z1xx_field_read(dd, BQ34Z1XX_REGF_SOC1);
+	if (soc1 < 0)
+		return soc1;
+	socf = bq34z1xx_field_read(dd, BQ34Z1XX_REGF_SOCF);
+	if (socf < 0)
+		return socf;
+
+	if (soc1 || socf)
+		return true;
+
+	return false;
+}
+
+static int bq34z1xx_gauge_read_health(struct bq34z1xx_gauge_data *dd)
+{
+	int overtemp, dead;
+
+	overtemp = bq34z1xx_gauge_is_overtemp(dd);
+	if (overtemp < 0)
+		return overtemp;
+	else if (overtemp)
+		return POWER_SUPPLY_HEALTH_OVERHEAT;
+
+	dead = bq34z1xx_gauge_is_battery_dead(dd);
+	if (dead < 0)
+		return dead;
+	else if (dead)
+		return POWER_SUPPLY_HEALTH_DEAD;
+
+	return POWER_SUPPLY_HEALTH_GOOD;
+}
+
+/*
+ * Read a time register, in seconds.
+ * Return < 0 if something fails.
+ */
+static int bq34z1xx_gauge_read_time(struct bq34z1xx_gauge_data *dd, int index)
+{
+	int tval;
+
+	if (!bq34z1xx_has_reg(dd, index))
+		return -EINVAL;
+
+	tval = bq34z1xx_reg_read(dd, index);
+	if (tval < 0) {
+		dev_dbg(dd->dev,
+			"error reading time register (index = %d): %d\n",
+			index, tval);
+		return tval;
+	}
+
+	if (tval == 65535)
+		return -ENODATA;
+
+	return tval * 60;
+}
+
+/*
+ * Return the battery Cycle count total
+ * Or < 0 if something fails.
+ */
+static int bq34z1xx_gauge_read_cyct(struct bq34z1xx_gauge_data *dd)
+{
+	int cyct;
+
+	if (!bq34z1xx_has_reg(dd, BQ34Z1XX_REG_CC))
+		return -EINVAL;
+
+	cyct = bq34z1xx_reg_read(dd, BQ34Z1XX_REG_CC);
+	if (cyct < 0)
+		dev_err(dd->dev, "error reading cycle count total\n");
+
+	return cyct;
+}
+
+static int bq34z1xx_gauge_read_energy(struct bq34z1xx_gauge_data *dd)
+{
+	int energy;
+
+	if (!bq34z1xx_has_reg(dd, BQ34Z1XX_REG_AE))
+		return -EINVAL;
+
+	energy = bq34z1xx_reg_read(dd, BQ34Z1XX_REG_AE);
+	if (energy < 0)
+		dev_err(dd->dev, "error reading available energy: %d\n",
+			energy);
+
+	return energy;
+}
+
+/*
+ * Read a current register in µA
+ * Return < 0 if something fails.
+ */
+static int bq34z1xx_gauge_read_current(struct bq34z1xx_gauge_data *dd, int index, int *value)
+{
+	int curr;
+
+	curr = bq34z1xx_reg_read(dd, index);
+	if (curr < 0) {
+		dev_err(dd->dev,
+			"error reading current register (index = %d): %d\n",
+			index, curr);
+		return curr;
+	}
+
+	/* TODO: check if all gauges return signed value */
+	*value = (int)((s16)curr) * 1000;
+
+	return 0;
+}
+
+/*
+ * Read the average current register in µA
+ * Return < 0 if something fails.
+ */
+static int bq34z1xx_gauge_read_current_avg(struct bq34z1xx_gauge_data *dd)
+{
+	int ret, curr;
+
+	ret = bq34z1xx_gauge_read_current(dd, BQ34Z1XX_REG_AI, &curr);
+	if (ret < 0)
+		return 0;
+
+	return curr;
+}
+
+/*
+ * Return the battery instant current in µA
+ * Or 0 if something fails.
+ */
+static int bq34z1xx_gauge_get_current(struct bq34z1xx_gauge_data *dd,
+                                      union power_supply_propval *val)
+{
+	int ret, curr;
+
+	ret = bq34z1xx_gauge_read_current(dd, BQ34Z1XX_REG_I, &curr);
+	if (ret < 0)
+		return ret;
+
+	val->intval = curr;
+
+	return 0;
+}
+
+/*
+ * Read the average power register in mW.
+ * Return < 0 if something fails.
+ */
+static int bq34z1xx_gauge_read_pwr_avg(struct bq34z1xx_gauge_data *dd)
+{
+	int pwr_avg;
+
+	if (!bq34z1xx_has_reg(dd, BQ34Z1XX_REG_AP))
+                return -EINVAL;
+
+	pwr_avg = bq34z1xx_reg_read(dd, BQ34Z1XX_REG_AP);
+	if (pwr_avg < 0)
+		dev_err(dd->dev, "error reading avg power register: %d\n",
+			pwr_avg);
+
+	return pwr_avg;
+}
+
+/*
+ * Read a battery charge value in µAh
+ * Or < 0 if something fails.
+ */
+static int bq34z1xx_gauge_read_charge(struct bq34z1xx_gauge_data *dd,
+				      int index)
+{
+	int charge;
+
+	charge = bq34z1xx_reg_read(dd, index);
+	if (charge < 0) {
+		dev_dbg(dd->dev,
+			"error reading charge register (index = %d): %d\n",
+			index, charge);
+		return charge;
+	}
+
+	charge *= 1000;
+
+	return charge;
+}
+
+/*
+ * Read the battery Full Charge Capacity in µAh
+ * Or < 0 if something fails.
+ */
+static int bq34z1xx_gauge_read_fcc(struct bq34z1xx_gauge_data *dd)
+{
+	return bq34z1xx_gauge_read_charge(dd, BQ34Z1XX_REG_FCC);
+}
+
+/*
+ * Return the battery Remaining Capacity in µAh
+ * Or < 0 if something fails.
+ */
+static int bq34z1xx_gauge_get_rmc(struct bq34z1xx_gauge_data *dd,
+				  union power_supply_propval *val)
+{
+	int charge;
+
+	charge = bq34z1xx_gauge_read_charge(dd, BQ34Z1XX_REG_RM);
+	if (charge < 0)
+		return charge;
+
+	val->intval = charge;
+
+	return 0;
+}
+
+/*
+ * Read the battery State-of-Charge
+ * Or < 0 if something fails.
+ */
+static int bq34z1xx_gauge_read_soc(struct bq34z1xx_gauge_data *dd)
+{
+	int soc;
+
+	soc = bq34z1xx_reg_read(dd, BQ34Z1XX_REG_SOC);
+	if (soc < 0)
+		dev_dbg(dd->dev,
+			"error reading state-of-charge register: %d\n",
+			soc);
+	return soc;
+}
+
+static void bq34z1xx_gauge_update(struct bq34z1xx_gauge_data *dd)
+{
+	struct bq34z1xx_gauge_cache cache = {0, };
+
+	cache.status = bq34z1xx_gauge_read_status(dd);
+	cache.temperature = bq34z1xx_gauge_read_temp(dd);
+
+	cache.time_to_empty_avg = bq34z1xx_gauge_read_time(dd, BQ34Z1XX_REG_ATTE);
+	cache.time_to_full_avg = bq34z1xx_gauge_read_time(dd, BQ34Z1XX_REG_ATTF);
+
+	cache.charge_full = bq34z1xx_gauge_read_fcc(dd);
+	cache.state_of_charge = bq34z1xx_gauge_read_soc(dd);
+
+	cache.energy = bq34z1xx_gauge_read_energy(dd);
+	cache.health = bq34z1xx_gauge_read_health(dd);
+
+	cache.cycle_count = bq34z1xx_gauge_read_cyct(dd);
+
+	cache.power_avg = bq34z1xx_gauge_read_pwr_avg(dd);
+	cache.current_avg = bq34z1xx_gauge_read_current_avg(dd);
+
+	/* We only have to read the design capacity once */
+	if (dd->design_capacity <= 0)
+		dd->design_capacity = bq34z1xx_gauge_read_dcap(dd);
+
+	if ((dd->cache.state_of_charge != cache.state_of_charge)
+		|| (dd->cache.status != cache.status)
+		|| (dd->cache.health != cache.health)
+		|| (dd->cache.temperature != cache.temperature))
+		power_supply_changed(dd->bat);
+
+	if (memcmp(&dd->cache, &cache, sizeof(cache)) != 0)
+		dd->cache = cache;
+
+	dd->last_update = jiffies;
+}
+
+static void bq34z1xx_gauge_poll(struct work_struct *work)
+{
+	struct bq34z1xx_gauge_data *dd =
+			container_of(work, struct bq34z1xx_gauge_data,
+				     work.work);
+
+	bq34z1xx_gauge_update(dd);
+
+	if (poll_interval > 0)
+		schedule_delayed_work(&dd->work, poll_interval * HZ);
+}
+
+/*
+ * Return the battery Voltage in µV
+ * Or < 0 if something fails.
+ */
+static int bq34z1xx_gauge_get_voltage(struct bq34z1xx_gauge_data *dd,
+				      union power_supply_propval *val)
+{
+	int volt;
+
+	volt = bq34z1xx_reg_read(dd, BQ34Z1XX_REG_VOLT);
+	if (volt < 0) {
+		dev_err(dd->dev, "error reading voltage: %d\n", volt);
+		return volt;
+	}
+
+	val->intval = volt * 1000;
+
+	return 0;
+}
+
+static int bq34z1xx_gauge_get_capacity_level(struct bq34z1xx_gauge_data *dd,
+					     union power_supply_propval *val)
+{
+	int fc, soc1, socf;
+
+	fc = bq34z1xx_field_read(dd, BQ34Z1XX_REGF_FC);
+	if (fc < 0)
+		return fc;
+	if (fc) {
+		val->intval = POWER_SUPPLY_CAPACITY_LEVEL_FULL;
+		return 0;
+	}
+
+	soc1 = bq34z1xx_field_read(dd, BQ34Z1XX_REGF_SOC1);
+	if (soc1 < 0)
+		return soc1;
+	if (soc1) {
+		val->intval = POWER_SUPPLY_CAPACITY_LEVEL_LOW;
+		return 0;
+	}
+
+	socf = bq34z1xx_field_read(dd, BQ34Z1XX_REGF_SOCF);
+	if (socf < 0)
+		return socf;
+	if (socf) {
+		val->intval = POWER_SUPPLY_CAPACITY_LEVEL_CRITICAL;
+		return 0;
+	}
+
+	val->intval = POWER_SUPPLY_CAPACITY_LEVEL_NORMAL;
+	return 0;
+}
+
+static int bq34z1xx_gauge_get_property(struct power_supply *psy,
+					enum power_supply_property psp,
+					union power_supply_propval *val)
+{
+	int ret = 0;
+	struct bq34z1xx_gauge_data *dd = power_supply_get_drvdata(psy);
+
+	mutex_lock(&dd->lock);
+	if (time_is_before_jiffies(dd->last_update + 5 * HZ)) {
+		cancel_delayed_work_sync(&dd->work);
+		bq34z1xx_gauge_poll(&dd->work.work);
+	}
+	mutex_unlock(&dd->lock);
+
+	if (psp != POWER_SUPPLY_PROP_PRESENT && dd->cache.status <= 0)
+		return -ENODEV;
+
+	switch (psp) {
+	case POWER_SUPPLY_PROP_STATUS:
+		ret = bq34z1xx_simple_value(dd->cache.status, val);
+		break;
+	case POWER_SUPPLY_PROP_VOLTAGE_NOW:
+		ret = bq34z1xx_gauge_get_voltage(dd, val);
+		break;
+	case POWER_SUPPLY_PROP_PRESENT:
+		val->intval = dd->cache.status <= 0 ? 0 : 1;
+		break;
+	case POWER_SUPPLY_PROP_CURRENT_NOW:
+		ret = bq34z1xx_gauge_get_current(dd, val);
+		break;
+	case POWER_SUPPLY_PROP_CURRENT_AVG:
+		val->intval = dd->cache.current_avg;
+		break;
+	case POWER_SUPPLY_PROP_CAPACITY:	/* in percents! */
+		ret = bq34z1xx_simple_value(dd->cache.state_of_charge, val);
+		break;
+	case POWER_SUPPLY_PROP_CAPACITY_LEVEL:
+		ret = bq34z1xx_gauge_get_capacity_level(dd, val);
+		break;
+	case POWER_SUPPLY_PROP_TEMP:
+		ret = bq34z1xx_simple_value(dd->cache.temperature, val);
+		if (ret == 0)
+			val->intval -= 2731; /* in tenths of deg. C */
+		break;
+	case POWER_SUPPLY_PROP_TIME_TO_EMPTY_AVG:
+		ret = bq34z1xx_simple_value(dd->cache.time_to_empty_avg, val);
+		break;
+	case POWER_SUPPLY_PROP_TIME_TO_FULL_AVG:
+		ret = bq34z1xx_simple_value(dd->cache.time_to_full_avg, val);
+		break;
+	case POWER_SUPPLY_PROP_TECHNOLOGY:
+		val->intval = POWER_SUPPLY_TECHNOLOGY_LION;
+		break;
+	case POWER_SUPPLY_PROP_CHARGE_NOW:
+		ret = bq34z1xx_gauge_get_rmc(dd, val);
+		break;
+	case POWER_SUPPLY_PROP_CHARGE_FULL:
+		ret = bq34z1xx_simple_value(dd->cache.charge_full, val);
+		break;
+	case POWER_SUPPLY_PROP_CHARGE_FULL_DESIGN:
+		ret = bq34z1xx_simple_value(dd->design_capacity, val);
+		break;
+	/*
+	 * TODO: Implement these to make registers set from
+	 * power_supply_battery_info visible in sysfs.
+	 */
+	case POWER_SUPPLY_PROP_ENERGY_FULL_DESIGN:
+	case POWER_SUPPLY_PROP_VOLTAGE_MIN_DESIGN:
+		return -EINVAL;
+	case POWER_SUPPLY_PROP_CYCLE_COUNT:
+		ret = bq34z1xx_simple_value(dd->cache.cycle_count, val);
+		break;
+	case POWER_SUPPLY_PROP_ENERGY_NOW:
+		ret = bq34z1xx_simple_value(dd->cache.energy, val);
+		break;
+	case POWER_SUPPLY_PROP_POWER_AVG:
+		ret = bq34z1xx_simple_value(dd->cache.power_avg, val);
+		break;
+	case POWER_SUPPLY_PROP_HEALTH:
+		ret = bq34z1xx_simple_value(dd->cache.health, val);
+		break;
+	case POWER_SUPPLY_PROP_MANUFACTURER:
+		val->strval = BQ34Z1XX_MANUFACTURER;
+		break;
+	default:
+		return -EINVAL;
+	}
+
+	return ret;
+}
+
+/*
+static void bq34z1xx_gauge_set_config(struct bq34z1xx_gauge_data *dd,
+				      struct power_supply_battery_info *info)
+{
+	struct bq34z1xx_dm_buf bd = BQ27XXX_DM_BUF(di, BQ27XXX_DM_DESIGN_CAPACITY);
+	struct bq34z1xx_dm_buf bt = BQ27XXX_DM_BUF(di, BQ27XXX_DM_TERMINATE_VOLTAGE);
+	bool updated;
+
+	if (bq34z1xx_gauge_unseal(di) < 0)
+		return;
+
+	if (info->charge_full_design_uah != -EINVAL &&
+	    info->energy_full_design_uwh != -EINVAL) {
+		bq27xxx_battery_read_dm_block(di, &bd);
+		// assume design energy & capacity are in same block
+		bq27xxx_battery_update_dm_block(di, &bd,
+					BQ27XXX_DM_DESIGN_CAPACITY,
+					info->charge_full_design_uah / 1000);
+		bq27xxx_battery_update_dm_block(di, &bd,
+					BQ27XXX_DM_DESIGN_ENERGY,
+					info->energy_full_design_uwh / 1000);
+	}
+
+	if (info->voltage_min_design_uv != -EINVAL) {
+		bool same = bd.class == bt.class && bd.block == bt.block;
+		if (!same)
+			bq27xxx_battery_read_dm_block(di, &bt);
+		bq27xxx_battery_update_dm_block(di, same ? &bd : &bt,
+					BQ27XXX_DM_TERMINATE_VOLTAGE,
+					info->voltage_min_design_uv / 1000);
+	}
+
+	updated = bd.dirty || bt.dirty;
+
+	bq27xxx_battery_write_dm_block(di, &bd);
+	bq27xxx_battery_write_dm_block(di, &bt);
+
+	bq34z1xx_gauge_seal(dd);
+
+	if (updated && !(di->opts & BQ27XXX_O_CFGUP)) {
+		bq27xxx_write(di, BQ27XXX_REG_CTRL, BQ27XXX_RESET, false);
+		BQ27XXX_MSLEEP(300); // reset time is not documented
+	}
+	// assume bq34z1xx_gauge_update() is called hereafter
+}
+
+static void bq34z1xx_gauge_settings(struct bq34z1xx_gauge_data *dd)
+{
+	struct power_supply_battery_info info = {};
+	unsigned int min, max;
+	struct bq34z1xx_dm_reg *dm_regs = dd->quirks->dm_regs;
+
+	if (power_supply_get_battery_info(dd->bat, &info) < 0)
+		return;
+
+	if (!dm_regs) {
+		dev_warn(dd->dev, "data memory update not supported for chip\n");
+		return;
+	}
+
+	if (info.energy_full_design_uwh != info.charge_full_design_uah) {
+		if (info.energy_full_design_uwh == -EINVAL)
+			dev_warn(dd->dev, "missing battery:energy-full-design-microwatt-hours\n");
+		else if (info.charge_full_design_uah == -EINVAL)
+			dev_warn(dd->dev, "missing battery:charge-full-design-microamp-hours\n");
+	}
+
+	// assume min == 0
+	max = dm_regs[BQ27XXX_DM_DESIGN_ENERGY].max;
+	if (info.energy_full_design_uwh > max * 1000) {
+		dev_err(dd->dev, "invalid battery:energy-full-design-microwatt-hours %d\n",
+			info.energy_full_design_uwh);
+		info.energy_full_design_uwh = -EINVAL;
+	}
+
+	// assume min == 0
+	max = dm_regs[BQ27XXX_DM_DESIGN_CAPACITY].max;
+	if (info.charge_full_design_uah > max * 1000) {
+		dev_err(dd->dev, "invalid battery:charge-full-design-microamp-hours %d\n",
+			info.charge_full_design_uah);
+		info.charge_full_design_uah = -EINVAL;
+	}
+
+	min = dm_regs[BQ27XXX_DM_TERMINATE_VOLTAGE].min;
+	max = dm_regs[BQ27XXX_DM_TERMINATE_VOLTAGE].max;
+	if ((info.voltage_min_design_uv < min * 1000 ||
+	     info.voltage_min_design_uv > max * 1000) &&
+	     info.voltage_min_design_uv != -EINVAL) {
+		dev_err(dd->dev, "invalid battery:voltage-min-design-microvolt %d\n",
+			info.voltage_min_design_uv);
+		info.voltage_min_design_uv = -EINVAL;
+	}
+
+	if ((info.energy_full_design_uwh != -EINVAL &&
+	     info.charge_full_design_uah != -EINVAL) ||
+	     info.voltage_min_design_uv  != -EINVAL)
+		bq34z1xx_gauge_set_config(di, &info);
+}*/
+
+static void bq34z1xx_external_power_changed(struct power_supply *psy)
+{
+	struct bq34z1xx_gauge_data *dd = power_supply_get_drvdata(psy);
+
+	cancel_delayed_work_sync(&dd->work);
+	schedule_delayed_work(&dd->work, 0);
+}
+
+static int bq34z1xx_gauge_startup(struct bq34z1xx_gauge_data *dd)
+{
+	struct power_supply_desc *psy_desc;
+	struct power_supply_config psy_cfg = {
+		.of_node = dd->dev->of_node,
+		.drv_data = dd,
+	};
+
+	INIT_DELAYED_WORK(&dd->work, bq34z1xx_gauge_poll);
+	mutex_init(&dd->lock);
+
+	psy_desc = devm_kzalloc(dd->dev, sizeof(*psy_desc), GFP_KERNEL);
+	if (!psy_desc)
+		return -ENOMEM;
+
+	psy_desc->name	= dd->name;
+	psy_desc->type	= POWER_SUPPLY_TYPE_BATTERY;
+	psy_desc->properties = dd->quirks->props;
+	psy_desc->num_properties = dd->quirks->num_props;
+	psy_desc->get_property = bq34z1xx_gauge_get_property;
+	psy_desc->external_power_changed = bq34z1xx_external_power_changed;
+
+	dd->bat = power_supply_register_no_ws(dd->dev, psy_desc, &psy_cfg);
+	if (IS_ERR(dd->bat)) {
+		dev_err(dd->dev, "failed to register battery\n");
+		return PTR_ERR(dd->bat);
+	}
+
+	//bq34z1xx_gauge_settings(dd);
+	bq34z1xx_gauge_update(dd);
+
+	mutex_lock(&bq34z1xx_list_lock);
+	list_add(&dd->list, &bq34z1xx_devices);
+	mutex_unlock(&bq34z1xx_list_lock);
+
+	/* Schedule a polling after about 1 min */
+	schedule_delayed_work(&dd->work, 60 * HZ);
+
+	return 0;
+}
+
+static void bq34z1xx_gauge_shutdown(struct bq34z1xx_gauge_data *dd)
+{
+	/*
+	 * power_supply_unregister call bq27xxx_battery_get_property which
+	 * call bq27xxx_battery_poll.
+	 * Make sure that bq27xxx_battery_poll will not call
+	 * schedule_delayed_work again after unregister (which cause OOPS).
+	 */
+	poll_interval = 0;
+
+	cancel_delayed_work_sync(&dd->work);
+
+	power_supply_unregister(dd->bat);
+
+	mutex_lock(&bq34z1xx_list_lock);
+	list_del(&dd->list);
+	mutex_unlock(&bq34z1xx_list_lock);
+
+	mutex_destroy(&dd->lock);
+}
+
+static bool bq34z100g1_regmap_is_writeable(struct device *dev, unsigned int reg)
+{
+	struct bq34z1xx_gauge_data *dd = dev_get_drvdata(dev);
+	int reg_index = bq34z1xx_reg_index(dd, reg);
+
+	switch (reg_index) {
+	case BQ34Z1XX_REG_CNTL:
+		return true;
+	default:
+		return false;
+	}
+}
+
+static int bq34z1xx_alloc_regmap_fields(struct bq34z1xx_gauge_data *dd)
+{
+	int i, ret;
+
+	dd->regmap_fields = devm_kzalloc(dd->dev,
+				BQ34Z1XX_NUM_REGF * sizeof(*dd->regmap_fields),
+				GFP_KERNEL);
+	if (!dd->regmap_fields)
+                return -ENOMEM;
+
+	for (i = 0; i < BQ34Z1XX_NUM_REGF; i++) {
+		dd->regmap_fields[i] = devm_regmap_field_alloc(dd->dev,
+							dd->regmap,
+							dd->quirks->reg_fields[i]);
+		if (IS_ERR(dd->regmap_fields[i])) {
+			ret = PTR_ERR(dd->regmap_fields[i]);
+			dev_err(dd->dev, "failed to allocate regmap field: %d\n", ret);
+			return ret;
+		}
+	}
+
+	return 0;
+}
+
+static irqreturn_t bq34z1xx_gauge_irq_handler_thread(int irq, void *data)
+{
+	struct bq34z1xx_gauge_data *dd = data;
+
+	bq34z1xx_gauge_update(dd);
+
+	return IRQ_HANDLED;
+}
+
+static const struct regmap_config bq34z100g1_regmap_cfg = {
+	.reg_bits = 8,
+	.val_bits = 16,
+	.val_format_endian = REGMAP_ENDIAN_LITTLE,
+	.cache_type = REGCACHE_NONE,
+	.max_register = 0x3C,
+	.writeable_reg = bq34z100g1_regmap_is_writeable,
+};
+
+static const struct bq34z1xx_gauge_quirks bq34z100g1_quirks = {
+	.regmap_cfg	= &bq34z100g1_regmap_cfg,
+	.reg_fields	= bq34z100g1_reg_fields,
+	.regs		= bq34z100g1_regs,
+	.props		= bq34z100g1_ps_props,
+	.num_props	= ARRAY_SIZE(bq34z100g1_ps_props),
+	.unseal_key	= 0x04143672,
+};
+
+static int bq34z1xx_gauge_i2c_probe(struct i2c_client *i2c,
+				    const struct i2c_device_id *id)
+{
+	struct bq34z1xx_gauge_data *dd;
+	int ret;
+	char *name;
+	int num;
+
+	/* Get new ID for the new battery device */
+	mutex_lock(&bq34z1xx_id_lock);
+	num = idr_alloc(&bq34z1xx_id, i2c, 0, 0, GFP_KERNEL);
+	mutex_unlock(&bq34z1xx_id_lock);
+	if (num < 0)
+		return num;
+
+	name = devm_kasprintf(&i2c->dev, GFP_KERNEL, "%s-%d", id->name, num);
+	if (!name) {
+		ret = -ENOMEM;
+		goto err_failed;
+	}
+
+	dd = devm_kzalloc(&i2c->dev, sizeof(*dd), GFP_KERNEL);
+	if (!dd) {
+		ret = -ENOMEM;
+                goto err_failed;
+	}
+
+	dd->id = num;
+	dd->dev = &i2c->dev;
+	dd->chip = id->driver_data;
+	dd->name = name;
+
+	dd->quirks = of_device_get_match_data(&i2c->dev);
+        if (!dd->quirks) {
+                dev_err(&i2c->dev, "failed to get quirks for chip: %d\n",
+                	(int)id->driver_data);
+                ret = -ENODEV;
+                goto err_failed;
+        }
+
+	dd->regmap = devm_regmap_init_i2c(i2c, dd->quirks->regmap_cfg);
+	if (IS_ERR(dd->regmap)) {
+		ret = PTR_ERR(dd->regmap);
+		dev_err(&i2c->dev,
+			"failed to allocate register map: %d\n", ret);
+		goto err_failed;
+	}
+
+	ret = bq34z1xx_alloc_regmap_fields(dd);
+	if (ret)
+		goto err_failed;
+
+	ret = bq34z1xx_gauge_startup(dd);
+	if (ret)
+		goto err_failed;
+
+	i2c_set_clientdata(i2c, dd);
+
+	if (i2c->irq) {
+		ret = devm_request_threaded_irq(&i2c->dev, i2c->irq,
+						NULL,
+						bq34z1xx_gauge_irq_handler_thread,
+						IRQF_ONESHOT,
+						dd->name, dd);
+		if (ret) {
+			dev_err(&i2c->dev, "unable to register IRQ %d: %d\n",
+				i2c->irq, ret);
+			return ret;
+		}
+	}
+
+	return 0;
+
+err_failed:
+	mutex_lock(&bq34z1xx_id_lock);
+	idr_remove(&bq34z1xx_id, num);
+	mutex_unlock(&bq34z1xx_id_lock);
+
+	return ret;
+}
+
+static int bq34z1xx_gauge_i2c_remove(struct i2c_client *i2c)
+{
+	struct bq34z1xx_gauge_data *dd = i2c_get_clientdata(i2c);
+
+	bq34z1xx_gauge_shutdown(dd);
+
+	mutex_lock(&bq34z1xx_id_lock);
+	idr_remove(&bq34z1xx_id, dd->id);
+	mutex_unlock(&bq34z1xx_id_lock);
+
+	return 0;
+}
+
+
+static const struct i2c_device_id bq34z1xx_gauge_i2c_id[] = {
+	{ "bq34z100-g1", BQ34Z100_G1 },
+	{ /*sentinel*/ },
+};
+MODULE_DEVICE_TABLE(i2c, bq34z1xx_gauge_i2c_id);
+
+
+static const struct of_device_id bq34z1xx_gauge_i2c_of_match[] = {
+	{
+		.compatible	= "ti,bq34z100-g1",
+		.data		= &bq34z100g1_quirks,
+	},
+	{ /*sentinel*/ },
+};
+MODULE_DEVICE_TABLE(of, bq34z1xx_gauge_i2c_of_match);
+
+
+static struct i2c_driver bq34z1xx_gauge_i2c_driver = {
+	.driver	= {
+		.name		= "bq34z1xx-gauge-i2c",
+		.of_match_table	= bq34z1xx_gauge_i2c_of_match,
+	},
+	.probe		= bq34z1xx_gauge_i2c_probe,
+	.remove		= bq34z1xx_gauge_i2c_remove,
+	.id_table	= bq34z1xx_gauge_i2c_id,
+};
+module_i2c_driver(bq34z1xx_gauge_i2c_driver);
+
+
+MODULE_AUTHOR("Sergey Suloev <ssuloev@orpaltech.com>");
+MODULE_DESCRIPTION("BQ34Z1xx standalone fuel gauge driver");
+MODULE_LICENSE("GPL");
diff --git a/include/linux/power/bq34z1xx_gauge.h b/include/linux/power/bq34z1xx_gauge.h
new file mode 100644
index 0000000..aa66cd3
--- /dev/null
+++ b/include/linux/power/bq34z1xx_gauge.h
@@ -0,0 +1,68 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+#ifndef __LINUX_BQ34Z1XX_GAUGE_H__
+#define __LINUX_BQ34Z1XX_GAUGE_H__
+
+
+enum bq34z1xx_chip {
+	BQ34Z100_G1 = 1,        /* bq34z100-G1 */
+};
+
+/*struct bq34z1xx_gauge_data;
+struct bq34z1xx_io_methods {
+	int (*read)(struct bq34z1xx_gauge_data *dd, u8 reg, bool single);
+	int (*write)(struct bq34z1xx_gauge_data *dd, u8 reg, int value, bool single);
+	int (*read_bulk)(struct bq34z1xx_gauge_data *dd, u8 reg, u8 *data, int len);
+	int (*write_bulk)(struct bq34z1xx_gauge_data *dd, u8 reg, const u8 *data, int len);
+};*/
+
+struct bq34z1xx_gauge_cache {
+	int status;
+	int temperature;
+	int time_to_empty_avg;
+	int time_to_full_avg;
+	int charge_full;
+	int cycle_count;
+	int state_of_charge;
+	int energy;
+	int current_avg;
+	int power_avg;
+	int health;
+};
+
+struct bq34z1xx_dm_reg;
+
+struct bq34z1xx_gauge_quirks {
+	const struct regmap_config	*regmap_cfg;
+	const struct reg_field		*reg_fields;
+	const u8			*regs;
+	struct bq34z1xx_dm_reg          *dm_regs;
+
+	u32				unseal_key;
+
+	enum power_supply_property	*props;
+	size_t				num_props;
+};
+
+struct bq34z1xx_gauge_data {
+	struct device			*dev;
+	int				id;
+	enum bq34z1xx_chip		chip;
+	const char			*name;
+
+	struct regmap			*regmap;
+	struct regmap_field		**regmap_fields;
+	struct bq34z1xx_gauge_quirks	*quirks;
+
+	struct bq34z1xx_gauge_cache	cache;
+
+	int				design_capacity;
+	unsigned long			last_update;
+	struct delayed_work		work;
+
+	struct power_supply		*bat;
+
+	struct list_head		list;
+	struct mutex			lock;
+};
+
+#endif	// __LINUX_BQ34Z1XX_GAUGE_H__
-- 
2.17.1

