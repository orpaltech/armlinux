From 0dc4e78f45476a8522db7aac08df59c2ed27273c Mon Sep 17 00:00:00 2001
From: Sergey Suloev <ssuloev@orpaltech.com>
Date: Sat, 3 Aug 2019 00:04:38 +0300
Subject: [PATCH] input: Use reset controller in edt-ft5x06 driver

---
 drivers/input/touchscreen/edt-ft5x06.c | 100 +++++++++++++------------
 1 file changed, 54 insertions(+), 46 deletions(-)

diff --git a/drivers/input/touchscreen/edt-ft5x06.c b/drivers/input/touchscreen/edt-ft5x06.c
index 3cc4341..f89c63c 100644
--- a/drivers/input/touchscreen/edt-ft5x06.c
+++ b/drivers/input/touchscreen/edt-ft5x06.c
@@ -13,6 +13,8 @@
  *    http://www.glyn.com/Products/Displays
  */
 
+#define DEBUG
+
 #include <linux/module.h>
 #include <linux/ratelimit.h>
 #include <linux/irq.h>
@@ -27,6 +29,8 @@
 #include <linux/gpio/consumer.h>
 #include <linux/input/mt.h>
 #include <linux/input/touchscreen.h>
+#include <linux/regulator/consumer.h>
+#include <linux/reset.h>
 #include <asm/unaligned.h>
 
 #define WORK_REGISTER_THRESHOLD		0x00
@@ -89,8 +93,8 @@ struct edt_ft5x06_ts_data {
 	u16 num_x;
 	u16 num_y;
 
-	struct gpio_desc *reset_gpio;
-	struct gpio_desc *wake_gpio;
+	struct regulator *power;
+	struct reset_control *reset;
 
 #if defined(CONFIG_DEBUG_FS)
 	struct dentry *debug_dir;
@@ -1038,66 +1042,73 @@ edt_ft5x06_ts_set_regs(struct edt_ft5x06_ts_data *tsdata)
 	}
 }
 
+static void edt_ft5x06_disable_supplies(void *arg)
+{
+	struct edt_ft5x06_ts_data *data = arg;
+
+	regulator_disable(data->power);
+}
+
 static int edt_ft5x06_ts_probe(struct i2c_client *client,
-					 const struct i2c_device_id *id)
+			       const struct i2c_device_id *id)
 {
 	const struct edt_i2c_chip_data *chip_data;
 	struct edt_ft5x06_ts_data *tsdata;
+	struct device *dev = &client->dev;
 	struct input_dev *input;
 	unsigned long irq_flags;
 	int error;
 	char fw_version[EDT_NAME_LEN];
 
-	dev_dbg(&client->dev, "probing for EDT FT5x06 I2C\n");
+	dev_dbg(dev, "probing for EDT FT5x06 I2C\n");
 
-	tsdata = devm_kzalloc(&client->dev, sizeof(*tsdata), GFP_KERNEL);
+	tsdata = devm_kzalloc(dev, sizeof(*tsdata), GFP_KERNEL);
 	if (!tsdata) {
-		dev_err(&client->dev, "failed to allocate driver data.\n");
+		dev_err(dev, "failed to allocate driver data.\n");
 		return -ENOMEM;
 	}
 
-	chip_data = device_get_match_data(&client->dev);
+	chip_data = device_get_match_data(dev);
 	if (!chip_data)
 		chip_data = (const struct edt_i2c_chip_data *)id->driver_data;
 	if (!chip_data || !chip_data->max_support_points) {
-		dev_err(&client->dev, "invalid or missing chip data\n");
+		dev_err(dev, "invalid or missing chip data\n");
 		return -EINVAL;
 	}
 
 	tsdata->max_support_points = chip_data->max_support_points;
 
-	tsdata->reset_gpio = devm_gpiod_get_optional(&client->dev,
-						     "reset", GPIOD_OUT_HIGH);
-	if (IS_ERR(tsdata->reset_gpio)) {
-		error = PTR_ERR(tsdata->reset_gpio);
-		dev_err(&client->dev,
-			"Failed to request GPIO reset pin, error %d\n", error);
+	tsdata->power = devm_regulator_get(dev, "power");
+	if (IS_ERR(tsdata->power)) {
+		error = PTR_ERR(tsdata->power);
+		dev_err(dev, "couldn't get power supply: %d\n", error);
 		return error;
 	}
 
-	tsdata->wake_gpio = devm_gpiod_get_optional(&client->dev,
-						    "wake", GPIOD_OUT_LOW);
-	if (IS_ERR(tsdata->wake_gpio)) {
-		error = PTR_ERR(tsdata->wake_gpio);
-		dev_err(&client->dev,
-			"Failed to request GPIO wake pin, error %d\n", error);
+	/* power up */
+	error = regulator_enable(tsdata->power);
+	if (error)
 		return error;
-	}
 
-	if (tsdata->wake_gpio) {
-		usleep_range(5000, 6000);
-		gpiod_set_value_cansleep(tsdata->wake_gpio, 1);
-	}
+	error = devm_add_action_or_reset(dev,
+					 edt_ft5x06_disable_supplies,
+					 tsdata);
+	if (error)
+		return error;
 
-	if (tsdata->reset_gpio) {
-		usleep_range(5000, 6000);
-		gpiod_set_value_cansleep(tsdata->reset_gpio, 0);
-		msleep(300);
+	tsdata->reset = devm_reset_control_get(dev, "reset");
+	if (IS_ERR(tsdata->reset)) {
+		error = PTR_ERR(tsdata->reset);
+		dev_err(dev, "couldn't get reset line: %d\n", error);
+		return error;
 	}
 
-	input = devm_input_allocate_device(&client->dev);
+	/* reset the panel*/
+	reset_control_reset(tsdata->reset);
+
+	input = devm_input_allocate_device(dev);
 	if (!input) {
-		dev_err(&client->dev, "failed to allocate input device.\n");
+		dev_err(dev, "failed to allocate input device.\n");
 		return -ENOMEM;
 	}
 
@@ -1108,16 +1119,15 @@ static int edt_ft5x06_ts_probe(struct i2c_client *client,
 
 	error = edt_ft5x06_ts_identify(client, tsdata, fw_version);
 	if (error) {
-		dev_err(&client->dev, "touchscreen probe failed\n");
+		dev_err(dev, "touchscreen probe failed\n");
 		return error;
 	}
 
 	edt_ft5x06_ts_set_regs(tsdata);
-	edt_ft5x06_ts_get_defaults(&client->dev, tsdata);
+	edt_ft5x06_ts_get_defaults(dev, tsdata);
 	edt_ft5x06_ts_get_parameters(tsdata);
 
-	dev_dbg(&client->dev,
-		"Model \"%s\", Rev. \"%s\", %dx%d sensors\n",
+	dev_dbg(dev, "Model \"%s\", Rev. \"%s\", %dx%d sensors\n",
 		tsdata->name, fw_version, tsdata->num_x, tsdata->num_y);
 
 	input->name = tsdata->name;
@@ -1144,7 +1154,7 @@ static int edt_ft5x06_ts_probe(struct i2c_client *client,
 	error = input_mt_init_slots(input, tsdata->max_support_points,
 				INPUT_MT_DIRECT);
 	if (error) {
-		dev_err(&client->dev, "Unable to init MT slots.\n");
+		dev_err(dev, "Unable to init MT slots.\n");
 		return error;
 	}
 
@@ -1155,15 +1165,15 @@ static int edt_ft5x06_ts_probe(struct i2c_client *client,
 		irq_flags = IRQF_TRIGGER_FALLING;
 	irq_flags |= IRQF_ONESHOT;
 
-	error = devm_request_threaded_irq(&client->dev, client->irq,
+	error = devm_request_threaded_irq(dev, client->irq,
 					NULL, edt_ft5x06_ts_isr, irq_flags,
 					client->name, tsdata);
 	if (error) {
-		dev_err(&client->dev, "Unable to request touchscreen IRQ.\n");
+		dev_err(dev, "Unable to request touchscreen IRQ.\n");
 		return error;
 	}
 
-	error = devm_device_add_group(&client->dev, &edt_ft5x06_attr_group);
+	error = devm_device_add_group(dev, &edt_ft5x06_attr_group);
 	if (error)
 		return error;
 
@@ -1171,14 +1181,10 @@ static int edt_ft5x06_ts_probe(struct i2c_client *client,
 	if (error)
 		return error;
 
-	edt_ft5x06_ts_prepare_debugfs(tsdata, dev_driver_string(&client->dev));
-	device_init_wakeup(&client->dev, 1);
+	edt_ft5x06_ts_prepare_debugfs(tsdata, dev_driver_string(dev));
+	device_init_wakeup(dev, 1);
 
-	dev_dbg(&client->dev,
-		"EDT FT5x06 initialized: IRQ %d, WAKE pin %d, Reset pin %d.\n",
-		client->irq,
-		tsdata->wake_gpio ? desc_to_gpio(tsdata->wake_gpio) : -1,
-		tsdata->reset_gpio ? desc_to_gpio(tsdata->reset_gpio) : -1);
+	dev_dbg(dev, "EDT FT5x06 initialized: IRQ %d.\n", client->irq);
 
 	return 0;
 }
@@ -1189,6 +1195,8 @@ static int edt_ft5x06_ts_remove(struct i2c_client *client)
 
 	edt_ft5x06_ts_teardown_debugfs(tsdata);
 
+	regulator_disable(tsdata->power);
+
 	return 0;
 }
 
-- 
2.17.1

