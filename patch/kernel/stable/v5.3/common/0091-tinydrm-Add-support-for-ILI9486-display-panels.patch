From e58ec815a3f83a7e562681d210257dca465e9fc7 Mon Sep 17 00:00:00 2001
From: Sergey Suloev <ssuloev@orpaltech.com>
Date: Thu, 18 Jul 2019 14:47:23 +0300
Subject: [PATCH] tinydrm: Add support for ILI9486 display panels

---
 drivers/gpu/drm/tinydrm/Kconfig   |  11 ++
 drivers/gpu/drm/tinydrm/Makefile  |   1 +
 drivers/gpu/drm/tinydrm/ili9486.c | 297 ++++++++++++++++++++++++++++++
 drivers/gpu/drm/tinydrm/ili9486.h |  95 ++++++++++
 4 files changed, 404 insertions(+)
 create mode 100644 drivers/gpu/drm/tinydrm/ili9486.c
 create mode 100644 drivers/gpu/drm/tinydrm/ili9486.h

diff --git a/drivers/gpu/drm/tinydrm/Kconfig b/drivers/gpu/drm/tinydrm/Kconfig
index 87819c8..e0ddf73 100644
--- a/drivers/gpu/drm/tinydrm/Kconfig
+++ b/drivers/gpu/drm/tinydrm/Kconfig
@@ -43,6 +43,17 @@ config TINYDRM_ILI9341
 
 	  If M is selected the module will be called ili9341.
 
+config TINYDRM_ILI9486
+	tristate "DRM support for ILI9486 display panels"
+	depends on DRM_TINYDRM && SPI
+	depends on BACKLIGHT_CLASS_DEVICE
+	select TINYDRM_MIPI_DBI
+	help
+	  DRM driver for the following Ilitek ILI9486 panels:
+	  * Waveshare 3.5inch RPi LCD, 320*480
+
+	  If M is selected the module will be called ili9486.
+
 config TINYDRM_MI0283QT
 	tristate "DRM support for MI0283QT"
 	depends on DRM_TINYDRM && SPI
diff --git a/drivers/gpu/drm/tinydrm/Makefile b/drivers/gpu/drm/tinydrm/Makefile
index 48ec8ed..4e541f6 100644
--- a/drivers/gpu/drm/tinydrm/Makefile
+++ b/drivers/gpu/drm/tinydrm/Makefile
@@ -8,6 +8,7 @@ obj-$(CONFIG_TINYDRM_MIPI_DBI)		+= mipi-dbi.o
 obj-$(CONFIG_TINYDRM_HX8357D)		+= hx8357d.o
 obj-$(CONFIG_TINYDRM_ILI9225)		+= ili9225.o
 obj-$(CONFIG_TINYDRM_ILI9341)		+= ili9341.o
+obj-$(CONFIG_TINYDRM_ILI9486)		+= ili9486.o
 obj-$(CONFIG_TINYDRM_MI0283QT)		+= mi0283qt.o
 obj-$(CONFIG_TINYDRM_REPAPER)		+= repaper.o
 obj-$(CONFIG_TINYDRM_ST7586)		+= st7586.o
diff --git a/drivers/gpu/drm/tinydrm/ili9486.c b/drivers/gpu/drm/tinydrm/ili9486.c
new file mode 100644
index 0000000..9afbdbb
--- /dev/null
+++ b/drivers/gpu/drm/tinydrm/ili9486.c
@@ -0,0 +1,297 @@
+/*
+ * DRM driver for ILI9486 LCD display panels
+ *
+ * Copyright 2017 Sergey Suloev <ssuloev@orpaltech.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ */
+
+#include <linux/version.h>
+#include <linux/delay.h>
+#include <linux/gpio/consumer.h>
+#include <linux/module.h>
+#include <linux/of_device.h>
+#include <linux/property.h>
+#include <linux/spi/spi.h>
+
+#include <drm/tinydrm/mipi-dbi.h>
+#include <drm/tinydrm/tinydrm-helpers.h>
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4,16,0)
+#include <drm/drm_fb_helper.h>
+#endif
+#include <drm/drm_gem_framebuffer_helper.h>
+#include <video/mipi_display.h>
+#include "ili9486.h"
+
+/*
+ * Extend mipi_dbi struct to hold our private data
+ */
+struct mipi_dbi_ex {
+        struct mipi_dbi b;
+        unsigned int bgr;
+};
+
+/*
+ * The display has a SPI to 16-bit parallel bus converter in front of the
+ * display controller. This means that 8-bit values has to be transferred
+ * as 16-bit.
+ */
+static int waveshare35_command(struct mipi_dbi *mipi, u8 cmd, u8 *par, size_t num)
+{
+	struct spi_device *spi = mipi->spi;
+	void *data = par;
+	u32 speed_hz = 0;
+	int i, ret;
+	u16 *buf;
+
+	buf = kmalloc(32 * sizeof(u16), GFP_KERNEL);
+	if (!buf)
+		return -ENOMEM;
+
+	if (num == 0)
+		DRM_DEBUG_DRIVER("cmd=%02x\n", cmd);
+	else if (num <= 32)
+		DRM_DEBUG_DRIVER("cmd=%02x, par=%*ph\n", cmd, (int)num, par);
+	else
+		DRM_DEBUG_DRIVER("cmd=%02x, len=%zu\n", cmd, num);
+
+	/*
+	 * The host supports only 8-bit on DMA capable SPI controller
+	 * and is little endian, so byte swapping is needed.
+	 */
+	buf[0] = cpu_to_be16(cmd);
+	gpiod_set_value_cansleep(mipi->dc, 0);
+
+	/*
+	 * Many controllers have a max speed of 10MHz, but can be pushed way beyond
+	 * that. Increase reliability by running pixel data at max speed and the rest
+	 * at a lower one, preventing transfer glitches from messing up the init settings.
+	 */
+	ret = tinydrm_spi_transfer(spi, 10000000, NULL, 8, buf, 2);
+	if (ret || !num)
+		goto cleanup;
+
+	/* 8-bit configuration data, not 16-bit pixel data */
+	if (num <= 32) {
+		for (i = 0; i < num; i++)
+			buf[i] = cpu_to_be16(par[i]);
+		num *= 2;
+		speed_hz = 10000000; /* slow down config */
+		data = buf;
+	}
+
+	gpiod_set_value_cansleep(mipi->dc, 1);
+	ret = tinydrm_spi_transfer(spi, speed_hz, NULL, 8, data, num);
+cleanup:
+	kfree(buf);
+
+	return ret;
+}
+
+static void waveshare35_enable(struct drm_simple_display_pipe *pipe,
+			       struct drm_crtc_state *crtc_state,
+			       struct drm_plane_state *plane_state)
+{
+	struct tinydrm_device *tdev = pipe_to_tinydrm(pipe);
+	struct mipi_dbi *mipi = mipi_dbi_from_tinydrm(tdev);
+	struct mipi_dbi_ex *mipiex = (struct mipi_dbi_ex*)mipi;
+	struct drm_framebuffer *fb = pipe->plane.fb;
+	u8 addr_mode;
+
+	DRM_DEBUG_KMS("\n");
+
+	mipi_dbi_hw_reset(mipi);
+
+	mipi_dbi_command(mipi, ILI9486_SLEEP_OUT);
+
+	msleep(120);
+
+	mipi_dbi_command(mipi, ILI9486_IFACE_MODE_CTRL, 0x00);
+
+	/* Power Control 3 */
+	mipi_dbi_command(mipi, ILI9486_PWR3_CTRL, ILI9486_PWR3_DCA0_2H | ILI9486_PWR3_DCA1_8H);
+
+	/* VCOM Control */
+	mipi_dbi_command(mipi, ILI9486_VCOM_CTRL, 0x00, 0x00, 0x00, 0x00);
+
+	/* Positive Gamma Control */
+	mipi_dbi_command(mipi, ILI9486_PGAM_CTRL, 0x0f, 0x1f, 0x1c, 0x0c, 0x0f,
+						  0x08, 0x48, 0x98, 0x37, 0x0a,
+						  0x13, 0x04, 0x11, 0x0d, 0x00);
+	/* Negative Gamma Control */
+	mipi_dbi_command(mipi, ILI9486_NGAM_CTRL, 0x0f, 0x32, 0x2e, 0x0b, 0x0d,
+						  0x05, 0x47, 0x75, 0x37, 0x06,
+						  0x10, 0x03, 0x24, 0x20, 0x00);
+	/* Digital Gamma Control 1 */
+	mipi_dbi_command(mipi, ILI9486_DIGIGAM1_CTRL,  0x0f, 0x32, 0x2e, 0x0b, 0x0d,
+						       0x05, 0x47, 0x75, 0x37, 0x06,
+						       0x10, 0x03, 0x24, 0x20, 0x00);
+
+	switch (mipi->rotation) {
+	case 270:
+		addr_mode = ILI9486_MX;
+		break;
+	case 180:
+		addr_mode = ILI9486_MV;
+		break;
+	case 90:
+		addr_mode = ILI9486_MY;
+		break;
+	case 0:
+	default:
+		addr_mode = ILI9486_MY | ILI9486_MX | ILI9486_MV;
+		break;
+	}
+	if (mipiex->bgr) {
+		DRM_DEBUG_DRIVER("Add BGR flag to address mode\n");
+		addr_mode |= ILI9486_BGR;
+	}
+	mipi_dbi_command(mipi, ILI9486_MEM_ACCESS_CTRL, addr_mode);
+
+	/* Pixel Format */
+	mipi_dbi_command(mipi, ILI9486_IFACE_PIXEL_FORMAT, ILI9486_DBI_BPP16 | ILI9486_DPI_BPP16);
+
+	mipi_dbi_command(mipi, ILI9486_DISPLAY_ON);
+
+	mipi->enabled = true;
+}
+
+static const struct drm_simple_display_pipe_funcs waveshare35_funcs = {
+	.enable		= waveshare35_enable,
+	.disable	= mipi_dbi_pipe_disable,
+	.update		= tinydrm_display_pipe_update,
+	.prepare_fb	= drm_gem_fb_simple_display_pipe_prepare_fb,
+};
+
+static const struct drm_display_mode ili9486_mode = {
+	TINYDRM_MODE(480, 320, 73, 49),
+};
+
+static struct drm_driver ili9486_driver = {
+	.driver_features	= DRIVER_GEM | DRIVER_MODESET | DRIVER_PRIME |
+				  DRIVER_ATOMIC,
+	TINYDRM_GEM_DRIVER_OPS,
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4,16,0)
+	.lastclose              = drm_fb_helper_lastclose,
+#else
+	.lastclose		= tinydrm_lastclose,
+#endif
+	.debugfs_init		= mipi_dbi_debugfs_init,
+	.name			= "ili9486",
+	.desc			= "ILI9486 3.5inch LCD display panel",
+	.date			= "20171208",
+	.major			= 1,
+	.minor			= 0,
+};
+
+static const struct of_device_id ili9486_of_match[] = {
+	{ .compatible = "waveshare,rpi-lcd-35", .data = &waveshare35_funcs },
+	{}
+};
+MODULE_DEVICE_TABLE(of, ili9486_of_match);
+
+
+static int ili9486_probe(struct spi_device *spi)
+{
+	const struct drm_simple_display_pipe_funcs *funcs;
+	const struct of_device_id *match;
+	struct device *dev = &spi->dev;
+	struct tinydrm_device *tdev;
+	struct mipi_dbi *mipi;
+	struct mipi_dbi_ex *mipiex;
+	struct gpio_desc *dc;
+	u32 rotation = 0;
+	int ret;
+
+	match = of_match_device(ili9486_of_match, dev);
+	if (!match)
+		return -ENODEV;
+
+	funcs = match->data;
+
+	mipi = devm_kzalloc(dev, sizeof(*mipiex), GFP_KERNEL);
+	if (!mipi)
+		return -ENOMEM;
+
+	mipi->reset = devm_gpiod_get_optional(dev, "reset", GPIOD_OUT_HIGH);
+	if (IS_ERR(mipi->reset)) {
+		dev_err(dev, "Failed to get gpio 'reset'\n");
+		return PTR_ERR(mipi->reset);
+	}
+
+	dc = devm_gpiod_get(dev, "dc", GPIOD_OUT_LOW);
+	if (IS_ERR(dc)) {
+		dev_err(dev, "Failed to get gpio 'dc'\n");
+		return PTR_ERR(dc);
+	}
+
+	device_property_read_u32(dev, "rotation", &rotation);
+
+	/* Cast to extended structure */
+	mipiex = (struct mipi_dbi_ex *)mipi;
+	device_property_read_u32(dev, "bgr", &mipiex->bgr);
+
+	ret = mipi_dbi_spi_init(spi, mipi, dc);
+	if (ret) {
+	   	dev_err(dev, "Error in mipi_dbi_spi_init()\n");
+		return ret;
+	}
+
+	ret = mipi_dbi_init(dev, mipi, funcs, &ili9486_driver,
+			    &ili9486_mode, rotation);
+	if (ret) {
+	   	dev_err(dev, "Error in mipi_dbi_init()\n");
+		return ret;
+	}
+
+	if (strcmp(match->compatible,"waveshare,rpi-lcd-35") == 0) {
+		mipi->command = waveshare35_command;
+	}
+	/* Reading is not supported */
+	mipi->read_commands = NULL;
+
+	tdev = &mipi->tinydrm;
+
+	ret = devm_tinydrm_register(tdev);
+	if (ret) {
+	   	dev_err(dev, "Error in devm_tinydrm_register()\n");
+		return ret;
+	}
+
+	spi_set_drvdata(spi, mipi);
+
+	DRM_DEBUG_DRIVER("Initialized %s:%s @%uMHz swap_bytes=%d on minor %d\n",
+			 tdev->drm->driver->name, dev_name(dev),
+			 spi->max_speed_hz / 1000000, mipi->swap_bytes,
+			 tdev->drm->primary->index);
+
+	return 0;
+}
+
+static void ili9486_shutdown(struct spi_device *spi)
+{
+	struct mipi_dbi *mipi = spi_get_drvdata(spi);
+
+	tinydrm_shutdown(&mipi->tinydrm);
+}
+
+static struct spi_driver ili9486_spi_driver = {
+	.driver = {
+		.name = "ili9486",
+		.owner = THIS_MODULE,
+		.of_match_table = ili9486_of_match,
+	},
+	.probe = ili9486_probe,
+	.shutdown = ili9486_shutdown,
+};
+module_spi_driver(ili9486_spi_driver);
+
+MODULE_ALIAS("spi:ili9486");
+MODULE_ALIAS("spi:rpi-lcd-35");
+
+MODULE_DESCRIPTION("DRM driver for ILI9486 LCD display panels");
+MODULE_AUTHOR("Sergey Suloev <ssuloev@orpaltech.com>");
+MODULE_LICENSE("GPL");
diff --git a/drivers/gpu/drm/tinydrm/ili9486.h b/drivers/gpu/drm/tinydrm/ili9486.h
new file mode 100644
index 0000000..b628d4a
--- /dev/null
+++ b/drivers/gpu/drm/tinydrm/ili9486.h
@@ -0,0 +1,95 @@
+/*
+ * ILI9486 LCD controller
+ *
+ * Copyright 2017 Sergey Suloev <ssuloev@orpaltech.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ */
+
+
+#ifndef __LINUX_ILI9486_H
+#define __LINUX_ILI9486_H
+
+
+/*
+ * Ilitek ILI9486 display controller commands
+ */
+#define ILI9486_SLEEP_IN                0x10    /* Sleep IN */
+#define ILI9486_SLEEP_OUT               0x11	/* Sleep OUT */
+#define ILI9486_DISPLAY_OFF             0x28    /* Display OFF */
+#define ILI9486_DISPLAY_ON              0x29    /* Display ON */
+#define ILI9486_MEM_ACCESS_CTRL         0x36	/* Memory Access Control */
+#define ILI9486_IFACE_PIXEL_FORMAT      0x3A    /* Interface Pixel Format */
+#define ILI9486_IFACE_MODE_CTRL         0xB0    /* Interface mode Control */
+#define ILI9486_PWR3_CTRL               0xC2    /* Power Control 3 (For Normal Mode) */
+#define ILI9486_VCOM_CTRL               0xC5	/* VCOM Control */
+#define ILI9486_PGAM_CTRL               0xE0	/* PGAMCTRL(Positive Gamma Control)*/
+#define ILI9486_NGAM_CTRL               0xE1	/* NGAMCTRL (Negative Gamma Correction)*/
+#define ILI9486_DIGIGAM1_CTRL           0xE2	/* Digital Gamma Control 1 */
+
+
+/*
+ * ILI9486 pixel format flags
+ *
+ * DBI is the pixel format of CPU interface
+ */
+#define ILI9486_DBI_BPP16               0x05	/* 16 bits / pixel */
+#define ILI9486_DBI_BPP18               0x06    /* 18 bits / pixel */
+
+/*
+ * DPI is the pixel format select of RGB interface
+ */
+#define ILI9486_DPI_BPP16               0x50    /* 16 bits / pixel */
+#define ILI9486_DPI_BPP18               0x60    /* 18 bits / pixel */
+
+
+/*
+ * ILI9486 power control 3 flags
+ *
+ * DCA0 - Selects the operating frequency of the step-up circuit 1/4/5 for Normal mode. 
+ *      The higher step-up operating frequency enhances the drivability of the step-up 
+ *      circuit and the quality of display but increases the current consumption. 
+ *      Adjust the frequency taking the trade-off between the display quality and 
+ *      the current consumption into account. 
+ */
+#define ILI9486_PWR3_DCA0_0_125H        0x00
+#define ILI9486_PWR3_DCA0_0_25H         0x01
+#define ILI9486_PWR3_DCA0_0_5H          0x02
+#define ILI9486_PWR3_DCA0_1H            0x03
+#define ILI9486_PWR3_DCA0_2H            0x04
+#define ILI9486_PWR3_DCA0_4H            0x05
+#define ILI9486_PWR3_DCA0_8H            0x06
+#define ILI9486_PWR3_DCA0_16H           0x07
+
+/*
+ * DCA1 - Selects the operating frequency of the step-up circuit 2/3 for Normal mode. 
+ *      The higher step-up operating frequency enhances the drivability of the step-up 
+ *      circuit and the quality of display but increases the current consumption. 
+ *      Adjust the frequency taking the trade-off between the display quality and 
+ *      the current consumption into account. 
+ */
+#define ILI9486_PWR3_DCA1_0_5H          0x00
+#define ILI9486_PWR3_DCA1_1H            0x10
+#define ILI9486_PWR3_DCA1_2H            0x20
+#define ILI9486_PWR3_DCA1_4H            0x30
+#define ILI9486_PWR3_DCA1_8H            0x40
+#define ILI9486_PWR3_DCA1_16H           0x50
+#define ILI9486_PWR3_DCA1_32H           0x60
+#define ILI9486_PWR3_DCA1_64H           0x70
+
+
+/*
+ * ILI9486 Memory Access Control flags
+ */
+#define ILI9486_MY        BIT(7)	/* Row Address Order */
+#define ILI9486_MX        BIT(6)	/* Column Address Order */
+#define ILI9486_MV        BIT(5)	/* Row / Column Exchange */
+#define ILI9486_ML        BIT(4)	/* Vertical Refresh Order */
+#define ILI9486_BGR       BIT(3)	/* BGR Order, if set */
+#define ILI9486_MH        BIT(2)	/* Horizontal Refresh Order */
+
+#endif // __LINUX_ILI9486_H
+
-- 
2.17.1

