From 0b8dc31418b0929dad5d8cd444ea67e240f45128 Mon Sep 17 00:00:00 2001
From: Sergey Suloev <ssuloev@orpaltech.com>
Date: Thu, 18 Jul 2019 14:49:07 +0300
Subject: [PATCH] tinydrm: Add support for ILI9488 display panels

---
 drivers/gpu/drm/tinydrm/Kconfig   |  11 +
 drivers/gpu/drm/tinydrm/Makefile  |   1 +
 drivers/gpu/drm/tinydrm/ili9488.c | 508 ++++++++++++++++++++++++++++++
 drivers/gpu/drm/tinydrm/ili9488.h | 148 +++++++++
 4 files changed, 668 insertions(+)
 create mode 100644 drivers/gpu/drm/tinydrm/ili9488.c
 create mode 100644 drivers/gpu/drm/tinydrm/ili9488.h

diff --git a/drivers/gpu/drm/tinydrm/Kconfig b/drivers/gpu/drm/tinydrm/Kconfig
index 87819c8..5b8de8d 100644
--- a/drivers/gpu/drm/tinydrm/Kconfig
+++ b/drivers/gpu/drm/tinydrm/Kconfig
@@ -43,6 +43,17 @@ config TINYDRM_ILI9341
 
 	  If M is selected the module will be called ili9341.
 
+config TINYDRM_ILI9488
+	tristate "DRM support for ILI9488 display panels"
+	depends on DRM_TINYDRM && SPI
+	depends on BACKLIGHT_CLASS_DEVICE
+	select TINYDRM_MIPI_DBI
+	help
+	  DRM driver for the following Ilitek ILI9488 panels:
+	  * EastRising 3.5inch LCD, 320*480
+
+	  If M is selected the module will be called ili9488.
+
 config TINYDRM_MI0283QT
 	tristate "DRM support for MI0283QT"
 	depends on DRM_TINYDRM && SPI
diff --git a/drivers/gpu/drm/tinydrm/Makefile b/drivers/gpu/drm/tinydrm/Makefile
index 48ec8ed..0bbac01 100644
--- a/drivers/gpu/drm/tinydrm/Makefile
+++ b/drivers/gpu/drm/tinydrm/Makefile
@@ -8,6 +8,7 @@ obj-$(CONFIG_TINYDRM_MIPI_DBI)		+= mipi-dbi.o
 obj-$(CONFIG_TINYDRM_HX8357D)		+= hx8357d.o
 obj-$(CONFIG_TINYDRM_ILI9225)		+= ili9225.o
 obj-$(CONFIG_TINYDRM_ILI9341)		+= ili9341.o
+obj-$(CONFIG_TINYDRM_ILI9488)		+= ili9488.o
 obj-$(CONFIG_TINYDRM_MI0283QT)		+= mi0283qt.o
 obj-$(CONFIG_TINYDRM_REPAPER)		+= repaper.o
 obj-$(CONFIG_TINYDRM_ST7586)		+= st7586.o
diff --git a/drivers/gpu/drm/tinydrm/ili9488.c b/drivers/gpu/drm/tinydrm/ili9488.c
new file mode 100644
index 0000000..ef74574
--- /dev/null
+++ b/drivers/gpu/drm/tinydrm/ili9488.c
@@ -0,0 +1,508 @@
+/*
+ * DRM driver for ILI9488 LCD display panels
+ *
+ * Copyright 2017 Sergey Suloev <ssuloev@orpaltech.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ */
+
+#include <linux/version.h>
+#include <linux/backlight.h>
+#include <linux/delay.h>
+#include <linux/dma-buf.h>
+#include <linux/gpio/consumer.h>
+#include <linux/module.h>
+#include <linux/of_device.h>
+#include <linux/property.h>
+#include <linux/spi/spi.h>
+
+#include <drm/tinydrm/mipi-dbi.h>
+#include <drm/tinydrm/tinydrm-helpers.h>
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4,16,0)
+#include <drm/drm_fb_helper.h>
+#endif
+#include <drm/drm_gem_framebuffer_helper.h>
+#include <video/mipi_display.h>
+
+#include "ili9488.h"
+
+
+#ifndef MIPI_DBI_DEBUG_COMMAND
+	#define MIPI_DBI_DEBUG_COMMAND(cmd, data, len) \
+	({ \
+		if (!len) \
+			DRM_DEBUG_DRIVER("cmd=%02x\n", cmd); \
+		else if (len <= 32) \
+			DRM_DEBUG_DRIVER("cmd=%02x, par=%*ph\n", cmd, (int)len, data);\
+		else \
+			DRM_DEBUG_DRIVER("cmd=%02x, len=%zu\n", cmd, len); \
+	})
+#endif
+
+
+/*
+ * Declare structure to describe display-specific behaviours
+ */
+struct ili9488_display_data {
+	struct drm_simple_display_pipe_funcs pipe_funcs;
+	struct drm_framebuffer_funcs	fb_funcs;
+	struct drm_display_mode		mode;
+	unsigned int			bytes_per_pixel;
+	unsigned int			drm_preferred_depth;
+	int (*command)(struct mipi_dbi *mipi, u8 cmd, u8 *par, size_t num);
+};
+
+static const uint32_t ili9488_formats[] = {
+	DRM_FORMAT_RGB565,
+	DRM_FORMAT_XRGB8888,
+};
+
+static void tinydrm_xrgb8888_to_rgb666(u8 *dst, void *vaddr,
+					struct drm_framebuffer *fb,
+					struct drm_clip_rect *clip)
+{
+	size_t len = (clip->x2 - clip->x1) * sizeof(u32);
+	unsigned int x, y;
+	u32 *src, *buf;
+
+	buf = kmalloc(len, GFP_KERNEL);
+	if (!buf)
+		return;
+
+	for (y = clip->y1; y < clip->y2; y++) {
+		src = vaddr + (y * fb->pitches[0]);
+		src += clip->x1;
+		memcpy(buf, src, len);
+		src = buf;
+		for (x = clip->x1; x < clip->x2; x++) {
+			*dst++ = ((*src & 0x00FC0000) >> 16);
+			*dst++ = ((*src & 0x0000FC00) >> 8);
+			*dst++ = ((*src & 0x000000FC));
+			src++;
+		}
+	}
+
+	kfree(buf);
+}
+
+static void tinydrm_rgb565_to_rgb666(u8 *dst, void *vaddr,
+				     struct drm_framebuffer *fb,
+				     struct drm_clip_rect *clip)
+{
+	dev_err_once(fb->dev->dev,
+		     "Conversion RGB565->RGB666 not implemented\n");
+	// TODO: implement conversion
+}
+
+static int ertft_buf_copy(void *dst, struct drm_framebuffer *fb,
+			  struct drm_clip_rect *clip)
+{
+	struct drm_gem_cma_object *cma_obj = drm_fb_cma_get_gem_obj(fb, 0);
+	struct dma_buf_attachment *import_attach = cma_obj->base.import_attach;
+	struct drm_format_name_buf format_name;
+	void *src = cma_obj->vaddr;
+	int ret = 0;
+
+	if (import_attach) {
+		ret = dma_buf_begin_cpu_access(import_attach->dmabuf,
+					       DMA_FROM_DEVICE);
+		if (ret)
+			return ret;
+	}
+
+	switch (fb->format->format) {
+	case DRM_FORMAT_RGB565:
+		tinydrm_rgb565_to_rgb666(dst, src, fb, clip);
+		break;
+	case DRM_FORMAT_XRGB8888:
+		tinydrm_xrgb8888_to_rgb666(dst, src, fb, clip);
+		break;
+	default:
+		dev_err_once(fb->dev->dev, "Format is not supported: %s\n",
+			     drm_get_format_name(fb->format->format,
+						 &format_name));
+		return -EINVAL;
+	}
+
+	if (import_attach)
+		ret = dma_buf_end_cpu_access(import_attach->dmabuf,
+					     DMA_FROM_DEVICE);
+	return ret;
+}
+
+static int ertft_fb_dirty(struct drm_framebuffer *fb,
+			  struct drm_file *file_priv,
+			  unsigned int flags, unsigned int color,
+			  struct drm_clip_rect *clips,
+			  unsigned int num_clips)
+{
+	struct drm_gem_cma_object *cma_obj = drm_fb_cma_get_gem_obj(fb, 0);
+	struct tinydrm_device *tdev = fb->dev->dev_private;
+	struct mipi_dbi *mipi = mipi_dbi_from_tinydrm(tdev);
+	struct drm_clip_rect clip;
+	int ret = 0;
+	void *tr;
+	bool full;
+
+	mutex_lock(&tdev->dirty_lock);
+
+	if (!mipi->enabled)
+		goto out_unlock;
+
+	/* fbdev can flush even when we're not interested */
+	if (tdev->pipe.plane.fb != fb)
+		goto out_unlock;
+
+	full = tinydrm_merge_clips(&clip, clips, num_clips, flags,
+				   fb->width, fb->height);
+
+	DRM_DEBUG("Flushing [FB:%d] x1=%u, x2=%u, y1=%u, y2=%u\n", fb->base.id,
+		  clip.x1, clip.x2, clip.y1, clip.y2);
+
+	/* Always invoke copy buffer routine as the display supports
+		only RGB666 format which is not implemented in DRM */
+	if (1) {
+		tr = mipi->tx_buf;
+		ret = ertft_buf_copy(mipi->tx_buf, fb, &clip);
+		if (ret)
+			goto out_unlock;
+	} else {
+		tr = cma_obj->vaddr;
+	}
+
+	mipi_dbi_command(mipi, ILI9488_CMD_COLUMN_ADDRESS_SET,
+			 (clip.x1 >> 8) & 0xFF, clip.x1 & 0xFF,
+			 (clip.x2 >> 8) & 0xFF, (clip.x2 - 1) & 0xFF);
+
+	mipi_dbi_command(mipi, ILI9488_CMD_PAGE_ADDRESS_SET,
+			 (clip.y1 >> 8) & 0xFF, clip.y1 & 0xFF,
+			 (clip.y2 >> 8) & 0xFF, (clip.y2 - 1) & 0xFF);
+
+	ret = mipi_dbi_command_buf(mipi, ILI9488_CMD_MEMORY_WRITE, tr,
+				(clip.x2 - clip.x1) * (clip.y2 - clip.y1) * 3);
+
+out_unlock:
+	mutex_unlock(&tdev->dirty_lock);
+
+	if (ret)
+		dev_err_once(fb->dev->dev,
+			     "Failed to update display %d\n",
+			     ret);
+
+	return ret;
+}
+
+static int ili9488_init(struct device *dev, struct mipi_dbi *mipi,
+			const struct ili9488_display_data *quirks,
+			struct drm_driver *driver, unsigned int rotation)
+{
+	const struct drm_display_mode *mode = &quirks->mode;
+	size_t bufsize = mode->vdisplay * mode->hdisplay * quirks->bytes_per_pixel;
+	struct tinydrm_device *tdev = &mipi->tinydrm;
+	int ret;
+
+	if (!mipi->command)
+		return -EINVAL;
+
+	mutex_init(&mipi->cmdlock);
+
+	mipi->tx_buf = devm_kmalloc(dev, bufsize, GFP_KERNEL);
+	if (!mipi->tx_buf)
+		return -ENOMEM;
+
+	ret = devm_tinydrm_init(dev, tdev, &quirks->fb_funcs, driver);
+	if (ret)
+		return ret;
+
+	ret = tinydrm_display_pipe_init(tdev, &quirks->pipe_funcs,
+					DRM_MODE_CONNECTOR_VIRTUAL,
+					ili9488_formats,
+					ARRAY_SIZE(ili9488_formats),
+					mode, rotation);
+	if (ret)
+		return ret;
+
+	tdev->drm->mode_config.preferred_depth = quirks->drm_preferred_depth;
+	mipi->rotation = rotation;
+
+	if (quirks->command)
+		mipi->command = quirks->command;
+	/* Read is not supported */
+	mipi->read_commands = NULL;
+
+	drm_mode_config_reset(tdev->drm);
+
+	DRM_DEBUG_KMS("preferred_depth=%u, rotation = %u\n",
+		      tdev->drm->mode_config.preferred_depth, rotation);
+
+	return 0;
+}
+
+static void ertft_enable(struct drm_simple_display_pipe *pipe,
+			 struct drm_crtc_state *crtc_state,
+			 struct drm_plane_state *plane_state)
+{
+	struct tinydrm_device *tdev = pipe_to_tinydrm(pipe);
+	struct mipi_dbi *mipi = mipi_dbi_from_tinydrm(tdev);
+	u8 addr_mode;
+
+	DRM_DEBUG_KMS("\n");
+
+	mipi_dbi_hw_reset(mipi);
+
+
+	/* Positive Gamma Control */
+	mipi_dbi_command(mipi, ILI9488_CMD_POSITIVE_GAMMA_CORRECTION,
+			 0x00, 0x03, 0x09, 0x08, 0x16,
+			 0x0a, 0x3f, 0x78, 0x4c, 0x09,
+			 0x0a, 0x08, 0x16, 0x1a, 0x0f);
+
+	/* Negative Gamma Control */
+	mipi_dbi_command(mipi, ILI9488_CMD_NEGATIVE_GAMMA_CORRECTION,
+			 0x00, 0x16, 0x19, 0x03, 0x0f,
+			 0x05, 0x32, 0x45, 0x46, 0x04,
+			 0x0e, 0x0d, 0x35, 0x37, 0x0f);
+
+
+	/* Power Control 1 */
+	mipi_dbi_command(mipi, ILI9488_CMD_POWER_CONTROL_1, 0x17, 0x15);
+
+	/* Power Control 2 */
+	mipi_dbi_command(mipi, ILI9488_CMD_POWER_CONTROL_2, 0x41);
+
+	/* Power Control 3 (Normal mode) */
+	mipi_dbi_command(mipi, ILI9488_CMD_POWER_CONTROL_NORMAL_3, 0x44);
+
+
+	/* VCOM Control 1 */
+	mipi_dbi_command(mipi, ILI9488_CMD_VCOM_CONTROL_1, 0x00, 0x12, 0x80);
+
+
+	/* Memory Access Control */
+	switch (mipi->rotation) {
+	case 270:
+		addr_mode = ( ILI9488_MX | ILI9488_MY | ILI9488_MV | ILI9488_ML );
+		break;
+	case 180:
+		addr_mode = ( ILI9488_MY | ILI9488_ML );
+		break;
+	case 90:
+		addr_mode = ILI9488_MV;
+		break;
+	case 0:
+	default:
+		addr_mode = ILI9488_MX;
+		break;
+	}
+	DRM_DEBUG_DRIVER("Add BGR flag to address mode\n");
+	addr_mode |= ILI9488_BGR;
+
+	mipi_dbi_command(mipi, ILI9488_CMD_MEMORY_ACCESS_CONTROL, addr_mode);
+
+
+	/* Pixel Format */
+	mipi_dbi_command(mipi, ILI9488_CMD_COLMOD_PIXEL_FORMAT_SET,
+			 ILI9488_DBI_BPP18 | ILI9488_DPI_BPP18);
+
+
+	mipi_dbi_command(mipi, ILI9488_CMD_INTERFACE_MODE_CONTROL, 0x80);
+
+
+	/* Frame Rate Control */
+	/*	Frame rate = 60.76Hz.*/
+	mipi_dbi_command(mipi, ILI9488_CMD_FRAME_RATE_CONTROL_NORMAL, 0xa0);
+
+
+	/* Display Inversion Control */
+	/*	2 dot inversion */
+	mipi_dbi_command(mipi, ILI9488_CMD_DISPLAY_INVERSION_CONTROL, 0x02);
+
+
+	/* Set Image Function */
+	mipi_dbi_command(mipi, ILI9488_CMD_SET_IMAGE_FUNCTION, 0x00);
+
+
+	/* Adjust Control 3 */
+	mipi_dbi_command(mipi, ILI9488_CMD_ADJUST_CONTROL_3,
+			 0xa9, 0x51, 0x2c, 0x82);
+
+	/* CABC control 2 */
+	mipi_dbi_command(mipi, ILI9488_CMD_CABC_CONTROL_2, 0xb0);
+
+
+	/* Sleep OUT */
+	mipi_dbi_command(mipi, ILI9488_CMD_SLEEP_OUT);
+
+	msleep(120);
+
+	mipi_dbi_command(mipi, ILI9488_CMD_NORMAL_DISP_MODE_ON);
+
+	/* Display ON */
+	mipi_dbi_command(mipi, ILI9488_CMD_DISPLAY_ON);
+
+
+	mipi->enabled = true;
+	backlight_enable(mipi->backlight);
+}
+
+static void ertft_disable(struct drm_simple_display_pipe *pipe)
+{
+	struct tinydrm_device *tdev = pipe_to_tinydrm(pipe);
+	struct mipi_dbi *mipi = mipi_dbi_from_tinydrm(tdev);
+
+	if (!mipi->enabled)
+		return;
+
+	DRM_DEBUG_KMS("\n");
+
+	/* Sleep IN */
+	mipi_dbi_command(mipi, ILI9488_CMD_ENTER_SLEEP_MODE);
+
+	msleep(10);
+
+	/* Display OFF */
+	mipi_dbi_command(mipi, ILI9488_CMD_DISPLAY_OFF);
+
+	mipi->enabled = false;
+	backlight_disable(mipi->backlight);
+}
+
+static const struct ili9488_display_data ertft_quirks = {
+	.pipe_funcs = {
+		.enable		= ertft_enable,
+		.disable	= ertft_disable,
+		.update		= tinydrm_display_pipe_update,
+		.prepare_fb	= drm_gem_fb_simple_display_pipe_prepare_fb,
+	},
+	.fb_funcs = {
+		.destroy        = drm_gem_fb_destroy,
+		.create_handle  = drm_gem_fb_create_handle,
+		.dirty          = ertft_fb_dirty,
+	},
+	.mode = {
+		TINYDRM_MODE(320, 480, 49, 73),
+	},
+	.bytes_per_pixel = 3,
+	.drm_preferred_depth = 0,
+};
+
+static struct drm_driver ili9488_driver = {
+	.driver_features	= DRIVER_GEM | DRIVER_MODESET | DRIVER_PRIME |
+				  DRIVER_ATOMIC,
+	TINYDRM_GEM_DRIVER_OPS,
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4,16,0)
+	.lastclose	= drm_fb_helper_lastclose,
+#else
+	.lastclose	= tinydrm_lastclose,
+#endif
+	.debugfs_init	= mipi_dbi_debugfs_init,
+	.name		= "ili9488",
+	.desc		= "ILI9488 3.5-inch LCD display panel",
+	.date		= "20180305",
+	.major		= 1,
+	.minor		= 0,
+};
+
+static const struct of_device_id ili9488_of_match[] = {
+	{ .compatible = "eastrising,er-tft035-6", .data = &ertft_quirks },
+	{},
+};
+MODULE_DEVICE_TABLE(of, ili9488_of_match);
+
+static int ili9488_probe(struct spi_device *spi)
+{
+	const struct ili9488_display_data *quirks;
+	const struct of_device_id *match;
+	struct device *dev = &spi->dev;
+	struct tinydrm_device *tdev;
+	struct mipi_dbi *mipi;
+	struct gpio_desc *dc;
+	u32 rotation = 0;
+	int ret;
+
+
+	match = of_match_device(ili9488_of_match, dev);
+	if (!match)
+		return -ENODEV;
+
+	quirks = match->data;
+
+	mipi = devm_kzalloc(dev, sizeof(*mipi), GFP_KERNEL);
+	if (!mipi)
+		return -ENOMEM;
+
+	mipi->reset = devm_gpiod_get_optional(dev, "reset", GPIOD_OUT_HIGH);
+	if (IS_ERR(mipi->reset)) {
+		dev_err(dev, "Failed to get gpio 'reset'\n");
+		return PTR_ERR(mipi->reset);
+	}
+
+	dc = devm_gpiod_get(dev, "dc", GPIOD_OUT_LOW);
+	if (IS_ERR(dc)) {
+		dev_err(dev, "Failed to get gpio 'dc'\n");
+		return PTR_ERR(dc);
+	}
+
+	mipi->backlight = devm_of_find_backlight(dev);
+	if (IS_ERR(mipi->backlight))
+		return PTR_ERR(mipi->backlight);
+
+	device_property_read_u32(dev, "rotation", &rotation);
+
+	ret = mipi_dbi_spi_init(spi, mipi, dc);
+	if (ret) {
+		dev_err(dev, "Error in mipi_dbi_spi_init()\n");
+		return ret;
+	}
+
+	ret = ili9488_init(dev, mipi, quirks, &ili9488_driver, rotation);
+	if (ret) {
+		dev_err(dev, "Error in ili9488_init()\n");
+		return ret;
+	}
+
+	tdev = &mipi->tinydrm;
+
+	ret = devm_tinydrm_register(tdev);
+	if (ret) {
+		dev_err(dev, "Error in devm_tinydrm_register()\n");
+		return ret;
+	}
+
+	spi_set_drvdata(spi, mipi);
+
+	DRM_DEBUG_DRIVER("Initialized %s:%s @%uMHz swap_bytes=%d on minor %d\n",
+			 tdev->drm->driver->name, dev_name(dev),
+			 spi->max_speed_hz / 1000000, mipi->swap_bytes,
+			 tdev->drm->primary->index);
+
+	return 0;
+}
+
+static void ili9488_shutdown(struct spi_device *spi)
+{
+	struct mipi_dbi *mipi = spi_get_drvdata(spi);
+
+	tinydrm_shutdown(&mipi->tinydrm);
+}
+
+static struct spi_driver ili9488_spi_driver = {
+	.driver = {
+		.name = "ili9488",
+		.owner = THIS_MODULE,
+		.of_match_table = ili9488_of_match,
+	},
+	.probe = ili9488_probe,
+	.shutdown = ili9488_shutdown,
+};
+module_spi_driver(ili9488_spi_driver);
+
+MODULE_ALIAS("spi:ili9488");
+MODULE_ALIAS("spi:er-tft035-6");
+
+MODULE_DESCRIPTION("DRM driver for ILI9488 LCD display panels");
+MODULE_AUTHOR("Sergey Suloev <ssuloev@orpaltech.com>");
+MODULE_LICENSE("GPL");
diff --git a/drivers/gpu/drm/tinydrm/ili9488.h b/drivers/gpu/drm/tinydrm/ili9488.h
new file mode 100644
index 0000000..8d834c5
--- /dev/null
+++ b/drivers/gpu/drm/tinydrm/ili9488.h
@@ -0,0 +1,148 @@
+/*
+ * ILI9488 LCD controller
+ *
+ * Copyright 2018 Sergey Suloev <ssuloev@orpaltech.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ */
+
+
+#ifndef __LINUX_ILI9488_H
+#define __LINUX_ILI9488_H
+
+/* ILI9488 screen size */
+#define ILI9488_LCD_WIDTH  320
+#define ILI9488_LCD_HEIGHT 480
+
+/* ILI9488 ID code */
+#define ILI9488_DEVICE_CODE (0x9488u)
+
+/* Level 1 Commands (from the display Datasheet) */
+#define ILI9488_CMD_NOP					0x00
+#define ILI9488_CMD_SOFTWARE_RESET			0x01
+#define ILI9488_CMD_READ_DISP_ID			0x04
+#define ILI9488_CMD_READ_ERROR_DSI			0x05
+#define ILI9488_CMD_READ_DISP_STATUS			0x09
+#define ILI9488_CMD_READ_DISP_POWER_MODE		0x0A
+#define ILI9488_CMD_READ_DISP_MADCTRL			0x0B
+#define ILI9488_CMD_READ_DISP_PIXEL_FORMAT		0x0C
+#define ILI9488_CMD_READ_DISP_IMAGE_MODE		0x0D
+#define ILI9488_CMD_READ_DISP_SIGNAL_MODE		0x0E
+#define ILI9488_CMD_READ_DISP_SELF_DIAGNOSTIC		0x0F
+#define ILI9488_CMD_ENTER_SLEEP_MODE			0x10
+#define ILI9488_CMD_SLEEP_OUT				0x11
+#define ILI9488_CMD_PARTIAL_MODE_ON			0x12
+#define ILI9488_CMD_NORMAL_DISP_MODE_ON			0x13
+#define ILI9488_CMD_DISP_INVERSION_OFF			0x20
+#define ILI9488_CMD_DISP_INVERSION_ON			0x21
+#define ILI9488_CMD_PIXEL_OFF				0x22
+#define ILI9488_CMD_PIXEL_ON				0x23
+#define ILI9488_CMD_DISPLAY_OFF				0x28
+#define ILI9488_CMD_DISPLAY_ON				0x29
+#define ILI9488_CMD_COLUMN_ADDRESS_SET			0x2A
+#define ILI9488_CMD_PAGE_ADDRESS_SET			0x2B
+#define ILI9488_CMD_MEMORY_WRITE			0x2C
+#define ILI9488_CMD_MEMORY_READ				0x2E
+#define ILI9488_CMD_PARTIAL_AREA			0x30
+#define ILI9488_CMD_VERT_SCROLL_DEFINITION		0x33
+#define ILI9488_CMD_TEARING_EFFECT_LINE_OFF		0x34
+#define ILI9488_CMD_TEARING_EFFECT_LINE_ON		0x35
+#define ILI9488_CMD_MEMORY_ACCESS_CONTROL		0x36
+#define ILI9488_CMD_VERT_SCROLL_START_ADDRESS		0x37
+#define ILI9488_CMD_IDLE_MODE_OFF			0x38
+#define ILI9488_CMD_IDLE_MODE_ON			0x39
+#define ILI9488_CMD_COLMOD_PIXEL_FORMAT_SET		0x3A
+#define ILI9488_CMD_WRITE_MEMORY_CONTINUE		0x3C
+#define ILI9488_CMD_READ_MEMORY_CONTINUE		0x3E
+#define ILI9488_CMD_SET_TEAR_SCANLINE			0x44
+#define ILI9488_CMD_GET_SCANLINE			0x45
+#define ILI9488_CMD_WRITE_DISPLAY_BRIGHTNESS		0x51
+#define ILI9488_CMD_READ_DISPLAY_BRIGHTNESS		0x52
+#define ILI9488_CMD_WRITE_CTRL_DISPLAY			0x53
+#define ILI9488_CMD_READ_CTRL_DISPLAY			0x54
+#define ILI9488_CMD_WRITE_CONTENT_ADAPT_BRIGHTNESS	0x55
+#define ILI9488_CMD_READ_CONTENT_ADAPT_BRIGHTNESS	0x56
+#define ILI9488_CMD_WRITE_MIN_CAB_LEVEL			0x5E
+#define ILI9488_CMD_READ_MIN_CAB_LEVEL			0x5F
+#define ILI9488_CMD_READ_ABC_SELF_DIAG_RES		0x68
+#define ILI9488_CMD_READ_ID1				0xDA
+#define ILI9488_CMD_READ_ID2				0xDB
+#define ILI9488_CMD_READ_ID3				0xDC
+
+/* Level 2 Commands (from the display Datasheet) */
+#define ILI9488_CMD_INTERFACE_MODE_CONTROL		0xB0
+#define ILI9488_CMD_FRAME_RATE_CONTROL_NORMAL		0xB1
+#define ILI9488_CMD_FRAME_RATE_CONTROL_IDLE_8COLOR	0xB2
+#define ILI9488_CMD_FRAME_RATE_CONTROL_PARTIAL		0xB3
+#define ILI9488_CMD_DISPLAY_INVERSION_CONTROL		0xB4
+#define ILI9488_CMD_BLANKING_PORCH_CONTROL		0xB5
+#define ILI9488_CMD_DISPLAY_FUNCTION_CONTROL		0xB6
+#define ILI9488_CMD_ENTRY_MODE_SET			0xB7
+#define ILI9488_CMD_BACKLIGHT_CONTROL_1			0xB9
+#define ILI9488_CMD_BACKLIGHT_CONTROL_2			0xBA
+#define ILI9488_CMD_HS_LANES_CONTROL			0xBE
+#define ILI9488_CMD_POWER_CONTROL_1			0xC0
+#define ILI9488_CMD_POWER_CONTROL_2			0xC1
+#define ILI9488_CMD_POWER_CONTROL_NORMAL_3		0xC2
+#define ILI9488_CMD_POWER_CONTROL_IDEL_4		0xC3
+#define ILI9488_CMD_POWER_CONTROL_PARTIAL_5		0xC4
+#define ILI9488_CMD_VCOM_CONTROL_1			0xC5
+#define ILI9488_CMD_CABC_CONTROL_1			0xC6
+#define ILI9488_CMD_CABC_CONTROL_2			0xC8
+#define ILI9488_CMD_CABC_CONTROL_3			0xC9
+#define ILI9488_CMD_CABC_CONTROL_4			0xCA
+#define ILI9488_CMD_CABC_CONTROL_5			0xCB
+#define ILI9488_CMD_CABC_CONTROL_6			0xCC
+#define ILI9488_CMD_CABC_CONTROL_7			0xCD
+#define ILI9488_CMD_CABC_CONTROL_8			0xCE
+#define ILI9488_CMD_CABC_CONTROL_9			0xCF
+#define ILI9488_CMD_NVMEM_WRITE				0xD0
+#define ILI9488_CMD_NVMEM_PROTECTION_KEY		0xD1
+#define ILI9488_CMD_NVMEM_STATUS_READ			0xD2
+#define ILI9488_CMD_READ_ID4				0xD3
+#define ILI9488_CMD_ADJUST_CONTROL_1			0xD7
+#define ILI9488_CMD_READ_ID_VERSION			0xD8
+#define ILI9488_CMD_POSITIVE_GAMMA_CORRECTION		0xE0
+#define ILI9488_CMD_NEGATIVE_GAMMA_CORRECTION		0xE1
+#define ILI9488_CMD_DIGITAL_GAMMA_CONTROL_1		0xE2
+#define ILI9488_CMD_DIGITAL_GAMMA_CONTROL_2		0xE3
+#define ILI9488_CMD_SET_IMAGE_FUNCTION			0xE9
+#define ILI9488_CMD_ADJUST_CONTROL_2			0xF2
+#define ILI9488_CMD_ADJUST_CONTROL_3			0xF7
+#define ILI9488_CMD_ADJUST_CONTROL_4			0xF8
+#define ILI9488_CMD_ADJUST_CONTROL_5			0xF9
+#define ILI9488_CMD_SPI_READ_SETTINGS			0xFB
+#define ILI9488_CMD_ADJUST_CONTROL_6			0xFC
+#define ILI9488_CMD_ADJUST_CONTROL_7			0xFF
+
+
+/*
+ * ILI9488 pixel format flags
+ *
+ * DBI is the pixel format of CPU interface
+ */
+#define ILI9488_DBI_BPP16               0x05    /* 16 bits / pixel */
+#define ILI9488_DBI_BPP18               0x06    /* 18 bits / pixel */
+#define ILI9488_DBI_BPP24               0x07    /* 24 bits / pixel */
+
+/*
+ * DPI is the pixel format select of RGB interface
+ */
+#define ILI9488_DPI_BPP16               0x50    /* 16 bits / pixel */
+#define ILI9488_DPI_BPP18               0x60    /* 18 bits / pixel */
+#define ILI9488_DPI_BPP24               0x70    /* 24 bits / pixel */
+
+/*
+ * ILI9488 Memory Access Control flags
+ */
+#define ILI9488_MY	BIT(7)		/* Row Address Order */
+#define ILI9488_MX	BIT(6)		/* Column Address Order */
+#define ILI9488_MV	BIT(5)		/* Row / Column Exchange */
+#define ILI9488_ML	BIT(4)		/* Vertical Refresh Order */
+#define ILI9488_BGR	BIT(3)		/* BGR Order, if set */
+#define ILI9488_MH	BIT(2)		/* Horizontal Refresh Order */
+
+#endif // __LINUX_ILI9488_H
-- 
2.17.1

