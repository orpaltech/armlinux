From 7f4e9100b2445857bc8edfee8446b7e3d3efc7fc Mon Sep 17 00:00:00 2001
From: Sergey Suloev <ssuloev@orpaltech.com>
Date: Tue, 25 Dec 2018 21:46:25 +0300
Subject: [PATCH] bcm2835: ASoC: Add ORPALTECH AA-Pi soundcard driver

---
 sound/soc/bcm/Kconfig                |   7 +
 sound/soc/bcm/Makefile               |   3 +
 sound/soc/bcm/orpal-aapi-soundcard.c | 183 +++++++++++++++++++++++++++
 3 files changed, 193 insertions(+)
 create mode 100644 sound/soc/bcm/orpal-aapi-soundcard.c

diff --git a/sound/soc/bcm/Kconfig b/sound/soc/bcm/Kconfig
index 02f50b7..7071d06 100644
--- a/sound/soc/bcm/Kconfig
+++ b/sound/soc/bcm/Kconfig
@@ -8,6 +8,13 @@ config SND_BCM2835_SOC_I2S
 	  the BCM2835 I2S interface. You will also need
 	  to select the audio interfaces to support below.
 
+config SND_ORPAL_AAPI
+	tristate "ORPALTECH AA-Pi Soundcard driver for Broadcom BCM2835 family"
+	depends on SND_BCM2835_SOC_I2S
+	select SND_SOC_WM8731
+	help
+	  Say Y or M if you want to add support for ORPALTECH AA-Pi Soundcard.
+
 config SND_SOC_CYGNUS
 	tristate "SoC platform audio for Broadcom Cygnus chips"
 	depends on ARCH_BCM_CYGNUS || COMPILE_TEST
diff --git a/sound/soc/bcm/Makefile b/sound/soc/bcm/Makefile
index fc739d0..75fff41 100644
--- a/sound/soc/bcm/Makefile
+++ b/sound/soc/bcm/Makefile
@@ -8,3 +8,6 @@ snd-soc-cygnus-objs := cygnus-pcm.o cygnus-ssp.o
 
 obj-$(CONFIG_SND_SOC_CYGNUS) += snd-soc-cygnus.o
 
+# ORPAL-AA-Pi Soundcard Support
+snd-soc-orpal-aapi-objs	:= orpal-aapi-soundcard.o
+obj-$(CONFIG_SND_ORPAL_AAPI) += snd-soc-orpal-aapi.o
diff --git a/sound/soc/bcm/orpal-aapi-soundcard.c b/sound/soc/bcm/orpal-aapi-soundcard.c
new file mode 100644
index 0000000..d6733b8
--- /dev/null
+++ b/sound/soc/bcm/orpal-aapi-soundcard.c
@@ -0,0 +1,183 @@
+/*
+ * ASoC Driver for ORPAL-AA-Pi soundcard (capture only).
+ *
+ *  Created on:	06-Jan-2018
+ *  	Author:	Sergey Suloev <ssuloev@orpaltech.com>
+ *
+ * Copyright (C) 2017-2018 ORPAL Technology, Inc.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ */
+
+#include <linux/module.h>
+#include <linux/types.h>
+
+#include <sound/core.h>
+#include <sound/soc.h>
+#include <sound/pcm_params.h>
+#include <sound/control.h>
+
+#include "../codecs/wm8731.h"
+
+/*
+ * This is fixed on the board
+ */
+#define BOARD_XTAL_FREQ	12288000
+
+static const unsigned int bcm2835_i2s_rates[] = {
+	8000, 32000, 48000, 96000,
+};
+
+/* Setup constraints, because there is a 12.288 MHz XTAL on the board */
+static struct snd_pcm_hw_constraint_list bcm2835_i2s_constraints = {
+	.list	= bcm2835_i2s_rates,
+	.count	= ARRAY_SIZE(bcm2835_i2s_rates),
+};
+
+static int orpal_aapi_soundcard_startup(struct snd_pcm_substream *substream)
+{
+	snd_pcm_hw_constraint_list(substream->runtime, 0,
+				SNDRV_PCM_HW_PARAM_RATE,
+				&bcm2835_i2s_constraints);
+	return 0;
+}
+
+static int orpal_aapi_soundcard_hw_params(struct snd_pcm_substream *substream,
+					  struct snd_pcm_hw_params *params)
+{
+	struct snd_soc_pcm_runtime *rtd = substream->private_data;
+	struct snd_soc_card *card	= rtd->card;
+	struct snd_soc_dai *codec_dai	= rtd->codec_dai;
+	struct snd_soc_dai *cpu_dai	= rtd->cpu_dai;
+	int ret;
+
+	/* WM8731 will use BCLK = 64 * FS when not in USB mode */
+	ret = snd_soc_dai_set_bclk_ratio(cpu_dai, 64);
+	if (ret < 0) {
+		dev_err(card->dev, "failed to set BCLK ratio: %d\n", ret);
+		return ret;
+	}
+
+	/* Set codec sysclk */
+	ret = snd_soc_dai_set_sysclk(codec_dai, WM8731_SYSCLK_XTAL,
+				     BOARD_XTAL_FREQ,
+				     SND_SOC_CLOCK_IN);
+	if (ret < 0) {
+		dev_err(card->dev, "Failed to set WM8731 SYSCLK: %d\n", ret);
+		return ret;
+	}
+
+	return 0;
+}
+
+/* machine stream operations */
+static struct snd_soc_ops orpal_aapi_soundcard_ops = {
+	.startup   = orpal_aapi_soundcard_startup,
+	.hw_params = orpal_aapi_soundcard_hw_params,
+};
+
+static const struct snd_soc_dapm_widget wm8731_dapm_widgets[] = {
+	SND_SOC_DAPM_LINE("Line In Jacks", NULL),
+};
+
+static const struct snd_soc_dapm_route wm8731_audio_map[] = {
+	{ "LLINEIN", NULL, "Line In Jacks" },
+	{ "RLINEIN", NULL, "Line In Jacks" },
+};
+
+static int orpal_aapi_soundcard_probe(struct platform_device *pdev)
+{
+	struct device *dev = &pdev->dev;
+	struct snd_soc_card *card;
+	struct snd_soc_dai_link *dai;
+	struct device_node *codec_np, *cpu_np;
+	int ret;
+
+	card = devm_kzalloc(dev, sizeof(*card), GFP_KERNEL);
+	dai = devm_kzalloc(dev, sizeof(*dai), GFP_KERNEL);
+	if (!dai || !card)
+		return -ENOMEM;
+
+	card->dev = dev;
+	card->name = "orpal-aapi-soundcard";
+	card->owner = THIS_MODULE;
+	card->dai_link = dai;
+	card->num_links = 1;
+	card->dapm_widgets = wm8731_dapm_widgets;
+	card->num_dapm_widgets = ARRAY_SIZE(wm8731_dapm_widgets);
+	card->dapm_routes = wm8731_audio_map;
+	card->num_dapm_routes = ARRAY_SIZE(wm8731_audio_map);
+
+	dai->name = "orpal-aapi-dai";
+	dai->stream_name = "orpal-aapi-pcm";
+	dai->codec_dai_name = "wm8731-hifi";
+	dai->ops = &orpal_aapi_soundcard_ops,
+        dai->dai_fmt = SND_SOC_DAIFMT_CBM_CFM | SND_SOC_DAIFMT_I2S |
+		       SND_SOC_DAIFMT_NB_NF;
+
+
+	codec_np = of_parse_phandle(dev->of_node, "orpal,audio-codec", 0);
+	if (!codec_np) {
+		dev_err(&pdev->dev, "orpal,audio-codec node missing\n");
+		return -EINVAL;
+	}
+
+	dai->codec_of_node = codec_np;
+
+	cpu_np = of_parse_phandle(dev->of_node, "orpal,i2s-controller", 0);
+	if (!cpu_np) {
+		dev_err(&pdev->dev, "orpal,i2s-controller node missing\n");
+		of_node_put(codec_np);
+		return -EINVAL;
+	}
+
+	dai->cpu_of_node = cpu_np;
+	dai->platform_of_node = cpu_np;
+
+	/* Release reference counters */
+	of_node_put(codec_np);
+	of_node_put(cpu_np);
+
+	ret = snd_soc_register_card(card);
+	if (ret == -EPROBE_DEFER)
+		return ret;
+	if (ret < 0) {
+		dev_err(dev, "register card failed: (%d)\n", ret);
+		return ret;
+	}
+
+	dev_dbg(dev, "%s ok\n", __func__);
+
+	return 0;
+}
+
+static int orpal_aapi_soundcard_remove(struct platform_device *pdev)
+{
+	struct snd_soc_card *card = platform_get_drvdata(pdev);
+
+	return snd_soc_unregister_card(card);
+}
+
+static const struct of_device_id orpal_aapi_soundcard_of_match[] = {
+	{ .compatible = "orpaltech,aapi-wm8731-sound" },
+	{},
+};
+MODULE_DEVICE_TABLE(of, orpal_aapi_soundcard_of_match);
+
+static struct platform_driver orpal_aapi_soundcard_driver = {
+	.probe	= orpal_aapi_soundcard_probe,
+	.remove	= orpal_aapi_soundcard_remove,
+	.driver	= {
+		.name		= "orpal-aapi-soundcard",
+		.of_match_table	= orpal_aapi_soundcard_of_match,
+	},
+};
+module_platform_driver(orpal_aapi_soundcard_driver);
+
+MODULE_AUTHOR("Sergey Suloev <ssuloev@orpaltech.com>");
+MODULE_DESCRIPTION("ORPAL-AA-Pi soundcard driver");
+MODULE_LICENSE("GPL v2");
+MODULE_ALIAS("platform:orpal-aapi-soundcard");
-- 
2.17.1

