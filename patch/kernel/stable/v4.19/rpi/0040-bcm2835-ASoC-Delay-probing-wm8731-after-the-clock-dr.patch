From 67ab759dfabf719c07e978e2b62b2728f3590d18 Mon Sep 17 00:00:00 2001
From: Sergey Suloev <ssuloev@orpaltech.com>
Date: Sat, 22 Dec 2018 14:16:26 +0300
Subject: [PATCH] bcm2835: ASoC: Delay probing wm8731 after the clock driver

---
 sound/soc/codecs/wm8731.c | 44 ++++++++++++++++++++++++++++++++++++---
 1 file changed, 41 insertions(+), 3 deletions(-)

diff --git a/sound/soc/codecs/wm8731.c b/sound/soc/codecs/wm8731.c
index 7c8fad8..d2168e2 100644
--- a/sound/soc/codecs/wm8731.c
+++ b/sound/soc/codecs/wm8731.c
@@ -13,6 +13,8 @@
  * published by the Free Software Foundation.
  */
 
+#define DEBUG
+
 #include <linux/module.h>
 #include <linux/moduleparam.h>
 #include <linux/init.h>
@@ -54,6 +56,8 @@ struct wm8731_priv {
 	int playback_fs;
 	bool deemph;
 
+	struct clk	*dummy_clk;
+
 	struct mutex lock;
 };
 
@@ -346,6 +350,9 @@ static int wm8731_hw_params(struct snd_pcm_substream *substream,
 
 	wm8731->playback_fs = params_rate(params);
 
+	dev_dbg(dai->dev, "%s: codec hw params: srate = %d\n",
+		__func__, srate);
+
 	snd_soc_component_write(component, WM8731_SRATE, srate);
 
 	/* bit size */
@@ -425,7 +432,6 @@ static int wm8731_set_dai_sysclk(struct snd_soc_dai *codec_dai,
 	return 0;
 }
 
-
 static int wm8731_set_dai_fmt(struct snd_soc_dai *codec_dai,
 		unsigned int fmt)
 {
@@ -489,9 +495,16 @@ static int wm8731_set_bias_level(struct snd_soc_component *component,
 				 enum snd_soc_bias_level level)
 {
 	struct wm8731_priv *wm8731 = snd_soc_component_get_drvdata(component);
+	enum snd_soc_bias_level old_level;
 	int ret;
 	u16 reg;
 
+	old_level = snd_soc_component_get_bias_level(component);
+
+	dev_dbg(component->dev,
+		"%s: bias level %d will change to %d\n",
+		__func__, old_level, level);
+
 	switch (level) {
 	case SND_SOC_BIAS_ON:
 		if (wm8731->mclk) {
@@ -503,7 +516,7 @@ static int wm8731_set_bias_level(struct snd_soc_component *component,
 	case SND_SOC_BIAS_PREPARE:
 		break;
 	case SND_SOC_BIAS_STANDBY:
-		if (snd_soc_component_get_bias_level(component) == SND_SOC_BIAS_OFF) {
+		if (old_level == SND_SOC_BIAS_OFF) {
 			ret = regulator_bulk_enable(ARRAY_SIZE(wm8731->supplies),
 						    wm8731->supplies);
 			if (ret != 0)
@@ -525,6 +538,7 @@ static int wm8731_set_bias_level(struct snd_soc_component *component,
 		regcache_mark_dirty(wm8731->regmap);
 		break;
 	}
+
 	return 0;
 }
 
@@ -538,9 +552,17 @@ static int wm8731_startup(struct snd_pcm_substream *substream,
 					   SNDRV_PCM_HW_PARAM_RATE,
 					   wm8731->constraints);
 
+	dev_dbg(dai->dev, "%s: codec startup\n", __func__);
+
 	return 0;
 }
 
+static void wm8731_shutdown(struct snd_pcm_substream *substream,
+	struct snd_soc_dai *dai)
+{
+	dev_dbg(dai->dev, "%s: codec shutdown\n", __func__);
+}
+
 #define WM8731_RATES SNDRV_PCM_RATE_8000_96000
 
 #define WM8731_FORMATS (SNDRV_PCM_FMTBIT_S16_LE | SNDRV_PCM_FMTBIT_S20_3LE |\
@@ -548,6 +570,7 @@ static int wm8731_startup(struct snd_pcm_substream *substream,
 
 static const struct snd_soc_dai_ops wm8731_dai_ops = {
 	.startup	= wm8731_startup,
+	.shutdown	= wm8731_shutdown,
 	.hw_params	= wm8731_hw_params,
 	.digital_mute	= wm8731_mute,
 	.set_sysclk	= wm8731_set_dai_sysclk,
@@ -647,7 +670,6 @@ static const struct of_device_id wm8731_of_match[] = {
 	{ .compatible = "wlf,wm8731", },
 	{ }
 };
-
 MODULE_DEVICE_TABLE(of, wm8731_of_match);
 
 static const struct regmap_config wm8731_regmap = {
@@ -755,6 +777,22 @@ static int wm8731_i2c_probe(struct i2c_client *i2c,
 		}
 	}
 
+
+	wm8731->dummy_clk = devm_clk_get(&i2c->dev, "dummy-clk");
+	if (IS_ERR(wm8731->dummy_clk)) {
+                ret = PTR_ERR(wm8731->dummy_clk);
+		if (ret == -ENOENT) {
+			wm8731->dummy_clk = NULL;
+			dev_warn(&i2c->dev, "dummy clock is missing\n");
+		} else {
+			if (ret == -EPROBE_DEFER)
+				dev_err(&i2c->dev, "access to dummy clock deferred\n");
+			else
+				dev_err(&i2c->dev, "unable to acquire dummy clock\n");
+			return ret;
+		}
+        }
+
 	mutex_init(&wm8731->lock);
 
 	i2c_set_clientdata(i2c, wm8731);
-- 
2.17.1

