From b67cc81865880825097af4a07d69f7e1d7b09e82 Mon Sep 17 00:00:00 2001
From: Sergey Suloev <ssuloev@orpaltech.com>
Date: Fri, 1 Mar 2019 15:22:11 +0300
Subject: [PATCH] reset: Add GPIO support to reset controller framework

---
 drivers/reset/Kconfig      |   7 ++
 drivers/reset/Makefile     |   1 +
 drivers/reset/reset-gpio.c | 234 +++++++++++++++++++++++++++++++++++++
 3 files changed, 242 insertions(+)
 create mode 100644 drivers/reset/reset-gpio.c

diff --git a/drivers/reset/Kconfig b/drivers/reset/Kconfig
index c21da9f..9468808 100644
--- a/drivers/reset/Kconfig
+++ b/drivers/reset/Kconfig
@@ -40,6 +40,13 @@ config RESET_BERLIN
 	help
 	  This enables the reset controller driver for Marvell Berlin SoCs.
 
+config RESET_GPIO
+	tristate "GPIO Reset controller Driver"
+	depends on GPIOLIB
+	help
+	  This option lets the reset controller framework handle reset lines
+	  connected to GPIOs.
+
 config RESET_HSDK
 	bool "Synopsys HSDK Reset Driver"
 	depends on HAS_IOMEM
diff --git a/drivers/reset/Makefile b/drivers/reset/Makefile
index d08e8b9..a23eeb8 100644
--- a/drivers/reset/Makefile
+++ b/drivers/reset/Makefile
@@ -7,6 +7,7 @@ obj-$(CONFIG_RESET_A10SR) += reset-a10sr.o
 obj-$(CONFIG_RESET_ATH79) += reset-ath79.o
 obj-$(CONFIG_RESET_AXS10X) += reset-axs10x.o
 obj-$(CONFIG_RESET_BERLIN) += reset-berlin.o
+obj-$(CONFIG_RESET_GPIO) += reset-gpio.o
 obj-$(CONFIG_RESET_HSDK) += reset-hsdk.o
 obj-$(CONFIG_RESET_IMX7) += reset-imx7.o
 obj-$(CONFIG_RESET_LANTIQ) += reset-lantiq.o
diff --git a/drivers/reset/reset-gpio.c b/drivers/reset/reset-gpio.c
new file mode 100644
index 0000000..e74f2b2
--- /dev/null
+++ b/drivers/reset/reset-gpio.c
@@ -0,0 +1,234 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/*
+ * GPIO Reset controller driver.
+ *
+ * Copyright 2018 Sergey Suloev <ssuloev@orpaltech.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ */
+
+#define DEBUG
+
+#include <linux/delay.h>
+#include <linux/device.h>
+#include <linux/err.h>
+#include <linux/gpio.h>
+#include <linux/gpio/consumer.h>
+#include <linux/module.h>
+#include <linux/mutex.h>
+#include <linux/of.h>
+#include <linux/of_address.h>
+#include <linux/of_gpio.h>
+#include <linux/platform_device.h>
+#include <linux/reset-controller.h>
+#include <linux/slab.h>
+
+
+struct gpio_reset_controller;
+
+struct gpio_reset_line {
+	struct gpio_reset_controller *rc;
+	const char *name;
+	struct gpio_desc *gpiod;
+	u32 duration_ms;
+	/* You can restrict maximum number of resets
+	   for shared controls */
+	u32 max_resets;
+	unsigned int reset_count;
+	struct mutex reset_lock;
+};
+
+struct gpio_reset_controller {
+	struct reset_controller_dev rcdev;
+	struct device *dev;
+	int num_lines;
+	struct gpio_reset_line lines[];
+};
+
+#define to_gpio_reset_controller(x) \
+	container_of((x), struct gpio_reset_controller, rcdev)
+
+
+static void gpio_reset_line_set(struct gpio_reset_line *line, int asserted)
+{
+	gpiod_set_value_cansleep(line->gpiod, asserted);
+}
+
+static int gpio_reset_control_assert(struct reset_controller_dev *rcdev,
+				     unsigned long id)
+{
+	struct gpio_reset_controller *rc = to_gpio_reset_controller(rcdev);
+	struct gpio_reset_line *line;
+
+	if (id >= rc->num_lines) {
+		dev_err(rc->dev, "illegal reset control id: %d\n", id);
+		return -EINVAL;
+	}
+
+	line = &rc->lines[id];
+
+	gpio_reset_line_set(line, 1);
+
+	return 0;
+}
+
+static int gpio_reset_control_reset(struct reset_controller_dev *rcdev,
+				    unsigned long id)
+{
+	struct gpio_reset_controller *rc = to_gpio_reset_controller(rcdev);
+	struct gpio_reset_line *line;
+
+	if (id >= rc->num_lines) {
+		dev_err(rc->dev, "illegal reset control id: %d\n", id);
+		return -EINVAL;
+	}
+
+	line = &rc->lines[id];
+
+	if (line->max_resets) {
+		mutex_lock(&line->reset_lock);
+
+		if (line->reset_count >= line->max_resets) {
+			dev_warn(rc->dev, "max resets exceeded\n");
+			mutex_unlock(&line->reset_lock);
+			return -EINVAL;
+		}
+
+		line->reset_count++;
+		mutex_unlock(&line->reset_lock);
+	}
+
+	gpio_reset_line_set(line, 1);
+	msleep(line->duration_ms);
+	gpio_reset_line_set(line, 0);
+
+	return 0;
+}
+
+static int gpio_reset_control_deassert(struct reset_controller_dev *rcdev,
+				       unsigned long id)
+{
+	struct gpio_reset_controller *rc = to_gpio_reset_controller(rcdev);
+	struct gpio_reset_line *line;
+
+	if (id >= rc->num_lines) {
+		dev_err(rc->dev, "illegal reset control id: %d\n", id);
+		return -EINVAL;
+	}
+
+	line = &rc->lines[id];
+
+	gpio_reset_line_set(line, 0);
+
+	return 0;
+}
+
+static struct reset_control_ops gpio_reset_ops = {
+	.reset = gpio_reset_control_reset,
+	.assert = gpio_reset_control_assert,
+	.deassert = gpio_reset_control_deassert,
+};
+
+static int gpio_reset_init_line(struct device_node *np,
+				struct gpio_reset_line *line)
+{
+	int ret;
+	struct device *dev = line->rc->dev;
+
+	line->name = np->name;
+
+	line->duration_ms = 1;
+	of_property_read_u32(np, "duration-ms", &line->duration_ms);
+	of_property_read_u32(np, "max-resets", &line->max_resets);
+
+	line->gpiod = devm_gpiod_get_from_of_node(dev, np, "gpios", 0,
+					GPIOD_OUT_LOW, np->name);
+	if (IS_ERR(line->gpiod)) {
+		dev_err(dev, "unable to get gpio spec for '%s'", np->name);
+		return PTR_ERR(line->gpiod);
+	}
+
+	mutex_init(&line->reset_lock);
+
+	return 0;
+}
+
+static int gpio_reset_probe(struct platform_device *pdev)
+{
+	struct gpio_reset_controller *rc;
+	struct device_node *np = pdev->dev.of_node, *child;
+	struct gpio_reset_line *line;
+	int num_lines, ret;
+
+	if (!np)
+		return -ENODEV;
+
+	num_lines = of_get_available_child_count(np);
+	if (!num_lines)
+		return -ENODEV;
+
+	rc = devm_kzalloc(&pdev->dev, sizeof(*rc) + num_lines*sizeof(*line),
+			  GFP_KERNEL);
+	if (!rc)
+		return -ENOMEM;
+
+	rc->rcdev.owner = THIS_MODULE;
+	rc->rcdev.nr_resets = num_lines;
+	rc->rcdev.of_node = np;
+	rc->rcdev.ops = &gpio_reset_ops;
+	rc->rcdev.of_reset_n_cells = 1;
+	rc->dev = &pdev->dev;
+	rc->num_lines = num_lines;
+
+	platform_set_drvdata(pdev, rc);
+
+	/* parse our reset lines */
+	line = rc->lines;
+	for_each_available_child_of_node(np, child) {
+		line->rc = rc;
+		ret = gpio_reset_init_line(child, line);
+		if (ret)
+			return ret;
+		line++;
+	}
+
+	ret = reset_controller_register(&rc->rcdev);
+        if (ret) {
+		dev_err(&pdev->dev, "failed to register reset controller\n");
+		return ret;
+	}
+
+	return 0;
+}
+
+static int gpio_reset_remove(struct platform_device *pdev)
+{
+	struct gpio_reset_controller *rc = platform_get_drvdata(pdev);
+
+	reset_controller_unregister(&rc->rcdev);
+
+	return 0;
+}
+
+static const struct of_device_id gpio_reset_dt_match[] = {
+	{ .compatible = "linux,gpio-reset-controller" },
+	{ },
+};
+MODULE_DEVICE_TABLE(of, gpio_reset_dt_match);
+
+static struct platform_driver gpio_reset_driver = {
+	.probe	= gpio_reset_probe,
+	.remove = gpio_reset_remove,
+	.driver	= {
+		.name = "gpio-reset",
+		.of_match_table = gpio_reset_dt_match,
+	},
+};
+module_platform_driver(gpio_reset_driver);
+
+MODULE_AUTHOR("Sergey Suloev <ssuloev@orpaltech.com>");
+MODULE_DESCRIPTION("GPIO Reset controller driver");
+MODULE_LICENSE("GPL v2");
-- 
2.17.1

