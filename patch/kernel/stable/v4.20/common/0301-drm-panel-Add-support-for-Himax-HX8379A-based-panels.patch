From f43b89311e9fcdba9e5f612a6d9b9df191819ee5 Mon Sep 17 00:00:00 2001
From: Sergey Suloev <ssuloev@orpaltech.com>
Date: Mon, 19 Nov 2018 02:12:25 +0300
Subject: [PATCH] drm/panel: Add support for Himax HX8379A-based panels

---
 drivers/gpu/drm/panel/Kconfig               |  10 +
 drivers/gpu/drm/panel/Makefile              |   1 +
 drivers/gpu/drm/panel/panel-himax-hx8379a.c | 574 ++++++++++++++++++++
 3 files changed, 585 insertions(+)
 create mode 100644 drivers/gpu/drm/panel/panel-himax-hx8379a.c

diff --git a/drivers/gpu/drm/panel/Kconfig b/drivers/gpu/drm/panel/Kconfig
index 6020c30..a626fe8 100644
--- a/drivers/gpu/drm/panel/Kconfig
+++ b/drivers/gpu/drm/panel/Kconfig
@@ -186,4 +186,14 @@ config DRM_PANEL_SITRONIX_ST7789V
 	  Say Y here if you want to enable support for the Sitronix
 	  ST7789V controller for 240x320 LCD panels
 
+config DRM_PANEL_HIMAX_HX8379A
+	tristate "Himax HX8379A-based MIPI-DSI panels"
+	depends on OF
+	depends on DRM_MIPI_DSI
+	depends on BACKLIGHT_CLASS_DEVICE
+	help
+	  Say Y here if you want to enable support for Himax HX8379A-based
+	  MIPI-DSI panels.
+	  To compile this driver as a module, choose M here.
+
 endmenu
diff --git a/drivers/gpu/drm/panel/Makefile b/drivers/gpu/drm/panel/Makefile
index 5ccaaa9..6968a57 100644
--- a/drivers/gpu/drm/panel/Makefile
+++ b/drivers/gpu/drm/panel/Makefile
@@ -19,3 +19,4 @@ obj-$(CONFIG_DRM_PANEL_SEIKO_43WVF1G) += panel-seiko-43wvf1g.o
 obj-$(CONFIG_DRM_PANEL_SHARP_LQ101R1SX01) += panel-sharp-lq101r1sx01.o
 obj-$(CONFIG_DRM_PANEL_SHARP_LS043T1LE01) += panel-sharp-ls043t1le01.o
 obj-$(CONFIG_DRM_PANEL_SITRONIX_ST7789V) += panel-sitronix-st7789v.o
+obj-$(CONFIG_DRM_PANEL_HIMAX_HX8379A) += panel-himax-hx8379a.o
diff --git a/drivers/gpu/drm/panel/panel-himax-hx8379a.c b/drivers/gpu/drm/panel/panel-himax-hx8379a.c
new file mode 100644
index 0000000..cec09c4
--- /dev/null
+++ b/drivers/gpu/drm/panel/panel-himax-hx8379a.c
@@ -0,0 +1,574 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/*
+ * The driver for Himax HX8379A-based MIPI-DSI panels
+ *
+ * Copyright 2018 Sergey Suloev <ssuloev@orpaltech.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ */
+
+#define DEBUG
+
+#include <linux/backlight.h>
+#include <linux/delay.h>
+#include <linux/device.h>
+#include <linux/err.h>
+#include <linux/errno.h>
+#include <linux/fb.h>
+#include <linux/gpio.h>
+#include <linux/gpio/consumer.h>
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/of_device.h>
+
+#include <drm/drm_crtc.h>
+#include <drm/drm_mipi_dsi.h>
+#include <drm/drm_modes.h>
+#include <drm/drmP.h>
+#include <drm/drm_panel.h>
+
+#include <video/mipi_display.h>
+
+
+#define HX8379A_MAX_DATA 64
+
+struct hx8379a_instr {
+	u8 cmd;
+	u8 len;
+	u8 data[HX8379A_MAX_DATA];
+};
+
+struct hx8379a_panel_desc {
+	const struct hx8379a_instr *init;
+	unsigned int num_init;
+
+	const struct drm_display_mode *modes;
+	unsigned int num_modes;
+
+	unsigned int lanes;
+
+	unsigned int bpc;
+
+	/**
+	 * @width: width (in mm) of the panel's active display area
+	 * @height: height (in mm) of the panel's active display area
+	 */
+	struct {
+		unsigned int width;
+		unsigned int height;
+	} size;
+
+	unsigned long flags;
+	enum mipi_dsi_pixel_format format;
+};
+
+struct hx8379a_panel {
+	struct drm_panel base;
+	struct mipi_dsi_device *dsi;
+
+	const struct hx8379a_panel_desc *desc;
+
+	struct gpio_desc *reset;
+	struct backlight_device *backlight;
+
+	bool prepared;
+	bool enabled;
+};
+
+static const struct hx8379a_instr truly_tda_fwvga0500g50089_init[] = {
+	// Set EXTC
+	{ 0xB9,	3,	{0xFF,0x83,0x79}},
+
+	// Set MIPI
+/*	{ 0xBA,	1,	{0x51}},*/
+
+	// Set POWER
+	{ 0xB1,	19,	{0x00,0x50,0x26,
+			 0xEC,0x90,0x08,0x11,
+			 0x11,0x11,0x27,0x2F,
+			 0x9A,0x1A,0x12,0x0B,
+			 0x6E,0xF1,0x00,0xE6}},
+/*	{ 0xB1,	19,	{0x00,0x50,0x44,
+			 0xEA,0x8D,0x08,0x11,
+			 0x11,0x11,0x27,0x2F,
+			 0x9A,0x1A,0x42,0x0B,
+			 0x6E,0xF1,0x00,0xE6}},*/
+/*	{ 0xB1, 30, {0x00,0x50,0x24,0xF5,0x98,0x08,0x11,0x17,0x77,0x29, \
+			0x31,0x9A,0x1A,0x12,0x0B,0x76,0xF1,0x00,0xE6,0xE6, \
+			0xE6,0xE6,0xE6,0x00,0x04,0x05,0x0A,0x0B,0x04,0x05, \
+			0x6F}},*/
+
+	// Set DISP
+	{ 0xB2,	13,	{0x00,0x00,0xFE,
+			 0x1E,0x1E,0x19,0x22,
+			 0x00,0xFF,0x1E,0x1E,
+			 0x19,0x20}},
+/*	{ 0xB2,	13,	{0x00,0x00,0xFE,
+			 0x08,0x04,0x19,0x22,
+			 0x00,0xFF,0x08,0x04,
+			 0x19,0x20}},*/
+/*	{ 0xB2, 13, {0x00,0x00,0xFE,0x0E,0x0A,0x19,0xE2,0x00,0xFF,0x0E, \
+			0x0A,0x19,0x20}},*/
+	// Set CYC
+	{ 0xB4,	31,	{0x80,0x08,0x00,
+			 0x32,0x10,0x14,0x32,
+			 0x10,0x00,0x00,0x00,
+			 0x00,0x33,0x04,0x30,
+			 0x18,0x37,0x04,0x30,
+			 0x08,0x34,0x34,0x08,
+			 0x00,0x40,0x08,0x28,
+			 0x08,0x30,0x30,0x04}},
+/*	{ 0xB4,	31,	{0x80,0x08,0x00,
+			 0x32,0x10,0x03,0x32,
+			 0x13,0x70,0x32,0x10,
+			 0x08,0x37,0x01,0x28,
+			 0x07,0x37,0x08,0x35,
+			 0x08,0x3D,0x44,0x08,
+			 0x00,0x40,0x08,0x28,
+			 0x08,0x30,0x30,0x04}},*/
+/*	{ 0xB4, 31, {0x80,0x12,0x00,0x32,0x10,0x03,0x54,0x13,0x67,0x32, \
+			0x13,0x6B,0x39,0x00,0x42,0x05,0x37,0x00,0x41,0x08, \
+			0x3C,0x3C,0x08,0x00,0x40,0x08,0x28,0x08,0x30,0x30, \
+			0x04}},*/
+
+	// Set GIP
+	{ 0xD5,	47,	{0x00,0x00,0x0A,
+			 0x00,0x01,0x00,0x00,
+			 0x03,0x00,0x99,0x88,
+			 0xBB,0xAA,0x23,0x01,
+			 0x67,0x45,0x10,0x32,
+			 0x88,0x88,0x88,0x88,
+			 0x88,0x88,0x88,0x99,
+			 0xAA,0xBB,0x54,0x76,
+			 0x10,0x32,0x23,0x01,
+			 0x88,0x88,0x88,0x88,
+			 0x88,0x88,0x01,0xA5,
+			 0x00,0x00,0x00,0x00}},
+/*	{ 0xD5,	47,	{0x00,0x00,0x0A,
+			 0x00,0x01,0x05,0x00,
+			 0x03,0x00,0x88,0x88,
+			 0x88,0x88,0x23,0x01,
+			 0x67,0x45,0x02,0x13,
+			 0x88,0x88,0x88,0x88,
+			 0x88,0x88,0x88,0x88,
+			 0x88,0x88,0x54,0x76,
+			 0x10,0x32,0x31,0x20,
+			 0x88,0x88,0x88,0x88,
+			 0x88,0x88,0x00,0x00,
+			 0x00,0x00,0x00,0x00}},*/
+/*	{ 0xD5, 47, {0x00,0x00,0x0A,0x00,0x01,0x00,0x00,0x06,0x01,0x01, \
+			0x01,0x23,0x45,0x67,0xAA,0xBB,0x88,0x88,0x67,0x45, \
+			0x88,0x88,0x88,0x88,0x88,0x54,0x10,0x76,0x54,0x32, \
+			0xAA,0xBB,0x88,0x88,0x76,0x10,0x88,0x88,0x88,0x88, \
+			0x88,0x39,0x01,0x00,0x00,0x00,0x00}},*/
+
+	// Set PANEL
+	{ 0xCC,	1,	{0x02}},
+
+	{ 0xBA,	2,	{0x51,0x93}},
+
+	// Set GAMMA
+	{ 0xE0,	35,	{0x79,0x05,0x0F,
+			 0x14,0x26,0x20,0x3F,
+			 0x2A,0x43,0x04,0x0C,
+			 0x11,0x15,0x17,0x15,
+			 0x15,0x10,0x13,0x05,
+			 0x0F,0x14,0x26,0x20,
+			 0x3F,0x2A,0x43,0x04,
+			 0x0C,0x11,0x15,0x17,
+			 0x15,0x15,0x10,0x13}},
+	/*{ 0xE0, 35, {0x79,0x00,0x01,0x0F,0x25,0x26,0x3F,0x33,0x47,0x0A, \
+			0x11,0x11,0x15,0x17,0x14,0x16,0x11,0x17,0x00,0x01, \
+			0x0F,0x25,0x26,0x3F,0x33,0x47,0x0A,0x11,0x11,0x15, \
+			0x17,0x14,0x16,0x11,0x17}},*/
+
+	// Set VCOM
+	{ 0xB6,	4,	{0x00,0x9C,0x00,0x9C}},
+	/*{ 0xB6,  4, {0x00,0xAC,0x00,0xAC}},*/
+
+	// TODO: what is this???
+	{ 0xC6,	2,	{0x08,0x0C}},
+
+	/* Disable CABC feature */
+	{ 0x55,	1,	{0x00}},
+};
+
+
+/*
+ * The horizontal and vertical timings
+ */
+#define HX8379A_HSYNC_FRONT_PORCH	32/*25*/	/* pixels */
+#define HX8379A_HSYNC_BACK_PORCH	32/*25*/
+#define HX8379A_HSYNC_PULSE_WIDTH	32/*11*/
+#define HX8379A_HDISPLAY		480
+
+#define HX8379A_VSYNC_FRONT_PORCH	32/*6*/	/* lines */
+#define HX8379A_VSYNC_BACK_PORCH	22/*6*/
+#define HX8379A_VSYNC_PULSE_WIDTH	10/*4*/
+#define HX8379A_VDISPLAY		854
+
+
+static const struct drm_display_mode truly_tda_fwvga0500g50089_modes[] = {
+	{
+		.clock		= 31726,/*29200*/ /*KHz*/
+		.vrefresh	= 60,	/*Hz*/
+
+		.hdisplay	= HX8379A_HDISPLAY,
+		.hsync_start	= HX8379A_HDISPLAY
+					+ HX8379A_HSYNC_FRONT_PORCH,
+		.hsync_end	= HX8379A_HDISPLAY
+					+ HX8379A_HSYNC_FRONT_PORCH
+					+ HX8379A_HSYNC_PULSE_WIDTH,
+		.htotal		= HX8379A_HDISPLAY
+					+ HX8379A_HSYNC_FRONT_PORCH
+					+ HX8379A_HSYNC_PULSE_WIDTH
+					+ HX8379A_HSYNC_BACK_PORCH,
+
+		.vdisplay	= HX8379A_VDISPLAY,
+		.vsync_start	= HX8379A_VDISPLAY
+					+ HX8379A_VSYNC_FRONT_PORCH,
+		.vsync_end	= HX8379A_VDISPLAY
+					+ HX8379A_VSYNC_FRONT_PORCH
+					+ HX8379A_VSYNC_PULSE_WIDTH,
+		.vtotal		= HX8379A_VDISPLAY
+					+ HX8379A_VSYNC_FRONT_PORCH
+					+ HX8379A_VSYNC_PULSE_WIDTH
+					+ HX8379A_VSYNC_BACK_PORCH,
+
+		.flags	= DRM_MODE_FLAG_PVSYNC | DRM_MODE_FLAG_PHSYNC,
+	},
+};
+
+static const struct hx8379a_panel_desc truly_tda_fwvga0500g50089 = {
+	.init		= truly_tda_fwvga0500g50089_init,
+	.num_init	= ARRAY_SIZE(truly_tda_fwvga0500g50089_init),
+	.modes		= truly_tda_fwvga0500g50089_modes,
+	.num_modes	= ARRAY_SIZE(truly_tda_fwvga0500g50089_modes),
+	.bpc	= 8,
+	.size	= {
+		.width	= 62,
+		.height	= 110,
+	},
+	.flags	= ( MIPI_DSI_MODE_VIDEO |
+		    MIPI_DSI_MODE_LPM |
+		    MIPI_DSI_MODE_VIDEO_SYNC_PULSE ),
+        .format	= MIPI_DSI_FMT_RGB888,
+	.lanes	= 2,
+};
+
+static struct hx8379a_panel *panel_to_hxpanel(struct drm_panel *panel)
+{
+	return container_of(panel, struct hx8379a_panel, base);
+}
+
+static int hx8379a_panel_write(struct hx8379a_panel *hxp,
+			       u8 cmd, const void *data, u32 len)
+{
+	struct device *dev = &hxp->dsi->dev;
+	int ret;
+
+	dev_dbg(dev, "panel write: cmd=0x%02X, len=%d\n", cmd, len);
+
+	ret = mipi_dsi_dcs_write(hxp->dsi, cmd, data, len);
+	if (ret < 0) {
+		dev_err(dev,"panel write failed: cmd=[0x%02x], len=%d, ret=%d\n",
+			cmd, len, ret);
+		return ret;
+	}
+
+	return 0;
+}
+
+static int hx8379a_panel_unprepare(struct drm_panel *panel)
+{
+	struct hx8379a_panel *hxp = panel_to_hxpanel(panel);
+	struct device *dev = &hxp->dsi->dev;
+	int ret;
+
+	if (!hxp->prepared)
+		return 0;
+
+	dev_dbg(dev, "panel unprepare\n");
+
+	ret = mipi_dsi_dcs_enter_sleep_mode(hxp->dsi);
+	if (ret < 0)
+		dev_err(dev,"failed to enter sleep mode, ret = %d\n",ret);
+
+	/* Wait for enter sleep mode*/
+	msleep(120);
+
+	gpiod_set_value_cansleep(hxp->reset, 1);
+	msleep(20);
+
+	hxp->prepared = false;
+
+	return 0;
+}
+
+static int hx8379a_panel_prepare(struct drm_panel *panel)
+{
+	struct hx8379a_panel *hxp = panel_to_hxpanel(panel);
+	struct device *dev = &hxp->dsi->dev;
+	const struct hx8379a_panel_desc *desc = hxp->desc;
+	unsigned int i;
+	int ret;
+
+	if (hxp->prepared)
+		return 0;
+
+	dev_dbg(dev, "panel prepare\n");
+
+	/* Reset the panel*/
+	gpiod_set_value_cansleep(hxp->reset, 0);
+	msleep(20);
+
+	gpiod_set_value_cansleep(hxp->reset, 1);
+	msleep(10);
+
+	gpiod_set_value_cansleep(hxp->reset, 0);
+	msleep(120);
+
+	u8 fmt;
+	ret = mipi_dsi_dcs_get_pixel_format(hxp->dsi, &fmt);
+	if (ret > 0) {
+		dev_dbg(dev, "pixel fmt: 0x%02x\n", fmt);
+	}
+
+	/* Init sequence */
+	for (i = 0; i < desc->num_init; i++) {
+		const struct hx8379a_instr *instr = &desc->init[i];
+
+		ret = hx8379a_panel_write(hxp, instr->cmd,
+					instr->data, instr->len);
+		if (ret)
+			return ret;
+	}
+
+	ret = mipi_dsi_dcs_set_tear_on(hxp->dsi,
+				MIPI_DSI_DCS_TEAR_MODE_VBLANK);
+	if (ret)
+		return ret;
+
+	ret = mipi_dsi_dcs_exit_sleep_mode(hxp->dsi);
+	if (ret) {
+		dev_err(dev,"couldn't exit sleep mode, ret = %d\n", ret);
+		return ret;
+	}
+
+	/* Wait for sleep out exit */
+	msleep(120);
+
+	hxp->prepared = true;
+
+	return 0;
+}
+
+static int hx8379a_panel_disable(struct drm_panel *panel)
+{
+	struct hx8379a_panel *hxp = panel_to_hxpanel(panel);
+	struct device *dev = &hxp->dsi->dev;
+	int ret;
+
+	if (!hxp->enabled)
+		return 0;
+
+	dev_dbg(dev, "panel disable\n");
+
+	backlight_disable(hxp->backlight);
+
+	ret = mipi_dsi_dcs_set_display_off(hxp->dsi);
+	if (ret < 0)
+		dev_err(dev,"faied to set display OFF, ret = %d\n",ret);
+
+	hxp->enabled = false;
+
+	return 0;
+}
+
+static int hx8379a_panel_enable(struct drm_panel *panel)
+{
+	struct hx8379a_panel *hxp = panel_to_hxpanel(panel);
+	struct device *dev = &hxp->dsi->dev;
+	int ret;
+
+	if (hxp->enabled)
+		return 0;
+
+	dev_dbg(dev, "panel enable\n");
+
+	ret = mipi_dsi_dcs_set_display_on(hxp->dsi);
+	if (ret) {
+		dev_err(dev,"couldn't set display ON, ret = %d\n", ret);
+		return ret;
+	}
+
+	ret = backlight_enable(hxp->backlight);
+	if (ret < 0) {
+		dev_err(dev,"failed to enable backlight, ret = %d\n",ret);
+		return ret;
+	}
+
+	hxp->enabled = true;
+
+	return 0;
+}
+
+static int hx8379a_panel_get_modes(struct drm_panel *panel)
+{
+	struct drm_connector *connector = panel->connector;
+	struct hx8379a_panel *hxp = panel_to_hxpanel(panel);
+	struct device *dev = &hxp->dsi->dev;
+	const struct hx8379a_panel_desc *desc = hxp->desc;
+	struct drm_device *drm = panel->drm;
+	unsigned int i, num = 0;
+	static const u32 bus_format = MEDIA_BUS_FMT_RGB888_1X24;
+
+	for (i = 0; i < desc->num_modes; i++) {
+		const struct drm_display_mode *m = &desc->modes[i];
+		struct drm_display_mode *mode;
+
+		mode = drm_mode_duplicate(drm, m);
+		if (!mode) {
+			dev_err(dev, "failed to add mode %ux%u@%u\n",
+				m->hdisplay, m->vdisplay, m->vrefresh);
+			continue;
+		}
+
+		mode->type |= DRM_MODE_TYPE_DRIVER;
+
+		if (i == 0)
+			mode->type |= DRM_MODE_TYPE_PREFERRED;
+
+		drm_mode_set_name(mode);
+
+		drm_mode_probed_add(connector, mode);
+		num++;
+	}
+
+	connector->display_info.bpc	= desc->bpc;
+	connector->display_info.width_mm = desc->size.width;
+	connector->display_info.height_mm = desc->size.height;
+	drm_display_info_set_bus_formats(&connector->display_info,
+					 &bus_format, 1);
+
+	return num;
+}
+
+static const struct drm_panel_funcs hx8379a_panel_funcs = {
+	.disable	= hx8379a_panel_disable,
+	.unprepare	= hx8379a_panel_unprepare,
+	.prepare	= hx8379a_panel_prepare,
+	.enable		= hx8379a_panel_enable,
+	.get_modes	= hx8379a_panel_get_modes,
+};
+
+static const struct of_device_id hx8379a_panel_dsi_of_match[] = {
+	{
+		.compatible	= "truly,tda-fwvga0500g50089",
+		.data		= &truly_tda_fwvga0500g50089,
+	}, {
+		/* sentinel */
+	}
+};
+MODULE_DEVICE_TABLE(of, hx8379a_panel_dsi_of_match);
+
+static int hx8379a_panel_probe(struct mipi_dsi_device *dsi)
+{
+	struct device_node *np;
+	struct hx8379a_panel *hxp;
+        const struct of_device_id *match;
+	int ret;
+
+        match = of_match_device(hx8379a_panel_dsi_of_match,
+				&dsi->dev);
+        if (!match) {
+		dev_err(&dsi->dev, "no device match found\n");
+                return -ENODEV;
+	}
+
+	hxp = devm_kzalloc(&dsi->dev, sizeof(*hxp), GFP_KERNEL);
+	if (!hxp)
+		return -ENOMEM;
+	mipi_dsi_set_drvdata(dsi, hxp);
+	hxp->dsi = dsi;
+	hxp->desc = match->data;
+
+	drm_panel_init(&hxp->base);
+	hxp->base.dev = &dsi->dev;
+	hxp->base.funcs = &hx8379a_panel_funcs;
+
+	hxp->reset = devm_gpiod_get(&dsi->dev, "reset", GPIOD_OUT_LOW);
+	if (IS_ERR(hxp->reset)) {
+		dev_err(&dsi->dev, "couldn't get our reset line\n");
+		return PTR_ERR(hxp->reset);
+	}
+
+	np = of_parse_phandle(dsi->dev.of_node, "backlight", 0);
+	if (np) {
+		hxp->backlight = of_find_backlight_by_node(np);
+		of_node_put(np);
+
+		if (!hxp->backlight)
+			return -EPROBE_DEFER;
+	}
+
+	ret = drm_panel_add(&hxp->base);
+	if (ret < 0) {
+		dev_err(&dsi->dev, "couldn't add drm panel\n");
+		goto err_backlight_put;
+	}
+
+	dsi->format	= hxp->desc->format;
+	dsi->lanes	= hxp->desc->lanes;
+	dsi->mode_flags	= hxp->desc->flags;
+
+	ret = mipi_dsi_attach(dsi);
+	if (ret) {
+		dev_err(&dsi->dev,"failed to attach dsi to host: %d\n", ret);
+		goto err_panel_remove;
+	}
+
+	return 0;
+
+err_panel_remove:
+	drm_panel_remove(&hxp->base);
+err_backlight_put:
+	if (hxp->backlight)
+		put_device(&hxp->backlight->dev);
+
+	return ret;
+}
+
+static int hx8379a_panel_remove(struct mipi_dsi_device *dsi)
+{
+	struct hx8379a_panel *hxp = mipi_dsi_get_drvdata(dsi);
+	int ret;
+
+	ret = mipi_dsi_detach(dsi);
+	if (ret)
+		dev_err(&dsi->dev,"failed to detach from DSI host: %d\n", ret);
+
+	drm_panel_remove(&hxp->base);
+
+	if (hxp->backlight)
+		put_device(&hxp->backlight->dev);
+
+	return 0;
+}
+
+static struct mipi_dsi_driver hx8379a_panel_dsi_driver = {
+	.probe	= hx8379a_panel_probe,
+	.remove	= hx8379a_panel_remove,
+	.driver	= {
+		.name		= "panel-himax-hx8379a",
+		.of_match_table	= hx8379a_panel_dsi_of_match,
+	},
+};
+module_mipi_dsi_driver(hx8379a_panel_dsi_driver);
+
+MODULE_AUTHOR("Sergey Suloev <ssuloev@orpaltech.com>");
+MODULE_DESCRIPTION("Himax HX8379A-based MIPI-DSI panel driver");
+MODULE_LICENSE("GPL v2");
-- 
2.17.1

