From 46dcfbbbd81acaaa8956bc577d9f0cfd59d2adf5 Mon Sep 17 00:00:00 2001
From: Sergey Suloev <ssuloev@orpaltech.com>
Date: Sun, 2 Sep 2018 22:27:05 +0300
Subject: [PATCH] sunxi: ASoC: Add Audioinjector-Pi soundcard driver

---
 sound/soc/sunxi/Kconfig                  |   7 +
 sound/soc/sunxi/Makefile                 |   4 +
 sound/soc/sunxi/audioinjector-pi-sound.c | 242 +++++++++++++++++++++++
 3 files changed, 253 insertions(+)
 create mode 100644 sound/soc/sunxi/audioinjector-pi-sound.c

diff --git a/sound/soc/sunxi/Kconfig b/sound/soc/sunxi/Kconfig
index 22408bc..a15cf65 100644
--- a/sound/soc/sunxi/Kconfig
+++ b/sound/soc/sunxi/Kconfig
@@ -45,4 +45,11 @@ config SND_SUN4I_SPDIF
 	help
 	  Say Y or M to add support for the S/PDIF audio block in the Allwinner
 	  A10 and affiliated SoCs.
+
+config SND_AUDIOINJECTOR_PI
+	tristate "Audioinjector-Pi Soundcard driver for Allwinner SoCs"
+	depends on SND_SUN4I_I2S
+	select SND_SOC_WM8731
+	help
+	  Say Y or M if you want to add support for Audioinjector-Pi Soundcard.
 endmenu
diff --git a/sound/soc/sunxi/Makefile b/sound/soc/sunxi/Makefile
index 4a9ef67..1cfecb5 100644
--- a/sound/soc/sunxi/Makefile
+++ b/sound/soc/sunxi/Makefile
@@ -4,3 +4,7 @@ obj-$(CONFIG_SND_SUN4I_I2S) += sun4i-i2s.o
 obj-$(CONFIG_SND_SUN4I_SPDIF) += sun4i-spdif.o
 obj-$(CONFIG_SND_SUN8I_CODEC_ANALOG) += sun8i-codec-analog.o
 obj-$(CONFIG_SND_SUN8I_CODEC) += sun8i-codec.o
+
+# Audioinjector-Pi Soundcard Support
+snd-soc-audioinjector-pi-objs := audioinjector-pi-sound.o
+obj-$(CONFIG_SND_AUDIOINJECTOR_PI) += snd-soc-audioinjector-pi.o
diff --git a/sound/soc/sunxi/audioinjector-pi-sound.c b/sound/soc/sunxi/audioinjector-pi-sound.c
new file mode 100644
index 0000000..92e41fc
--- /dev/null
+++ b/sound/soc/sunxi/audioinjector-pi-sound.c
@@ -0,0 +1,242 @@
+/*
+ * ASoC Driver for AudioInjector Pi soundcard
+ *
+ *  Created on: 13-May-2016
+ *      Author: flatmax@flatmax.org
+ *  Adopted by: Sergey Suloev <ssuloev@orpaltech.com>
+ *
+ * Copyright (C) 2016 Flatmax Pty. Ltd.
+ * Copyright (C) 2017-2018 ORPAL Technology, Inc.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * version 2 as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful, but
+ * WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * General Public License for more details.
+ */
+
+#include <linux/module.h>
+#include <linux/types.h>
+
+#include <sound/core.h>
+#include <sound/soc.h>
+#include <sound/pcm_params.h>
+#include <sound/control.h>
+
+#include "../codecs/wm8731.h"
+
+#define BOARD_XTAL_FREQ	12000000
+
+static const unsigned int sun4i_i2s_rates[] = {
+	8000, 16000, 32000, 44100, 48000, 96000, 88200,
+};
+
+static struct snd_pcm_hw_constraint_list sun4i_i2s_constraints = {
+	.list	= sun4i_i2s_rates,
+	.count	= ARRAY_SIZE(sun4i_i2s_rates),
+};
+
+static int snd_audioinjector_pi_startup(struct snd_pcm_substream *substream)
+{
+	/* Setup constraints, because there is a 12MHz XTAL on the board */
+	snd_pcm_hw_constraint_list(substream->runtime, 0,
+				   SNDRV_PCM_HW_PARAM_RATE,
+				   &sun4i_i2s_constraints);
+	return 0;
+}
+
+static int snd_audioinjector_pi_hw_params(struct snd_pcm_substream *substream,
+					  struct snd_pcm_hw_params *params)
+{
+	struct snd_soc_pcm_runtime *rtd = substream->private_data;
+	struct snd_soc_card *card = rtd->card;
+	struct snd_soc_dai *codec_dai = rtd->codec_dai;
+	struct snd_soc_dai *cpu_dai = rtd->cpu_dai;
+	int ret = 0;
+
+	switch (params_rate(params)){
+		case 8000:
+			ret = snd_soc_dai_set_bclk_ratio(cpu_dai, 1500);
+			break;
+		case 16000:
+			ret = snd_soc_dai_set_bclk_ratio(cpu_dai, 750);
+			break;
+		case 32000:
+			ret = snd_soc_dai_set_bclk_ratio(cpu_dai, 375);
+			break;
+		case 44100:
+			ret = snd_soc_dai_set_bclk_ratio(cpu_dai, 272);
+			break;
+		case 48000:
+			ret = snd_soc_dai_set_bclk_ratio(cpu_dai, 250);
+			break;
+		case 88200:
+			ret = snd_soc_dai_set_bclk_ratio(cpu_dai, 136);
+			break;
+		case 96000:
+			ret = snd_soc_dai_set_bclk_ratio(cpu_dai, 125);
+			break;
+		default:
+			ret = -EINVAL;
+			break;
+	}
+	if (ret) {
+		dev_err(card->dev, "Failed to CPU BCLK ratio: %d\n", ret);
+                return ret;
+        }
+
+	/* Set codec sysclk */
+	ret = snd_soc_dai_set_sysclk(codec_dai, WM8731_SYSCLK_XTAL,
+				     BOARD_XTAL_FREQ, SND_SOC_CLOCK_IN);
+	if (ret) {
+		dev_err(card->dev,
+			"Failed to set WM8731 SYSCLK: %d\n", ret);
+		return ret;
+	}
+
+	return 0;
+}
+
+/* machine stream operations */
+static struct snd_soc_ops snd_audioinjector_pi_ops = {
+	.startup	= snd_audioinjector_pi_startup,
+	.hw_params	= snd_audioinjector_pi_hw_params,
+};
+
+static struct snd_soc_dai_link snd_audioinjector_pi_dai = {
+	.name		= "audioinjector-pi",
+	.stream_name	= "audioinjector-pi-audio",
+	.platform_name  = "sun4i-i2s.0",
+	.cpu_dai_name	= "sun4i-i2s.0",
+	.codec_dai_name	= "wm8731-hifi",
+	.codec_name	= "wm8731.0-001a",
+	.ops		= &snd_audioinjector_pi_ops,
+	.dai_fmt	= SND_SOC_DAIFMT_CBM_CFM |
+			SND_SOC_DAIFMT_NB_NF,
+};
+
+static const struct snd_soc_dapm_widget wm8731_dapm_widgets[] = {
+	SND_SOC_DAPM_HP("Headphone Jack", NULL),
+	SND_SOC_DAPM_SPK("Ext Spk", NULL),
+	SND_SOC_DAPM_LINE("Line In Jacks", NULL),
+	SND_SOC_DAPM_MIC("Mic Jack", NULL),
+};
+
+static const struct snd_soc_dapm_route audioinjector_audio_map[] = {
+	/* headphone connected to LHPOUT, RHPOUT */
+	{"Headphone Jack", NULL, "LHPOUT"},
+	{"Headphone Jack", NULL, "RHPOUT"},
+
+	/* speaker connected to LOUT, ROUT */
+	{"Ext Spk", NULL, "ROUT"},
+	{"Ext Spk", NULL, "LOUT"},
+
+	/* line inputs */
+	{"Line Input", NULL, "Line In Jacks"},
+
+	/* mic is connected to Mic Jack, with WM8731 Mic Bias */
+	{"Mic Bias", NULL, "Mic Jack"},
+};
+
+static struct snd_soc_card snd_soc_audioinjector_pi = {
+	.name		= "audioinjector-pi",
+	.dai_link	= &snd_audioinjector_pi_dai,
+	.num_links	= 1,
+
+	.dapm_widgets	  = wm8731_dapm_widgets,
+	.num_dapm_widgets = ARRAY_SIZE(wm8731_dapm_widgets),
+	.dapm_routes	  = audioinjector_audio_map,
+	.num_dapm_routes  = ARRAY_SIZE(audioinjector_audio_map),
+};
+
+static int audioinjector_pi_probe(struct platform_device *pdev)
+{
+	struct device *dev = &pdev->dev;
+	struct snd_soc_card *card;
+	struct snd_soc_dai_link *link;
+	u32 format;
+	int ret;
+
+	card = devm_kmemdup(dev, &snd_soc_audioinjector_pi,
+			    sizeof(*card), GFP_KERNEL);
+	if (!card)
+		return -ENOMEM;
+
+	card->dev = dev;
+	link = card->dai_link;
+
+	ret = of_property_read_u32(dev->of_node, "hw-audio-format",
+				   &format);
+	if (!ret) {
+		if (format < 1 || format > 7)
+			return -EINVAL;
+		link->dai_fmt |= format;
+	} else
+		link->dai_fmt |= SND_SOC_DAIFMT_I2S;
+
+	struct device_node *cpu_node = of_parse_phandle(dev->of_node,
+							"cpu-node", 0);
+	struct device_node *codec_node = of_parse_phandle(dev->of_node,
+							"codec-node", 0);
+
+	if (cpu_node) {
+		link->cpu_dai_name	= NULL;
+		link->cpu_of_node	= cpu_node;
+		link->platform_name	= NULL;
+		link->platform_of_node	= cpu_node;
+	} else
+		if (!link->cpu_of_node) {
+			dev_err(dev,
+				"Property 'cpu-node' missing or invalid\n");
+			return -EINVAL;
+		}
+
+	if (codec_node) {
+		link->codec_name	= NULL;
+		link->codec_of_node	= codec_node;
+	} else
+		if (!link->codec_of_node) {
+			dev_err(dev,
+				"Property 'codec-node' missing or invalid\n");
+			return -EINVAL;
+		}
+
+	ret = snd_soc_register_card(card);
+	if (ret && ret != -EPROBE_DEFER) {
+		dev_err(dev, "snd_soc_register_card failed (%d)\n", ret);
+	}
+
+	return ret;
+}
+
+static int audioinjector_pi_remove(struct platform_device *pdev)
+{
+	struct snd_soc_card *card = platform_get_drvdata(pdev);
+
+	return snd_soc_unregister_card(card);
+}
+
+static const struct of_device_id audioinjector_pi_of_match[] = {
+	{ .compatible = "flatmax,audioinjector-pi", },
+	{},
+};
+MODULE_DEVICE_TABLE(of, audioinjector_pi_of_match);
+
+static struct platform_driver audioinjector_pi_driver = {
+	.probe  = audioinjector_pi_probe,
+	.remove = audioinjector_pi_remove,
+	.driver	= {
+		.name		= "audioinjector-pi",
+		.of_match_table	= audioinjector_pi_of_match,
+	},
+};
+module_platform_driver(audioinjector_pi_driver);
+
+MODULE_ALIAS("platform:audioinjector-pi");
+MODULE_AUTHOR("Matt Flax <flatmax@flatmax.org>");
+MODULE_AUTHOR("Sergey Suloev <ssuloev@orpaltech.com>");
+MODULE_DESCRIPTION("Audioinjector.net Pi Soundcard");
+MODULE_LICENSE("GPL");
-- 
2.17.1

