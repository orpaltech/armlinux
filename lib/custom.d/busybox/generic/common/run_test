#!/bin/bash

SOC_ARCH=arm
#SOC_ARCH=arm64
SOC_FAMILY=sunxi
PRODUCT_FULL_VER=1.0-0
CONFIG=aapi

HOST_CPU_CORES=2

EXTRADIR=/home/sergey/Projects/orpaltech
WORKDIR=/srv/projects/orpaltech/armlinux
CONFIGDIR=${WORKDIR}/config

TOOLCHAINDIR=${WORKDIR}/toolchains

if [ "${SOC_ARCH}" = arm ] ; then

	LINUX_PLATFORM=arm-linux-gnueabihf

	MESON_CPU_FAMILY=arm
	MESON_CPU=armv7hl

	BOARD=bananapi-m2m

	BB_CROSS_COMPILE=${TOOLCHAINDIR}/linaro/13/arm-linux-gnueabihf/bin/arm-linux-gnueabihf-

	OPENSSL_PLATFORM="linux-armv4 -march=armv7-a"

	QT_OPENGL_OPTION="-opengl es2"
	QT_DEVICE_CONFIG="linux-arm-generic-g++"
#linux-sun8i-a33-drm-g++"
elif [ "${SOC_ARCH}" = arm64 ] ; then

	LINUX_PLATFORM=aarch64-linux-gnu

	MESON_CPU_FAMILY=aarch64
	MESON_CPU=armv8-a

	BOARD=nanopi-a64

	BB_CROSS_COMPILE=${TOOLCHAINDIR}/linaro/13/aarch64-linux-gnu/bin/aarch64-linux-gnu-

	OPENSSL_PLATFORM="linux-aarch64"
fi

# ----Test block -------
BASEDIR=${WORKDIR}/output
LIBDIR=${WORKDIR}/lib

LOGDIR=${WORKDIR}/logs

#GIT_MIRROR_ROOT=git@hanni-ubuntu-desktop:/srv/projects3/git
SYSROOT_DIR=${EXTRADIR}/boards/${BOARD}/sysroot

BB_PKG_CONFIG=${BASEDIR}/images/busybox/build/cross-pkg-config.sh
BB_CMAKE_TOOLCHAIN_QT_FILE=${BASEDIR}/images/busybox/build/cross-qt-toolchain.cmake

SSH_KEY_PATH=/home/sergey/.ssh/id_rsa

BB_LIBC=gnu

BB_GCC=${BB_CROSS_COMPILE}gcc
BB_CXX=${BB_CROSS_COMPILE}g++
BB_NM=${BB_CROSS_COMPILE}nm
BB_OBJDUMP=${BB_CROSS_COMPILE}objdump
BB_STRIP=${BB_CROSS_COMPILE}strip
BB_RANLIB=${BB_CROSS_COMPILE}ranlib
BB_AR=${BB_CROSS_COMPILE}ar
BB_PLATFORM=${LINUX_PLATFORM}
BB_BUILD_OUT=build_${LINUX_PLATFORM}

R=${BASEDIR}/images/busybox/build/chroot
ETC_DIR=${R}/etc

#CLEAN=bluetooth
#ENABLE_BTH=yes
ENABLE_SSHD=yes

ENABLE_WLAN=yes

#----------------------

. ${LIBDIR}/common.sh
. ${LIBDIR}/functions.sh
. ${LIBDIR}/toolchains.sh


set_cross_compile

. ${LIBDIR}/meson-build.sh



meson_cross_init()
{
    local CROSS_FILE=$1
    cat <<-EOF > ${CROSS_FILE}
# Meson cross-file
[constants]
compile_flags = [ '-I${R}/usr/include' ]
linker_flags = [ '-L${R}/usr/lib' ]

[binaries]
c = '${BB_GCC}'
cpp = '${BB_CXX}'
strip = '${BB_STRIP}'
ar = '${BB_AR}'
objcopy = '${BB_OBJCOPY}'
pkg-config = '${BB_PKG_CONFIG}'
# exe_wrapper = 'QEMU_LD_PREFIX=${R} ${QEMU_BINARY}'

[built-in options]
c_args = compile_flags
cpp_args = compile_flags
c_link_args = linker_flags
cpp_link_args = linker_flags

[properties]
sys_root = '${R}'
#pkg_config_libdir = '${R}/lib/pkgconfig:${R}/usr/lib/pkgconfig:${R}/usr/share/pkgconfig'

[host_machine]
system = 'linux'
cpu_family = '${MESON_CPU_FAMILY}'
cpu = '${MESON_CPU}'
endian = 'little'
EOF
}



#. ./81-fftw.sh
. ./89-qt.sh
